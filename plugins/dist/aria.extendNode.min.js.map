{"version":3,"sources":["aria.extendNode.js"],"names":["ARIA","ariaProperty","ariaIsString","roleProperty","roleIsString","roleInstances","WeakMap","getRoleInstance","element","list","get","List","tokens","role","set","roleGetter","addNodeProperty","name","valueMaker","valueGetter","settings","descriptor","configurable","getter","Object","defineProperty","Node","prototype","undefined","this","value","keys","forEach","key","extendDOM","aria","trim","Error","context","Element","window"],"mappings":"CAMC,SAAUA,GAEP,aAEA,IAAIC,EAAe,GACfC,GAAe,EACfC,EAAe,GACfC,GAAe,EACfC,EAAgB,IAAIC,QAaxB,SAASC,EAAgBC,GAErB,IAAIC,EAAOJ,EAAcK,IAAIF,GAS7B,OAPKC,IAEDA,EAAO,IAAIT,EAAKW,KAAKH,EAAS,OAAQR,EAAKY,OAAOC,MAClDR,EAAcS,IAAIN,EAASC,IAIxBA,EAcX,SAASM,EAAWP,GAChB,OAAOD,EAAgBC,GAASE,MAqBpC,SAASM,EAAgBC,EAAMC,EAAYC,EAAaC,GAEpD,IAAIC,EAAa,CAEbC,cAAc,EAEdZ,IAAK,SAASa,IAgBV,OAZAC,OAAOC,eAAeC,KAAKC,UAAWV,EAAM,CACxCP,SAAKkB,IAGTJ,OAAOC,eANMI,KAMiBZ,EAAM,CAChCa,MAAOZ,EAPEW,QAUbL,OAAOC,eAAeC,KAAKC,UAAWV,EAAM,CACxCP,IAAKa,IAIkB,mBAAhBJ,EACLA,EAhBOU,MAAAA,KAiBAZ,KAOjBG,GAEAI,OAAOO,KAAKX,GAAUY,QAAQ,SAAUC,GACpCZ,EAAWY,GAAOb,EAASa,KAKnCT,OAAOC,eAAeC,KAAKC,UAAWV,EAAMI,GAIhD,GAAIrB,GAAQA,EAAKkC,UAAW,CAOxB,GALAjC,EAAeD,EAAKkC,UAAUC,KAG9B/B,EAAuC,iBAFvCD,EAAeH,EAAKkC,UAAUrB,OAC9BX,EAAuC,iBAAjBD,IAKfG,GACAH,EAAamC,SAAWjC,EAAaiC,OAGxC,MAAM,IAAIC,MACN,0EAMJnC,GAYAc,EAAgBf,EAAamC,OAAQ,SAAUE,GAC3C,OAAO,IAAItC,EAAKuC,QAAQD,KAK5BlC,GAYCY,EAAgBb,EAAaiC,OAAQrB,EAAYA,EAAY,CAEzDD,IAAK,SAAUgB,GACXvB,EAAgBsB,MAAMf,IAAIgB,OArK/C,CA8KEU,OAAOxC","sourcesContent":["/**\r\n * @file    Adds the \"aria\" and \"role\" properties to Node.prototype if ARIA is\r\n *          set up to allow it.\r\n * @author  James \"Skateside\" Long\r\n * @license MIT\r\n */\r\n(function (ARIA) {\r\n\r\n    \"use strict\";\r\n\r\n    var ariaProperty = \"\";\r\n    var ariaIsString = true;\r\n    var roleProperty = \"\";\r\n    var roleIsString = true;\r\n    var roleInstances = new WeakMap();\r\n\r\n    /**\r\n     * Gets the instance of {@link ARIA.List} for the given element that handles\r\n     * the element's role attribute. If there is no instance, once is created\r\n     * before being returned.\r\n     *\r\n     * @private\r\n     * @param   {Element} element\r\n     *          Element whose role {@link ARIA.List} should be returned.\r\n     * @return  {ARIA.List}\r\n     *          ARIA.List instance.\r\n     */\r\n    function getRoleInstance(element) {\r\n\r\n        var list = roleInstances.get(element);\r\n\r\n        if (!list) {\r\n\r\n            list = new ARIA.List(element, \"role\", ARIA.tokens.role);\r\n            roleInstances.set(element, list);\r\n\r\n        }\r\n\r\n        return list;\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the {@link ARIA.List} instance for the given element.\r\n     *\r\n     * @private\r\n     * @see     getRoleInstance\r\n     * @param   {Element} element\r\n     *          Element whose instance value should be returned.\r\n     * @return  {Array.<String>}\r\n     *          Value of the {@link ARIA.List} instance.\r\n     */\r\n    function roleGetter(element) {\r\n        return getRoleInstance(element).get();\r\n    }\r\n\r\n    /**\r\n     * Adds a lazy-loaded instance to Node.prototype.\r\n     *\r\n     * @private\r\n     * @see     https://github.com/LeaVerou/bliss/issues/49\r\n     * @param   {String} name\r\n     *          Name of the property to add.\r\n     * @param   {Function} valueMaker\r\n     *          Function which creates the value. This function is passed the\r\n     *          Node instance as a parameter.\r\n     * @param   {Function} [valueGetter]\r\n     *          Optional function for retrieving the value from the object. The\r\n     *          function is passed the Node instance as a parameter. If\r\n     *          ommitted, the value is retrieved by getting the property of the\r\n     *          Node instance at the given name.\r\n     * @param   {Object} [settings]\r\n     *          Optional additional settings for the property descriptor.\r\n     */\r\n    function addNodeProperty(name, valueMaker, valueGetter, settings) {\r\n\r\n        var descriptor = {\r\n\r\n            configurable: true,\r\n\r\n            get: function getter() {\r\n\r\n                var object = this;\r\n\r\n                Object.defineProperty(Node.prototype, name, {\r\n                    get: undefined\r\n                });\r\n\r\n                Object.defineProperty(object, name, {\r\n                    value: valueMaker(object)\r\n                });\r\n\r\n                Object.defineProperty(Node.prototype, name, {\r\n                    get: getter\r\n                });\r\n\r\n                return (\r\n                    typeof valueGetter === \"function\"\r\n                    ? valueGetter(object)\r\n                    : object[name]\r\n                );\r\n\r\n            }\r\n\r\n        };\r\n\r\n        if (settings) {\r\n\r\n            Object.keys(settings).forEach(function (key) {\r\n                descriptor[key] = settings[key];\r\n            });\r\n\r\n        }\r\n\r\n        Object.defineProperty(Node.prototype, name, descriptor);\r\n\r\n    }\r\n\r\n    if (ARIA && ARIA.extendDOM) {\r\n\r\n        ariaProperty = ARIA.extendDOM.aria;\r\n        roleProperty = ARIA.extendDOM.role;\r\n        ariaIsString = typeof ariaProperty === \"string\";\r\n        roleIsString = typeof roleProperty === \"string\";\r\n\r\n        if (\r\n            ariaIsString\r\n            && roleIsString\r\n            && ariaProperty.trim() === roleProperty.trim()\r\n        ) {\r\n\r\n            throw new Error(\r\n                \"aria.js: ARIA.extendDOM.aria cannot be the same as \" +\r\n                \"ARIA.extendDOM.role\"\r\n            );\r\n\r\n        }\r\n\r\n        if (ariaIsString) {\r\n\r\n            /**\r\n             * The property that handles the WAI-ARIA attributes on the element.\r\n             * The name of this property can be changed by adjusting\r\n             * {@link ARIA.extendDOM.aria}.\r\n             *\r\n             * @name     aria\r\n             * @memberof Element\r\n             * @instance\r\n             * @type     {ARIA.Element}\r\n             */\r\n            addNodeProperty(ariaProperty.trim(), function (context) {\r\n                return new ARIA.Element(context);\r\n            });\r\n\r\n        }\r\n\r\n        if (roleIsString) {\r\n\r\n            /**\r\n             * The property that handles the role attribute on the element. The\r\n             * name of this property can be changed by adjusting\r\n             * {@link ARIA.extendDOM.role}.\r\n             *\r\n             * @name     role\r\n             * @memberof Element\r\n             * @instance\r\n             * @type     {ARIA.List}\r\n             */\r\n             addNodeProperty(roleProperty.trim(), roleGetter, roleGetter, {\r\n\r\n                 set: function (value) {\r\n                     getRoleInstance(this).set(value);\r\n                 }\r\n\r\n             });\r\n\r\n        }\r\n\r\n    }\r\n\r\n}(window.ARIA));\r\n"],"file":"aria.extendNode.min.js"}