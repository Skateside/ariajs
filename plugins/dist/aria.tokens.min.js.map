{"version":3,"sources":["aria.tokens.js"],"names":["ARIA","slice","arrayLike","offset","Array","prototype","call","objectAssign","Object","assign","source","arguments","forEach","object","keys","key","isNotANumber","Number","isNaN","globalVariable","BOOLEAN_TOKENS","VERSION","WARNING_INVALID_TOKEN","enableWarnings","tokens","create","aria-autocomplete","aria-current","aria-dropeffect","aria-haspopup","aria-invalid","aria-live","aria-orientation","undefined","aria-relevant","aria-sort","role","supplant","string","info","replace","whole","index","arg","warn","message","console","apply","concat","makeFactory","attribute","Constructor","element","Property","addMethods","init","this","isArray","hasAttribute","set","getAttribute","isValidToken","token","isValid","length","indexOf","value","interpretted","interpret","setAttribute","removeAttribute","List","list","$super","that","values","reduce","unique","push","join","min","max","State","Tristate","UndefinedState","createFactories","window"],"mappings":"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","sourcesContent":["/**\r\n * @file    Adds a white-list of tokens for attributes and validation for the\r\n *          values being set.\r\n * @author  James \"Skateside\" Long\r\n * @license MIT\r\n */\r\n(function (ARIA) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * A simple wrapper for Array#slice.\r\n     *\r\n     * @private\r\n     * @param   {Array|Object} arrayLike\r\n     *          Array or array-like structure to slice.\r\n     * @param   {Number} [offset]\r\n     *          Optional offset for the slice.\r\n     * @return  {Array}\r\n     *          Sliced array.\r\n     */\r\n    var slice = function (arrayLike, offset) {\r\n        return Array.prototype.slice.call(arrayLike, offset);\r\n    };\r\n\r\n    /**\r\n     * A simple fall-back for Object.assign.\r\n     *\r\n     * @private\r\n     * @param   {Object} source\r\n     *          Source object to modify.\r\n     * @param   {Object} [...objects]\r\n     *          Additional objects to extend the first.\r\n     * @return  {Object}\r\n     *          Extended object.\r\n     */\r\n    var objectAssign = Object.assign || function (source) {\r\n\r\n        slice(arguments, 1).forEach(function (object) {\r\n\r\n            if (object) {\r\n\r\n                Object.keys(object).forEach(function (key) {\r\n                    source[key] = object[key];\r\n                });\r\n\r\n            }\r\n\r\n        });\r\n\r\n        return source;\r\n\r\n    };\r\n\r\n    /**\r\n     * A basic fallback for the isNaN function.\r\n     *\r\n     * @private\r\n     * @function\r\n     * @param    {?} value\r\n     *           Value to test.\r\n     * @return   {Boolean}\r\n     *           true if the value is NaN, false otherwise.\r\n     */\r\n    var isNotANumber = Number.isNaN || globalVariable.isNaN;\r\n\r\n    var BOOLEAN_TOKENS = [\r\n        \"true\",\r\n        \"false\"\r\n    ];\r\n\r\n    if (ARIA && ARIA.VERSION) {\r\n\r\n        /**\r\n         * A warning message for invalid tokens.\r\n         * @type {String}\r\n         */\r\n        ARIA.WARNING_INVALID_TOKEN = (\r\n            \"'{0}' is not a valid token for the '{1}' attribute\"\r\n        );\r\n\r\n        /**\r\n         * A flag to enable warnings.\r\n         * @type {Boolean}\r\n         */\r\n        ARIA.enableWarnings = true;\r\n\r\n        /**\r\n         * Collection of all valid tokens for any given attribute. The attribute\r\n         * key should be the normalised value - see {@link ARIA.normalise}.\r\n         * @type {Object}\r\n         */\r\n        ARIA.tokens = objectAssign(Object.create(null), {\r\n            \"aria-autocomplete\": [\r\n                \"none\",\r\n                \"inline\",\r\n                \"list\",\r\n                \"both\"\r\n            ],\r\n            \"aria-current\": [\r\n                \"false\",\r\n                \"true\",\r\n                \"page\",\r\n                \"step\",\r\n                \"location\",\r\n                \"date\",\r\n                \"time\"\r\n            ],\r\n            \"aria-dropeffect\": [\r\n                \"none\",\r\n                \"copy\",\r\n                \"execute\",\r\n                \"link\",\r\n                \"move\",\r\n                \"popup\"\r\n            ],\r\n            \"aria-haspopup\": [\r\n                \"false\",\r\n                \"true\",\r\n                \"menu\",\r\n                \"listbox\",\r\n                \"tree\",\r\n                \"grid\",\r\n                \"dialog\"\r\n            ],\r\n            \"aria-invalid\": [\r\n                \"false\",\r\n                \"true\",\r\n                \"grammar\",\r\n                \"spelling\"\r\n            ],\r\n            \"aria-live\": [\r\n                \"off\",\r\n                \"assertive\",\r\n                \"polite\"\r\n            ],\r\n            \"aria-orientation\": [\r\n                undefined,\r\n                \"undefined\",\r\n                \"horizontal\",\r\n                \"vertical\"\r\n            ],\r\n            \"aria-relevant\": [\r\n                \"additions\",\r\n                \"all\",\r\n                \"removals\",\r\n                \"text\"\r\n            ],\r\n            \"aria-sort\": [\r\n                \"none\",\r\n                \"ascending\",\r\n                \"descending\",\r\n                \"other\"\r\n            ],\r\n            // \"Authors MUST NOT use abstract roles in content.\"\r\n            // https://www.w3.org/TR/wai-aria-1.1/#abstract_roles\r\n            \"role\": [\r\n                \"alert\",\r\n                \"alertdialog\",\r\n                \"application\",\r\n                \"article\",\r\n                \"banner\",\r\n                \"button\",\r\n                \"cell\",\r\n                \"checkbox\",\r\n                \"columnheader\",\r\n                \"complementary\",\r\n                \"combobox\",\r\n                // \"command\", // (abstract)\r\n                // \"composite\", // (abstract)\r\n                \"contentinfo\",\r\n                \"definition\",\r\n                \"dialog\",\r\n                \"directory\",\r\n                \"document\",\r\n                \"feed\",\r\n                \"figure\",\r\n                \"form\",\r\n                \"grid\",\r\n                \"gridcell\",\r\n                \"group\",\r\n                \"heading\",\r\n                \"img\",\r\n                // \"input\", // (abstract)\r\n                // \"landmark\", // (abstract)\r\n                \"link\",\r\n                \"list\",\r\n                \"listbox\",\r\n                \"listitem\",\r\n                \"log\",\r\n                \"main\",\r\n                \"marquee\",\r\n                \"math\",\r\n                \"menu\",\r\n                \"menubar\",\r\n                \"menuitem\",\r\n                \"menuitemcheckbox\",\r\n                \"menuitemradio\",\r\n                \"navigation\",\r\n                \"none\",\r\n                \"note\",\r\n                \"option\",\r\n                \"presentation\",\r\n                \"progressbar\",\r\n                \"radio\",\r\n                \"radiogroup\",\r\n                // \"range\", // (abstract)\r\n                \"region\",\r\n                // \"roletype\", // (abstract)\r\n                \"row\",\r\n                \"rowgroup\",\r\n                \"rowheader\",\r\n                \"scrollbar\",\r\n                \"search\",\r\n                \"searchbox\",\r\n                // \"section\", // (abstract)\r\n                // \"sectionhead\", // (abstract)\r\n                // \"select\", // (abstract)\r\n                \"separator\",\r\n                \"slider\",\r\n                \"spinbutton\",\r\n                \"status\",\r\n                // \"structure\", // (abstract)\r\n                \"switch\",\r\n                \"tab\",\r\n                \"table\",\r\n                \"tablist\",\r\n                \"tabpanel\",\r\n                \"term\",\r\n                \"textbox\",\r\n                \"timer\",\r\n                \"toolbar\",\r\n                \"tooltip\",\r\n                \"tree\",\r\n                \"treegrid\",\r\n                \"treeitem\"\r\n                // \"widget\", // (abstract)\r\n                // \"window\", // (abstract)\r\n            ]\r\n        });\r\n\r\n        /**\r\n         * Replaces the placeholders in the string parameter with information\r\n         * from the info parameter. Placeholders are wrapped in brackets\r\n         * e.g. \"{0}\".\r\n         *\r\n         * @param  {String} string\r\n         *         String containing placeholders.\r\n         * @param  {Array|Object} info\r\n         *         Info to fill the string placeholders.\r\n         * @return {String}\r\n         *         Populated string.\r\n         */\r\n        ARIA.supplant = function (string, info) {\r\n\r\n            return string.replace(/\\{(\\d+)\\}/g, function (whole, index) {\r\n\r\n                var arg = info[index];\r\n\r\n                return (\r\n                    (typeof arg === \"string\" || typeof arg === \"number\")\r\n                    ? arg\r\n                    : whole\r\n                );\r\n\r\n            });\r\n\r\n        };\r\n\r\n        /**\r\n         * Sends a warning.\r\n         *\r\n         * @param {String} message\r\n         *        Message (and placeholders).\r\n         * @param {Number|String} ...arguments\r\n         *        Information to populate the message.\r\n         */\r\n        ARIA.warn = function (message) {\r\n\r\n            if (ARIA.enableWarnings) {\r\n\r\n                console.warn(\r\n                    \"aria.js: \" +\r\n                    ARIA.supplant.apply(\r\n                        undefined,\r\n                        [message].concat([slice(arguments, 1)])\r\n                    )\r\n                );\r\n\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Creates a factory that creates an aria property.\r\n         *\r\n         * @param  {String} attribute\r\n         *         Normalised name of the attribute whose factory is created.\r\n         * @param  {Function} Constructor\r\n         *         Constructor for {@link ARIA.Property} (or sub-class) that\r\n         *         will create the property.\r\n         * @return {Function}\r\n         *         A factory function that takes the element and returns the\r\n         *         instance.\r\n         */\r\n        ARIA.makeFactory = function (attribute, Constructor) {\r\n\r\n            return function (element) {\r\n\r\n                var tokens = ARIA.tokens[attribute];\r\n\r\n                if (!tokens) {\r\n\r\n                    tokens = [];\r\n                    ARIA.tokens[attribute] = tokens;\r\n\r\n                }\r\n\r\n                return new Constructor(element, attribute, tokens);\r\n\r\n            };\r\n\r\n        };\r\n\r\n        ARIA.Property.addMethods(/** @lends ARIA.Property.prototype */{\r\n\r\n            /**\r\n             * @constructs ARIA.Property\r\n             * @param      {Element} element\r\n             *             Element whose attribute should be handled.\r\n             * @param      {String} attribute\r\n             *             Name of the attribute to handle.\r\n             * @param      {Array.<String>} [tokens]\r\n             *             Optional white-list of valid tokens for this\r\n             *             property.\r\n             */\r\n            init: function (element, attribute, tokens) {\r\n\r\n                /**\r\n                 * Element whose attribute is being handled.\r\n                 * @type {Element}\r\n                 */\r\n                this.element = element;\r\n\r\n                /**\r\n                 * Attribute being handled.\r\n                 * @type {String}\r\n                 */\r\n                this.attribute = attribute;\r\n\r\n                /**\r\n                 * White-list of valid tokens. This is a reference to a property\r\n                 * of {@link ARIA.tokens} so updating that property will update\r\n                 * all these instances.\r\n                 * @type {Array.<String>}\r\n                 */\r\n                this.tokens = (\r\n                    (tokens && Array.isArray(tokens))\r\n                    ? tokens\r\n                    : []\r\n                );\r\n\r\n                // Things like ARIA.List work with interpretted values rather\r\n                // than just the attribute value. If the attribute already\r\n                // exists, pass the value to the set method to allow for that.\r\n                // As a bonus, this can filter out invalid attribute values.\r\n                if (ARIA.hasAttribute(element, attribute)) {\r\n                    this.set(ARIA.getAttribute(element, attribute));\r\n                }\r\n\r\n            },\r\n\r\n            /**\r\n             * Checks to see if the given token is valid for this current\r\n             * property. This function checks against\r\n             * {@link ARIA.Property#tokens}. If the token is not valid, a\r\n             * warning it sent. See {@link ARIA.warn}.\r\n             *\r\n             * @param  {String} token\r\n             *         Token to check.\r\n             * @return {Boolean}\r\n             *         true if the token is valid, false otherwise.\r\n             */\r\n            isValidToken: function (token) {\r\n\r\n                var tokens = this.tokens;\r\n                var isValid = (\r\n                    !tokens\r\n                    || !tokens.length\r\n                    || tokens.indexOf(token) > -1\r\n                );\r\n\r\n                if (!isValid) {\r\n\r\n                    ARIA.warn(\r\n                        ARIA.WARNING_INVALID_TOKEN,\r\n                        token,\r\n                        this.attribute\r\n                    );\r\n\r\n                }\r\n\r\n                return isValid;\r\n\r\n            },\r\n\r\n            /**\r\n             * Sets {@link ARIA.Property#attribute} to the given value, once\r\n             * interpretted (see {@link ARIA.Property#interpret}) and validated\r\n             * (see {@link ARIA.Property#isValidToken}). If the value is\r\n             * interpretted as an empty string, the attribute is removed.\r\n             *\r\n             * @param {?} value\r\n             *        Value to set.\r\n             */\r\n            set: function (value) {\r\n\r\n                var element = this.element;\r\n                var attribute = this.attribute;\r\n                var interpretted = this.interpret(value);\r\n\r\n                if (interpretted !== \"\" && this.isValidToken(interpretted)) {\r\n                    ARIA.setAttribute(element, attribute, interpretted);\r\n                } else if (interpretted === \"\") {\r\n                    ARIA.removeAttribute(element, attribute);\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        ARIA.List.addMethods(/** @lends ARIA.List.prototype */{\r\n\r\n            /**\r\n             * @inheritDoc\r\n             */\r\n            init: function (element, attribute, tokens) {\r\n\r\n                /**\r\n                 * The list of values.\r\n                 * @type {Array.<String>}\r\n                 */\r\n                this.list = [];\r\n\r\n                this.$super(element, attribute, tokens);\r\n\r\n            },\r\n\r\n            /**\r\n             * Sets the value of the list to be the given value. The values are\r\n             * interpretted as an array (see {@link ARIA.List#interpret} and\r\n             * validated (see {@link ARIA.List#isValidToken}); only unique\r\n             * values are added.\r\n             *\r\n             * @param {?} value\r\n             *        Value(s) to add. If the given value is a string, it is\r\n             *        assumed to be a space-separated list.\r\n             */\r\n            set: function (value) {\r\n\r\n                var that = this;\r\n                var values = that\r\n                    .interpret(value)\r\n                    .reduce(function (unique, token) {\r\n\r\n                        if (\r\n                            token\r\n                            && that.isValidToken(token)\r\n                            && unique.indexOf(token) < 0\r\n                        ) {\r\n                            unique.push(token);\r\n                        }\r\n\r\n                        return unique;\r\n\r\n                    }, []);\r\n                var element = that.element;\r\n                var attribute = that.attribute;\r\n\r\n                that.list = values;\r\n\r\n                if (values.length) {\r\n                    ARIA.setAttribute(element, attribute, values.join(\" \"));\r\n                } else {\r\n                    ARIA.removeAttribute(element, attribute);\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        ARIA.Number.addMethods(/** @lends ARIA.Number.prototype */{\r\n\r\n            /**\r\n             * @inheritDoc\r\n             */\r\n            isValidToken: function (value) {\r\n\r\n                var interpretted = this.interpret(value);\r\n                var isValid = !isNotANumber(interpretted);\r\n                var attribute = this.attribute;\r\n                var min = this.min;\r\n                var max = this.max;\r\n\r\n                if (!isValid) {\r\n                    ARIA.warn(ARIA.WARNING_INVALID_TOKEN, value, attribute);\r\n                }\r\n\r\n                return isValid;\r\n\r\n            }\r\n\r\n        });\r\n\r\n        ARIA.State.addMethods(/** @lends ARIA.State.prototype */{\r\n\r\n            /**\r\n             * Unlike the parent {@link ARIA.Property}, an instance of\r\n             * ARIA.State always has boolean tokens added.\r\n             *\r\n             * @constructs ARIA.State\r\n             * @param      {Element} element\r\n             *             Element whose attribute should be handled.\r\n             * @param      {String} attribute\r\n             *             Name of the attribute to handle.\r\n             */\r\n            init: function (element, attribute, tokens) {\r\n                this.$super(element, attribute, BOOLEAN_TOKENS.concat(tokens));\r\n            },\r\n\r\n            /**\r\n             * @inheritDoc\r\n             */\r\n            isValidToken: function (token) {\r\n                return typeof token === \"boolean\" || this.$super(token);\r\n            }\r\n\r\n        });\r\n\r\n        ARIA.Tristate.addMethods(/** @lends ARIA.Tristate.prototype */{\r\n\r\n            /**\r\n             * @inheritDoc\r\n             */\r\n            init: function (element, attribute) {\r\n                this.$super(element, attribute, [\"mixed\"]);\r\n            }\r\n\r\n        });\r\n\r\n        ARIA.UndefinedState.addMethods(/** @lends ARIA.UndefinedState.prototype */{\r\n\r\n            /**\r\n             * @inheritDoc\r\n             */\r\n            init: function (element, attribute) {\r\n                this.$super(element, attribute, [\"undefined\"]);\r\n            },\r\n\r\n            /**\r\n             * @inheritDoc\r\n             */\r\n            isValidToken: function (token) {\r\n                return token === undefined || this.$super(token);\r\n            }\r\n\r\n        });\r\n\r\n        // Re-make the factories.\r\n        ARIA.createFactories();\r\n\r\n    }\r\n\r\n}(window.ARIA));\r\n"],"file":"aria.tokens.min.js"}