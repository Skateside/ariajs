{"version":3,"names":[],"mappings":"","sources":["aria.noExtend.js"],"sourcesContent":["/*! ariajs - v0.2.0 - MIT license - https://github.com/Skateside/ariajs - 2018-11-13 */\n(function (globalVariable) {\n    \"use strict\";\n\n/**\n * A function that returns the given variable unchanged.\n *\n * @private\n * @param   {?} x\n *          Variable to return.\n * @return  {?}\n *          Unmodified original variable.\n */\nvar identity = function (x) {\n    return x;\n};\n\n/**\n * A simple wrapper for Array#slice.\n *\n * @private\n * @param   {Array|Object} arrayLike\n *          Array or array-like structure to slice.\n * @param   {Number} [offset]\n *          Optional offset for the slice.\n * @return  {Array}\n *          Sliced array.\n */\nvar slice = function (arrayLike, offset) {\n    return Array.prototype.slice.call(arrayLike, offset);\n};\n\n/**\n * A simple fall-back for Array.from.\n *\n * @private\n * @param   {Object} arrayLike\n *          Array-like structure.\n * @param   {Function} [map=identity]\n *          Optional function to convert the values.\n * @param   {?} [context]\n *          Optional context for the map function.\n * @return  {Array}\n *          Array made from the iven array-like structure.\n */\nvar arrayFrom = Array.from || function (arrayLike, map, context) {\n\n    if (map === undefined) {\n        map = identity;\n    }\n\n    return Array.prototype.map.call(arrayLike, map, context);\n\n};\n\n/**\n * A simple fall-back for Object.assign.\n *\n * @private\n * @param   {Object} source\n *          Source object to modify.\n * @param   {Object} [...objects]\n *          Additional objects to extend the first.\n * @return  {Object}\n *          Extended object.\n */\nvar objectAssign = Object.assign || function (source) {\n\n    slice(arguments, 1).forEach(function (object) {\n\n        if (object) {\n\n            Object.keys(object).forEach(function (key) {\n                source[key] = object[key];\n            });\n\n        }\n\n    });\n\n    return source;\n\n};\n\n/**\n * A function that does nothing.\n *\n * @private\n */\nvar noop = function () {\n    return;\n};\n\n/**\n * The regular expression used to test functions for whether or not they include\n * the \"$super\" magic property.\n * @private\n * @type    {RegExp}\n */\nvar fnTest = (\n    (/return/).test(noop)\n    ? (/[.'\"]\\$super\\b/)\n    : (/.*/)\n);\n\n/**\n * A basic fallback for the isNaN function.\n *\n * @private\n * @function\n * @param    {?} value\n *           Value to test.\n * @return   {Boolean}\n *           true if the value is NaN, false otherwise.\n */\nvar isNotANumber = Number.isNaN || globalVariable.isNaN;\n\n/**\n * A reference (and possible fallback) for requestAnimationFrame.\n *\n * @private\n * @function\n * @param    {Function} callback\n *           Function to execute when the animation frame ticks over.\n */\nvar requestAnimationFrame = (\n    globalVariable.requestAnimationFrame\n    || globalVariable.webkitRequestAnimationFrame\n    || globalVariable.mozRequestAnimationFrame\n    || function (callback) {\n        globalVariable.setTimeout(callback, 1000 / 60);\n    }\n);\n\n/**\n * @namespace\n */\nvar ARIA = {\n\n    /**\n     * Collection of all valid tokens for any given attribute. The attribute\n     * key should be the normalised value - see {@link ARIA.normalise}.\n     * @type {[type]}\n     */\n    tokens: objectAssign(Object.create(null), {\n        \"aria-autocomplete\": [\n            \"none\",\n            \"inline\",\n            \"list\",\n            \"both\"\n        ],\n        \"aria-current\": [\n            \"false\",\n            \"true\",\n            \"page\",\n            \"step\",\n            \"location\",\n            \"date\",\n            \"time\"\n        ],\n        \"aria-dropeffect\": [\n            \"none\",\n            \"copy\",\n            \"execute\",\n            \"link\",\n            \"move\",\n            \"popup\"\n        ],\n        \"aria-haspopup\": [\n            \"false\",\n            \"true\",\n            \"menu\",\n            \"listbox\",\n            \"tree\",\n            \"grid\",\n            \"dialog\"\n        ],\n        \"aria-invalid\": [\n            \"false\",\n            \"true\",\n            \"grammar\",\n            \"spelling\"\n        ],\n        \"aria-live\": [\n            \"off\",\n            \"assertive\",\n            \"polite\"\n        ],\n        \"aria-orientation\": [\n            undefined,\n            \"undefined\",\n            \"horizontal\",\n            \"vertical\"\n        ],\n        \"aria-relevant\": [\n            \"additions\",\n            \"all\",\n            \"removals\",\n            \"text\"\n        ],\n        \"aria-sort\": [\n            \"none\",\n            \"ascending\",\n            \"descending\",\n            \"other\"\n        ],\n        // \"Authors MUST NOT use abstract roles in content.\"\n        // https://www.w3.org/TR/wai-aria-1.1/#abstract_roles\n        \"role\": [\n            \"alert\",\n            \"alertdialog\",\n            \"application\",\n            \"article\",\n            \"banner\",\n            \"button\",\n            \"cell\",\n            \"checkbox\",\n            \"columnheader\",\n            \"complementary\",\n            \"combobox\",\n            // \"command\", // (abstract)\n            // \"composite\", // (abstract)\n            \"contentinfo\",\n            \"definition\",\n            \"dialog\",\n            \"directory\",\n            \"document\",\n            \"feed\",\n            \"figure\",\n            \"form\",\n            \"grid\",\n            \"gridcell\",\n            \"group\",\n            \"heading\",\n            \"img\",\n            // \"input\", // (abstract)\n            // \"landmark\", // (abstract)\n            \"link\",\n            \"list\",\n            \"listbox\",\n            \"listitem\",\n            \"log\",\n            \"main\",\n            \"marquee\",\n            \"math\",\n            \"menu\",\n            \"menubar\",\n            \"menuitem\",\n            \"menuitemcheckbox\",\n            \"menuitemradio\",\n            \"navigation\",\n            \"none\",\n            \"note\",\n            \"option\",\n            \"presentation\",\n            \"progressbar\",\n            \"radio\",\n            \"radiogroup\",\n            // \"range\", // (abstract)\n            \"region\",\n            // \"roletype\", // (abstract)\n            \"row\",\n            \"rowgroup\",\n            \"rowheader\",\n            \"scrollbar\",\n            \"search\",\n            \"searchbox\",\n            // \"section\", // (abstract)\n            // \"sectionhead\", // (abstract)\n            // \"select\", // (abstract)\n            \"separator\",\n            \"slider\",\n            \"spinbutton\",\n            \"status\",\n            // \"structure\", // (abstract)\n            \"switch\",\n            \"tab\",\n            \"table\",\n            \"tablist\",\n            \"tabpanel\",\n            \"term\",\n            \"textbox\",\n            \"timer\",\n            \"toolbar\",\n            \"tooltip\",\n            \"tree\",\n            \"treegrid\",\n            \"treeitem\"\n            // \"widget\", // (abstract)\n            // \"window\", // (abstract)\n        ]\n    })\n\n};\n\n/**\n * The version of the library.\n *\n * @memberof ARIA\n * @type {String}\n * @constant\n * @name VERSION\n */\nObject.defineProperty(ARIA, \"VERSION\", {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: \"0.2.0\"\n});\n\nvar previousAria = globalVariable.ARIA;\nglobalVariable.ARIA = ARIA;\n\n/**\n * Returns the previous value of the global ARIA variable.\n *\n * @return {?}\n *         Previous ARIA value.\n */\nARIA.getPrevious = function () {\n    return previousAria;\n};\n\n/**\n * Removes the value of {@link ARIA} from the global variable and sets it back\n * to the previous value. This version of {@link ARIA} is returned.\n *\n * @return {Object}\n *         Current version of {@link ARIA}.\n */\nARIA.restorePrevious = function () {\n\n    globalVariable.ARIA = previousAria;\n\n    return ARIA;\n\n};\n\n/**\n * Name of the property for the {@link ARIA.Element} instance on DOM nodes.\n * @type {String}\n */\nARIA.extendDOM = {\n\n    aria: \"aria\",\n\n    role: \"role\"\n\n};\n\n/**\n * Map of all mis-spellings and aliases. The attribute key should be the\n * normalised value - see {@link ARIA.normalise}.\n * @type {Object}\n */\nARIA.translate = objectAssign(Object.create(null), {\n    \"aria-role\": \"role\",\n    \"aria-tabindex\": \"tabindex\"\n});\n\n/**\n * Normalises an attribute name so that it is in lowercase and always starts\n * with \"aria-\". This function has the alias of {@link ARIA.normalize} and\n * changing one will update the other.\n *\n * @memberof ARIA\n * @name     normalise\n * @param    {String} attribute\n *           Attribute to normalise.\n * @return   {String}\n *           Normalised attribute.\n *\n * @example\n * ARIA.normalise(\"aria-busy\"); // -> \"aria-busy\"\n * ARIA.normalise(\"busy\"); // -> \"aria-busy\"\n * ARIA.normalise(\"  busy  \"); // -> \"aria-busy\"\n * ARIA.normalise(\"BUSY\"); // -> \"aria-busy\"\n */\nvar normalise = function (attribute) {\n\n    var string = String(attribute)\n        .toLowerCase()\n        .replace(/^\\s*(?:aria\\-)?|\\s*$/g, \"\");\n    var normal = \"aria-\" + string;\n\n    return ARIA.translate[normal] || normal;\n\n};\n\nvar normaliseDescriptor = {\n\n    configurable: false,\n    enumerable: true,\n\n    get: function () {\n        return normalise;\n    },\n\n    set: function (normaliser) {\n        normalise = normaliser;\n    }\n\n};\n\nObject.defineProperties(ARIA, {\n\n    normalise: normaliseDescriptor,\n\n    /**\n     * An alias of {@link ARIA.normalise}.\n     *\n     * @memberof ARIA\n     * @function\n     */\n    normalize: normaliseDescriptor\n\n});\n\n/**\n * A map of all conversions for {@link ARIA.getSuffix}. As well as acting like a\n * cache for frequent conversions, this also allows plugins to use un-expected\n * attribute names since the conversion can be added here.\n * @type {Object}\n */\nARIA.suffixMap = Object.create(null);\n\n/**\n * Converts the attribute into the WAI-ARIA suffic (e.g. \"aria-label\" becomes\n * \"label\" etc.).\n *\n * @param  {String} attribute\n *         Attribute whose stemp should be returned.\n * @return {String}\n *         Stem of the attribute.\n */\nARIA.getSuffix = function (attribute) {\n\n    var mapped = ARIA.suffixMap[attribute];\n\n    if (!mapped) {\n\n        mapped = attribute.replace(/^aria\\-/, \"\");\n        ARIA.suffixMap[attribute] = mapped;\n\n    }\n\n    return mapped;\n\n};\n\n/**\n * Adds one or more methods to the class.\n *\n * @memberof Class\n * @name     addMethod\n * @static\n * @param    {Object|String} name\n *           Either the name of the method to add or an object of names to\n *           methods.\n * @param    {Function} [method]\n *           Method to add to the class.\n */\nfunction addClassMethods(name, method) {\n\n    var parent = this.parent;\n\n    if (typeof name === \"object\") {\n\n        Object.keys(name).forEach(function (key) {\n            addClassMethods.call(this, key, name[key]);\n        }, this);\n\n    } else {\n\n        this.prototype[name] = (\n            (\n                typeof method === \"function\"\n                && typeof parent[name] === \"function\"\n                && fnTest.test(method)\n            )\n            ? function () {\n\n                var hasSuper = \"$super\" in this;\n                var temp = this.$super;\n                var returnValue = null;\n\n                this.$super = parent[name];\n                returnValue = method.apply(this, arguments);\n\n                if (hasSuper) {\n                    this.$super = temp;\n                } else {\n                    delete this.$super;\n                }\n\n                return returnValue;\n\n            }\n            : method\n        );\n\n    }\n\n}\n\n/**\n * Creates a Class.\n *\n * @see    https://johnresig.com/blog/simple-javascript-inheritance/\n * @param  {Class} [Base]\n *         Optional parent class.\n * @param  {Object} proto\n *         Methods to add to the created Class' prototype.\n * @return {Class}\n *         Class created.\n */\nARIA.createClass = function (Base, proto) {\n\n    function Class() {\n        return this.init.apply(this, arguments);\n    }\n\n    if (!proto) {\n\n        proto = Base;\n        Base = Object;\n\n    }\n\n    Class.addMethod = addClassMethods;\n\n    /**\n     * Alias of {@link Class.addMethod}\n     */\n    Class.addMethods = addClassMethods;\n\n    /**\n     * Reference to the prototype of the Class' super-class.\n     * @type {Object}\n     */\n    Class.parent = Base.prototype;\n\n    Class.prototype = Object.create(Base.prototype);\n    addClassMethods.call(Class, proto);\n\n    Class.prototype.constructor = Class;\n\n    if (typeof Class.prototype.init !== \"function\") {\n        Class.prototype.init = noop;\n    }\n\n    return Class;\n\n};\n\n/**\n * A wrapper for setting an attribute on an element. This allows the method to\n * be easily replaced for virtual DOMs.\n *\n * @param {Element} element\n *        Element whose attribute should be set.\n * @param {String} name\n *        Name of the attribute to set.\n * @param {String} value\n *        Value of the attribute.\n */\nARIA.setAttribute = function (element, name, value) {\n    element.setAttribute(name, value);\n};\n\n/**\n * A wrapper for getting an attribute of an element. This allows the method to\n * be easily replaced for virtual DOMs.\n *\n * @param  {Element} element\n *         Element whose attribute should be retrieved.\n * @param  {String} name\n *         Name of the attribute to retrieve.\n * @return {String|null}\n *         The value of the attribute or null if that attribute does not exist.\n */\nARIA.getAttribute = function (element, name) {\n    return element.getAttribute(name);\n};\n\n/**\n * A wrapper for checking for an attribute on an element. This allows the method\n * to be easily replaced for virtual DOMs.\n *\n * @param  {Element} element\n *         Element whose attribute should be checked.\n * @param  {String} name\n *         Name of the attribute to check.\n * @return {Boolean}\n *         true if the element has the given attribute, false otherwise.\n */\nARIA.hasAttribute = function (element, name) {\n    return element.hasAttribute(name);\n};\n\n/**\n * A wrapper for removing an attribute from an element. This allows the method\n * to be easily replaced for virtual DOMs.\n *\n * @param {Element} element\n *        Element whose attribute should be removed.\n * @param {String} name\n *        Name of the attribute to remove.\n */\nARIA.removeAttribute = function (element, name) {\n    element.removeAttribute(name);\n};\n\n/**\n * Gets an element by the given ID. If the element cannot be found, null is\n * returned. This function is just a wrapper for document.getElementById to\n * allow the library to be easily modified in case a virtual DOM is being used.\n *\n * @param  {String} id\n *         ID of the element to find.\n * @return {Element|null}\n *         Element with the given ID or null if the element cannot be found.\n */\nARIA.getById = function (id) {\n    return document.getElementById(id);\n};\n\nvar counter = 0;\n\n/**\n * The default prefix for {@link ARIA.identify}.\n * @type {String}\n */\nARIA.defaultIdentifyPrefix = \"anonymous-element-\";\n\n/**\n * Returns the ID of the given element. If the element does not have an ID, a\n * unique one is generated. The generated ID is the given prefix and an\n * incrementing counter.\n * Pro tip: The HTML specs state that element IDs should start with a letter.\n *\n * @param  {Element} element\n *         Element whose ID should be returned.\n * @param  {String} [prefix=ARIA.defaultIdentifyPrefix]\n *         Prefix for the generated ID.\n * @return {String}\n *         The ID of the element.\n * @see    http://api.prototypejs.org/dom/Element/identify/\n */\nARIA.identify = function (element, prefix) {\n\n    var id = ARIA.getAttribute(element, \"id\");\n\n    if (prefix === undefined) {\n        prefix = ARIA.defaultIdentifyPrefix;\n    }\n\n    if (!id) {\n\n        do {\n\n            id = prefix + counter;\n            counter += 1;\n\n        } while (ARIA.getById(id));\n\n        ARIA.setAttribute(element, \"id\", id);\n\n    }\n\n    return id;\n\n};\n\n/**\n * Checks to see if the given value is a Node.\n *\n * @param  {?} value\n *         Value to test.\n * @return {Boolean}\n *         true if the given value is a Node, false otherwise.\n */\nARIA.isNode = function (value) {\n    return (value instanceof Node);\n};\n\n/**\n * A warning message for invalid tokens.\n * @type {String}\n */\nARIA.WARNING_INVALID_TOKEN = \"'{0}' is not a valid token for the '{1}' attribute\";\n\n/**\n * Replaces the placeholders in the string parameter with information from the\n * info parameter. Placeholders are wrapped in brackets e.g. \"{0}\".\n *\n * @param  {String} string\n *         String containing placeholders.\n * @param  {Array|Object} info\n *         Info to fill the string placeholders.\n * @return {String}\n *         Populated string.\n */\nARIA.supplant = function (string, info) {\n\n    return string.replace(/\\{(\\d+)\\}/g, function (whole, index) {\n\n        var arg = info[index];\n\n        return (\n            (typeof arg === \"string\" || typeof arg === \"number\")\n            ? arg\n            : whole\n        );\n\n    });\n\n};\n\n/**\n * A flag to enable warnings.\n * @type {Boolean}\n */\nARIA.enableWarnings = true;\n\n/**\n * Sends a warning.\n *\n * @param {String} message\n *        Message (and placeholders).\n * @param {Number|String} ...arguments\n *        Information to populate the message.\n */\nARIA.warn = function (message) {\n\n    if (ARIA.enableWarnings) {\n        console.warn(\"aria.js: \" + ARIA.supplant(message, slice(arguments, 1)));\n    }\n\n};\n\n/**\n * Handles basic WAI-ARIA properties.\n *\n * @class ARIA.Property\n */\nARIA.Property = ARIA.createClass(/** @lends ARIA.Property.prototype */{\n\n    /**\n     * @constructs ARIA.Property\n     * @param      {Element} element\n     *             Element whose attribute should be handled.\n     * @param      {String} attribute\n     *             Name of the attribute to handle.\n     * @param      {Array.<String>} [tokens]\n     *             Optional white-list of valid tokens for this property.\n     */\n    init: function (element, attribute, tokens) {\n\n        /**\n         * Element whose attribute is being handled.\n         * @type {Element}\n         */\n        this.element = element;\n\n        /**\n         * Attribute being handled.\n         * @type {String}\n         */\n        this.attribute = attribute;\n\n        /**\n         * White-list of valid tokens. This is a reference to a property of\n         * {@link ARIA.tokens} so updating that property will update all these\n         * instances.\n         * @type {Array.<String>}\n         */\n        this.tokens = (\n            (tokens && Array.isArray(tokens))\n            ? tokens\n            : []\n        );\n\n        // Things like ARIA.List work with interpretted values rather than just\n        // the attribute value. If the attribute already exists, pass the value\n        // to the set method to allow for that. As a bonus, this can filter out\n        // invalid attribute values.\n        if (ARIA.hasAttribute(element, attribute)) {\n            this.set(ARIA.getAttribute(element, attribute));\n        }\n\n    },\n\n    /**\n     * Interprets the given value so it can be set.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {String}\n     *         String based on the value.\n     */\n    interpret: function (value) {\n        return ARIA.Property.interpret(value);\n    },\n\n    /**\n     * Checks to see if the given token is valid for this current property. This\n     * function checks against {@link ARIA.Property#tokens}. If the token is not\n     * valid, a warning it sent. See {@link ARIA.warn}.\n     *\n     * @param  {String} token\n     *         Token to check.\n     * @return {Boolean}\n     *         true if the token is valid, false otherwise.\n     */\n    isValidToken: function (token) {\n\n        var isValid = (!this.tokens.length || this.tokens.indexOf(token) > -1);\n\n        if (!isValid) {\n            ARIA.warn(ARIA.WARNING_INVALID_TOKEN, token, this.attribute);\n        }\n\n        return isValid;\n\n    },\n\n    /**\n     * Gets the value of {@link ARIA.Property#attribute} and interprets it\n     * (see {@link ARIA.Property#interpret}). If {@link ARIA.Property#element}\n     * doesn't have {@link ARIA.Property#attribute} then null is returned.\n     *\n     * @return {String|null}\n     *         Interpretted value of {@link ARIA.Property#attribute} or null if\n     *         the attribute is not set.\n     */\n    get: function () {\n\n        var element = this.element;\n        var attribute = this.attribute;\n\n        return (\n            ARIA.hasAttribute(element, attribute)\n            ? this.interpret(ARIA.getAttribute(element, attribute))\n            : null\n        );\n\n    },\n\n    /**\n     * Sets {@link ARIA.Property#attribute} to the given value, once\n     * interpretted (see {@link ARIA.Property#interpret}) and validated (see\n     * {@link ARIA.Property#isValidToken}). If the value is interpretted as an\n     * empty string, the attribute is removed.\n     *\n     * @param {?} value\n     *        Value to set.\n     */\n    set: function (value) {\n\n        var element = this.element;\n        var attribute = this.attribute;\n        var interpretted = this.interpret(value);\n\n        if (interpretted !== \"\" && this.isValidToken(interpretted)) {\n            ARIA.setAttribute(element, attribute, interpretted);\n        } else if (interpretted === \"\") {\n            ARIA.removeAttribute(element, attribute);\n        }\n\n    },\n\n    /**\n     * Returns the value of {@link ARIA.Property#attribute} as a string. See\n     * {@link ARIA.Property#get}.\n     *\n     * @return {String}\n     *         Value of the attribute.\n     */\n    toString: function () {\n        return ARIA.getAttribute(this.element, this.attribute) || \"\";\n    }\n\n});\n\n/**\n * Interprets the given value so it can be set. This is used to power\n * {@link ARIA.Property#interpret} while also being exposed so other functions\n * and classes can use it.\n *\n * @param  {?} value\n *         Value to interpret.\n * @return {String}\n *         String based on the value.\n */\nARIA.Property.interpret = function (value) {\n\n    return (\n        (value === null || value === undefined)\n        ? \"\"\n        : String(value).trim()\n    );\n\n};\n\n/**\n * Handles number values.\n *\n * @class ARIA.Integer\n * @extends ARIA.Property\n */\nARIA.Number = ARIA.createClass(ARIA.Property, /** @lends ARIA.Number.prototype */{\n\n    /**\n     * Interprets the value as a number. If the value can't be converted into a\n     * number, NaN is returned.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Number}\n     *         Number value.\n     */\n    interpret: function (value) {\n        return parseFloat(this.$super(value));\n    },\n\n    /**\n     * @inheritDoc\n     */\n    isValidToken: function (value) {\n\n        var interpretted = this.interpret(value);\n        var isValid = !isNotANumber(interpretted);\n        var attribute = this.attribute;\n        var min = this.min;\n        var max = this.max;\n\n        if (!isValid) {\n            ARIA.warn(ARIA.WARNING_INVALID_TOKEN, value, attribute);\n        }\n\n        return isValid;\n\n    }\n\n});\n\n/**\n * Handles number values.\n *\n * @class ARIA.Integer\n * @extends ARIA.Number\n */\nARIA.Integer = ARIA.createClass(ARIA.Number, /** @lends ARIA.Integer.prototype */{\n\n    /**\n     * Interprets the value as an integer. If the value can't be converted into\n     * a number, NaN is returned.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Number}\n     *         Number value.\n     */\n    interpret: function (value) {\n        return Math.floor(this.$super(value));\n    }\n\n});\n\n/**\n * Handles WAI-ARIA states.\n *\n * @class ARIA.State\n * @extends ARIA.Property\n */\nARIA.State = ARIA.createClass(ARIA.Property, /** @lends ARIA.State.prototype */{\n\n    /**\n     * Unlike the parent {@link ARIA.Property}, an instance of ARIA.State cannot\n     * have tokens set.\n     *\n     * @constructs ARIA.State\n     * @param      {Element} element\n     *             Element whose attribute should be handled.\n     * @param      {String} attribute\n     *             Name of the attribute to handle.\n     */\n    init: function (element, attribute) {\n\n        this.$super(element, attribute, [\n            \"true\",\n            \"false\"\n        ]);\n\n    },\n\n    /**\n     * @inheritDoc\n     */\n    isValidToken: function (token) {\n        return typeof token === \"boolean\" || this.$super(token);\n    },\n\n    /**\n     * Coerces the given value into a boolean.\n     *\n     * @param  {?} value\n     *         Value to coerce.\n     * @return {Boolean|String}\n     *         Coerced boolean or an empty string.\n     */\n    interpret: function (value) {\n\n        var interpretted = this.$super(value);\n        var isTrue = interpretted === \"true\";\n\n        return (\n            (isTrue || interpretted === \"false\")\n            ? isTrue\n            : interpretted\n        );\n\n    }\n\n});\n\n/**\n * Handles a WAI-ARIA state that can be true or false but can also be undefined.\n *\n * @class ARIA.UndefinedState\n * @extends ARIA.State\n */\nARIA.UndefinedState = ARIA.createClass(ARIA.State, /** @lends ARIA.UndefinedState.prototype */{\n\n    /**\n     * @inheritDoc\n     */\n    init: function (element, attribute) {\n\n        this.$super(element, attribute);\n        this.tokens.push(\"undefined\");\n\n    },\n\n    /**\n     * @inheritDoc\n     */\n    isValidToken: function (token) {\n        return token === undefined || this.$super(token);\n    },\n\n    /**\n     * Interprets undefined as \"undefined.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Boolean|String}\n     *         Either the boolean value, \"undefined\" or an empty string if the\n     *         value is not understood.\n     */\n    interpret: function (value) {\n\n        return (\n            (value === undefined || value === \"undefined\")\n            ? \"undefined\"\n            : this.$super(value)\n        );\n\n    },\n\n    /**\n     * Returns a boolean or undefined.\n     *\n     * @return {Boolean|undefined}\n     *         Value of the attribute.\n     */\n    get: function () {\n\n        var value = this.$super();\n\n        if (value === \"undefined\") {\n            value = undefined;\n        }\n\n        return value;\n\n    }\n\n});\n\n/**\n * Handles WAI-ARIA tristates. That is, a state that can be either true, false\n * or \"mixed\".\n *\n * @class ARIA.Tristate\n * @extends ARIA.State\n */\nARIA.Tristate = ARIA.createClass(ARIA.State, /** @lends ARIA.Tristate.prototype */{\n\n    /**\n     * @inheritDoc\n     */\n    init: function (element, attribute) {\n\n        this.$super(element, attribute);\n        this.tokens.push(\"mixed\");\n\n    },\n\n    /**\n     * Allows the token \"mixed\".\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Boolean|String}\n     *         Either the boolean value, \"mixed\" or an empty string if the value\n     *         is not understood.\n     */\n    interpret: function (value) {\n\n        return (\n            value === \"mixed\"\n            ? value\n            : this.$super(value)\n        );\n\n    }\n\n});\n\n/**\n * Handles a WAI-ARIA attribute that should be a space-separated list.\n *\n * @class ARIA.List\n * @extends ARIA.Property\n */\nARIA.List = ARIA.createClass(ARIA.Property, /** ARIA.List.prototype */{\n\n    /**\n     * @inheritDoc\n     */\n    init: function (element, attribute, tokens) {\n\n        /**\n         * The list of values.\n         * @type {Array.<String>}\n         */\n        this.list = [];\n\n        this.$super(element, attribute, tokens);\n\n    },\n\n    /**\n     * Coerces the values into a string and splits it at the spaces.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Array.<String>}\n     *         Array of strings.\n     */\n    interpret: function (value) {\n\n        var val = (\n            Array.isArray(value)\n            ? value.join(\" \")\n            : value\n        );\n        var string = this.$super(val);\n\n        return (\n            string.length\n            ? string.split(/\\s+/)\n            : []\n        );\n\n    },\n\n    /**\n     * Sets the value of the list to be the given value. The values are\n     * interpretted as an array (see {@link ARIA.List#interpret} and validated\n     * (see {@link ARIA.List#isValidToken}); only unique values are added.\n     *\n     * @param {?} value\n     *        Value(s) to add. If the given value is a string, it is assumed to\n     *        be a space-separated list.\n     */\n    set: function (value) {\n\n        var that = this;\n        var values = that.interpret(value).reduce(function (unique, token) {\n\n            if (\n                token\n                && that.isValidToken(token)\n                && unique.indexOf(token) < 0\n            ) {\n                unique.push(token);\n            }\n\n            return unique;\n\n        }, []);\n        var element = that.element;\n        var attribute = that.attribute;\n\n        that.list = values;\n\n        if (values.length) {\n            ARIA.setAttribute(element, attribute, values.join(\" \"));\n        } else {\n            ARIA.removeAttribute(element, attribute);\n        }\n\n    },\n\n    /**\n     * Gets the value of the attribute as an array.\n     *\n     * @return {Array.<String>}\n     *         Value of the attribute as an array.\n     */\n    get: function () {\n        return this.list.concat();\n    }\n\n});\n\n/**\n * Handles WAI-ARIA attributes that reference a single ID.\n *\n * @class ARIA.Reference\n * @extends ARIA.Property\n */\nARIA.Reference = ARIA.createClass(ARIA.Property, /** @lends ARIA.Reference.prototype */{\n\n    /**\n     * Interprets the given value as a string. If the value is an element, the\n     * element's ID is returned, generating one if necessary - see\n     * {@link ARIA.identify}.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {String}\n     *         The interpretted value.\n     */\n    interpret: function (value) {\n        return ARIA.Reference.interpret(value);\n    },\n\n    /**\n     * Gets the element referenced by this attribute. If the element cannot be\n     * found or the attribute isn't set, null is returned.\n     *\n     * @return {Element|null}\n     *         Element referenced by this attribute or null if the element\n     *         cannot be found or the attribute isn't set.\n     */\n    get: function () {\n        return ARIA.getById(this.$super());\n    }\n\n});\n\n/**\n * Interprets the given value as a string. If the value is an element, the\n * element's ID is returned, generating one if necessary = see\n * {@link ARIA.identify}. This powers {@link ARIA.Reference#interpret} while\n * also allowing other functions and classes to use it.\n *\n * @param  {?} value\n *         Value to interpret.\n * @return {String}\n *         The interpretted value.\n */\nARIA.Reference.interpret = function (value) {\n\n    return (\n        ARIA.isNode(value)\n        ? ARIA.identify(value)\n        : ARIA.Property.interpret(value)\n    );\n\n};\n\n/**\n * Handles WAI-ARIA attributes that handle space-separated lists of IDs.\n * @class ARIA.ReferenceList\n * @extends ARIA.List\n */\nARIA.ReferenceList = ARIA.createClass(ARIA.List, /** @lends ARIA.ReferenceList.prototype */{\n\n    /**\n     * Interprets an element, ID or array of elements or/and IDs as an array of\n     * element IDs.\n     *\n     * @param  {Array.<Element|String>|Element|String} value\n     *         Value(s) to interpret.\n     * @return {Array.<String>}\n     *         Collection of IDs.\n     */\n    interpret: function (value) {\n\n        var interpretted = [];\n\n        if (\n            value\n            && typeof value === \"object\"\n            && typeof value.length === \"number\"\n        ) {\n            interpretted = arrayFrom(value, ARIA.Reference.interpret, this);\n        } else if (typeof value === \"string\") {\n            interpretted = this.$super(value);\n        } else {\n            interpretted = [ARIA.Reference.interpret(value)];\n        }\n\n        // Remove all falsy values such as \"\" or null.\n        return interpretted.filter(Boolean);\n\n    },\n\n    /**\n     * Gets an array of elements referenced by the attribute. If the element\n     * cannot be found, null will be in place of the element.\n     *\n     * @return {Array.<Element|null>}\n     *         Array of elements.\n     */\n    get: function () {\n        return this.$super().map(ARIA.getById);\n    }\n\n});\n\n/**\n * Handles the WAI-ARIA attributes on an element.\n *\n * @class ARIA.Element\n */\nARIA.Element = ARIA.createClass(/** @lends ARIA.ELement.prototype */{\n\n    /**\n     * @constructs ARIA.Element\n     * @param      {Element} element\n     *             Element whose WAI-ARIA attributes should be handled.\n     */\n    init: function (element) {\n\n        /**\n         * Element whose WAI-ARIA attributes should be handled.\n         * @type {Element}\n         */\n        this.element = element;\n\n        /**\n         * A flag object that keeps track of attributes being modified. Prevents\n         * infinitely loops being caused in the MutationObserver.\n         * @type {Object}\n         */\n        // this.manipulationFlags = Object.create(null);\n\n        /**\n         * Instances of {@link ARIA.Property} (or sub-classes) that are used to\n         * check get and set values.\n         * @type {Object}\n         */\n        this.instances = Object.create(null);\n\n        // this.preloadAttributes();\n        this.readAttributes();\n        this.observeAttributes();\n\n        return this.activateTraps();\n\n    },\n\n    /**\n     * Gets the instance from {@link ARIA.Element#instances} for the given\n     * attribute. If the instance does not exist but a factory exists, the\n     * instance is created and stored before being returned.\n     *\n     * @param  {String} attribute\n     *         Attribute whose instance should be found.\n     * @return {ARIA.Property}\n     *         Instance of {@link ARIA.Property} (or sub-class).\n     */\n    getInstance: function (attribute) {\n\n        var instance = this.instances[attribute];\n\n        if (!instance && ARIA.getFactory(attribute)) {\n\n            instance = ARIA.runFactory(attribute, this.element);\n            this.instances[attribute] = instance;\n\n        }\n\n        return instance;\n\n    },\n\n    /**\n     * Reads all the WAI-ARIA attributes on {@link ARIA.Element#element} and\n     * sets the {@link ARIA.Property} values.\n     */\n    readAttributes: function () {\n\n        arrayFrom(this.element.attributes, function (attribute) {\n\n            var value = attribute.value;\n            var instance = (\n                value\n                ? this.getInstance(attribute.name)\n                : undefined\n            );\n\n            if (instance) {\n                instance.set(value);\n            }\n\n        }, this);\n\n    },\n\n    /**\n     * Creates the observer {@link ARIA.Element#observer} that listens for\n     * changes to WAI-ARIA attribtues and updates the {@link ARIA.Property}\n     * values.\n     */\n    observeAttributes: function () {\n\n        var that = this;\n\n        /**\n         * The observer.\n         * @type {MutationObserver}\n         */\n        that.observer = ARIA.Element.makeObserver(\n            that.element,\n            function (data) {\n                return Boolean(ARIA.factories[data.suffix]);\n            },\n            function (data) {\n                that[data.suffix] = data.value;\n            },\n            function (data) {\n                that[data.suffix] = \"\";\n            }\n        );\n\n    },\n\n    /**\n     * Disconnects {@link ARIA.Element#observer}.\n     */\n    disconnectAttributes: function () {\n        this.observer.disconnect();\n    },\n\n    /**\n     * Activates the get, set and delete traps for the instance which enables\n     * the interface.\n     *\n     * @return {Proxy}\n     *         Proxy of the instance (if the browser supports it).\n     */\n    activateTraps: function () {\n\n        return new Proxy(this, {\n\n            get: function (target, name) {\n\n                var value = target[name];\n                var instance = target.getInstance(name);\n\n                if (instance) {\n                    value = instance.get();\n                }\n\n                return value;\n\n            },\n\n            set: function (target, name, value) {\n\n                var instance = target.getInstance(name);\n\n                if (instance) {\n                    instance.set(value);\n                } else {\n                    target[name] = value;\n                }\n\n                return true;\n\n            },\n\n            deleteProperty: function (target, name) {\n\n                var instance = target.getInstance(name);\n\n                if (instance) {\n                    instance.set(\"\");\n                } else {\n                    delete target[name];\n                }\n\n                return true;\n\n            }\n\n        });\n\n    }\n\n});\n\n/**\n * Creates an observer to listen for attribute changes.\n *\n * @param  {Element} element\n *         Element whose attribute changes should be observed.\n * @param  {Function} checker\n *         Function to execute when checking whether the attribute change should\n *         be observed. Accepts an object with \"attribute\" and \"suffix\"\n *         properties, returns a boolean.\n * @param  {Function} setter\n *         Function to execute when an attribute change has been detected.\n *         Accepts an object and \"attribute\", \"suffix\", \"value\" and \"old\"\n *         properties.\n * @param  {Function} unsetter\n *         Function to execute when an attribute has been removed. Accepts an\n *         object with \"attribute\" and \"suffix\" properties.\n * @return {MutationObserver}\n *         MutationObserver that observes the attribute changes.\n */\nARIA.Element.makeObserver = function (element, checker, setter, unsetter) {\n\n    var manipulationFlags = Object.create(null);\n    var observer = new MutationObserver(function (mutations) {\n\n        mutations.forEach(function (mutation) {\n\n            var attribute = mutation.attributeName || \"\";\n            var suffix = ARIA.getSuffix(attribute);\n            var data = {\n                attribute: attribute,\n                suffix: suffix\n            };\n\n            if (\n                mutation.type === \"attributes\"\n                && !manipulationFlags[suffix]\n                && checker(data)\n            ) {\n\n                manipulationFlags[suffix] = true;\n\n                if (ARIA.hasAttribute(element, attribute)) {\n\n                    data.value = ARIA.Property.interpret(\n                        ARIA.getAttribute(element, attribute)\n                    );\n                    data.old = ARIA.Property.interpret(mutation.oldValue);\n                    setter(data);\n\n                } else {\n                    unsetter(data);\n                }\n\n                requestAnimationFrame(function () {\n                    delete manipulationFlags[suffix];\n                });\n\n            }\n\n        });\n\n    });\n\n    observer.observe(element, {\n        attributes: true,\n        attributeOldValue: true\n    });\n\n    return observer;\n\n};\n\n// Create a fall-back for browsers that don't understand Proxy.\n// Object.defineProperty can be used for get and set, but delete will have to\n// rely on polling.\nif (!globalVariable.Proxy) {\n\n    ARIA.Element.prototype.activateTraps = function () {\n\n        var that = this;\n        var owns = Object.prototype.hasOwnProperty.bind(that);\n\n        Object.keys(ARIA.factories).forEach(function setProperty(attribute) {\n\n            var isPolling = false;\n\n            Object.defineProperty(that, attribute, {\n\n                configurable: true,\n\n                get: function () {\n                    return that.getInstance(attribute).get();\n                },\n\n                set: function (value) {\n\n                    var instance = that.getInstance(attribute);\n\n                    if (value === \"\") {\n                        isPolling = false;\n                    } else if (value !== \"\" && !isPolling) {\n\n                        requestAnimationFrame(function poll() {\n\n                            if (isPolling) {\n\n                                if (owns(attribute)) {\n\n                                    requestAnimationFrame(poll);\n                                    isPolling = true;\n\n                                } else {\n\n                                    isPolling = false;\n                                    instance.set(\"\");\n                                    setProperty(attribute);\n\n                                }\n\n                            }\n\n                        });\n                        isPolling = true;\n\n                    }\n\n                    return instance.set(value);\n\n                }\n\n            });\n\n        });\n\n    };\n\n}\n\n/**\n * Collection of factories for creating WAI-ARIA libraries. The attribute key\n * should be the attribute suffixes (e.g. \"label\" for \"aria-label\" etc.)\n * @type {Object}\n */\nARIA.factories = Object.create(null);\n\n/**\n * Gets the factory from {@link ARIA.factories} that matches either the given\n * attribute or the normalised version (see {@link ARIA.normalise}).\n *\n * @param  {String} attribute\n *         Attribute whose factory should be returned.\n * @return {Function}\n *         Factory for creating the attribute.\n */\nARIA.getFactory = function (attribute) {\n\n    return (\n        ARIA.factories[attribute]\n        || ARIA.factories[ARIA.getSuffix(ARIA.normalise(attribute))]\n    );\n\n};\n\n/**\n * Executes the factory for the given attribute, passing in given parameters.\n * See {@link ARIA.getFactory}.\n *\n * @param  {String} attribute\n *         Attribute whose factory should be executed.\n * @param  {Element} element\n *         Element that should be passed to the factory.\n * @return {ARIA.Property}\n *         Instance of {@link ARIA.Property} (or sub-class) created by the\n *         factory.\n * @throws {ReferenceError}\n *         There must be a factory for the given attribute.\n */\nARIA.runFactory = function (attribute, element) {\n\n    var factory = ARIA.getFactory(attribute);\n\n    if (!factory) {\n        throw new ReferenceError(attribute + \" is not a recognised factory\");\n    }\n\n    return factory(element);\n\n};\n\n/**\n * Creates a factory that creates an aria property.\n *\n * @param  {String} attribute\n *         Normalised name of the attribute whose factory is created.\n * @param  {Function} Constructor\n *         Constructor for {@link ARIA.Property} (or sub-class) that will create\n *         the property.\n * @param  {Function} [modify]\n *         Optional function for modifying the {@link ARIA.Property} instance\n *         before it's returned.\n * @return {Function}\n *         A factory function that takes the element and returns the instance.\n */\nARIA.makeFactory = function (attribute, Constructor/*, modify*/) {\n\n    return function (element) {\n\n        var instance;\n        var tokens = ARIA.tokens[attribute];\n\n        if (!tokens) {\n\n            tokens = [];\n            ARIA.tokens[attribute] = tokens;\n\n        }\n\n        instance = new Constructor(element, attribute, tokens);\n\n        // if (typeof modify === \"function\") {\n        //     modify(instance);\n        // }\n\n        return instance;\n\n    };\n\n};\n\nvar factoryEntries = [\n    [ARIA.Property, [\n        \"autocomplete\",\n        \"current\",\n        \"haspopup\",\n        \"invalid\",\n        \"keyshortcuts\",\n        \"label\",\n        \"live\",\n        \"orientation\",\n        \"placeholder\",\n        \"roledescription\",\n        \"sort\",\n        \"valuetext\"\n    ]],\n    [ARIA.Reference, [\n        \"activedescendant\",\n        \"details\",\n        \"errormessage\"\n    ]],\n    [ARIA.ReferenceList, [\n        \"controls\",\n        \"describedby\",\n        \"flowto\",\n        \"labelledby\",\n        \"owns\"\n    ]],\n    [ARIA.State, [\n        \"atomic\",\n        \"busy\",\n        \"disabled\",\n        \"modal\",\n        \"multiline\",\n        \"multiselectable\",\n        \"readonly\",\n        \"required\"\n    ]],\n    [ARIA.Tristate, [\n        \"checked\",\n        \"pressed\"\n    ]],\n    [ARIA.UndefinedState, [\n        \"expanded\",\n        \"grabbed\",\n        \"hidden\",\n        \"selected\"\n    ]],\n    [ARIA.Integer, [\n        \"colcount\",\n        \"colindex\",\n        \"colspan\",\n        \"level\",\n        \"posinset\",\n        \"rowcount\",\n        \"rowindex\",\n        \"rowspan\",\n        \"setsize\"\n    ]],\n    [ARIA.Number, [\n        \"valuemax\",\n        \"valuemin\",\n        \"valuenow\"\n    ]],\n    [ARIA.List, [\n        \"dropeffect\",\n        \"relevant\",\n        \"role\"\n    ]]\n];\n\nfactoryEntries.forEach(function (entry) {\n\n    entry[1].forEach(function (attribute) {\n\n        ARIA.factories[attribute] = ARIA.makeFactory(\n            ARIA.normalise(attribute),\n            entry[0]\n        );\n\n    });\n\n});\n\n/**\n * Creates an alias of WAI-ARIA attributes.\n *\n * @param  {String} source\n *         Source attribute for the alias.\n * @param  {Array.<String>|String} aliases\n *         Either a single alias or an array of aliases.\n * @throws {ReferenceError}\n *         The source attribute must have a related factory.\n */\nARIA.addAlias = function (source, aliases) {\n\n    var normalSource = ARIA.normalise(source).slice(5);\n\n    if (!Array.isArray(aliases)) {\n        aliases = [aliases];\n    }\n\n    if (!ARIA.getFactory(normalSource)) {\n\n        throw new ReferenceError(\n            \"ARIA.factories.\"\n            + normalSource\n            + \" does not exist\"\n        );\n\n    }\n\n    aliases.forEach(function (alias) {\n\n        var normalAlias = ARIA.normalise(alias).slice(5);\n\n        ARIA.translate[normalAlias] = normalSource;\n        ARIA.factories[normalAlias] = ARIA.factories[normalSource];\n\n    });\n\n};\n\nARIA.addAlias(\"labelledby\", \"labeledby\");\n}(window));"],"file":"aria.noExtend.js"}