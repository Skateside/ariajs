{"version":3,"sources":["aria.noExtend.js"],"names":["globalVariable","identity","x","slice","arrayLike","offset","Array","prototype","call","arrayFrom","from","map","context","undefined","objectAssign","Object","assign","source","arguments","forEach","object","keys","key","noop","fnTest","test","isNotANumber","Number","isNaN","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","setTimeout","ARIA","tokens","create","aria-autocomplete","aria-current","aria-dropeffect","aria-haspopup","aria-invalid","aria-live","aria-orientation","aria-relevant","aria-sort","role","defineProperty","configurable","enumerable","writable","value","previousAria","getPrevious","restorePrevious","extendDOM","translate","aria-role","aria-tabindex","normalise","attribute","normal","String","toLowerCase","replace","normaliseDescriptor","get","set","normaliser","addClassMethods","name","method","parent","this","returnValue","hasSuper","temp","$super","apply","defineProperties","normalize","suffixMap","getSuffix","mapped","createClass","Base","proto","Class","init","addMethod","addMethods","constructor","setAttribute","element","getAttribute","hasAttribute","removeAttribute","getById","id","document","getElementById","counter","defaultIdentifyPrefix","identify","prefix","isNode","Node","WARNING_INVALID_TOKEN","WARNING_VALUE_TOO_LOW","WARNING_VALUE_TOO_HIGH","supplant","string","info","whole","index","arg","enableWarnings","warn","message","console","Property","isArray","interpret","isValidToken","token","isValid","length","indexOf","interpretted","toString","trim","parseFloat","min","max","setMin","setMax","Integer","Math","floor","State","isTrue","UndefinedState","push","Tristate","List","list","val","join","split","that","values","reduce","unique","concat","Reference","ReferenceList","filter","Boolean","Element","instances","readAttributes","observeAttributes","activateTraps","getInstance","instance","getFactory","runFactory","attributes","observer","makeObserver","data","factories","suffix","disconnectAttributes","disconnect","Proxy","target","deleteProperty","checker","setter","unsetter","manipulationFlags","MutationObserver","mutations","mutation","attributeName","type","old","oldValue","observe","attributeOldValue","owns","hasOwnProperty","bind","setProperty","isPolling","poll","factory","ReferenceError","makeFactory","Constructor","modify","uInt16","pow","entry","addAlias","aliases","normalSource","alias","normalAlias","window"],"mappings":"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","sourcesContent":["/*! ariajs - v0.2.0 - MIT license - https://github.com/Skateside/ariajs - 2018-11-12 */\n(function (globalVariable) {\n    \"use strict\";\n\n/**\r\n * A function that returns the given variable unchanged.\r\n *\r\n * @private\r\n * @param   {?} x\r\n *          Variable to return.\r\n * @return  {?}\r\n *          Unmodified original variable.\r\n */\r\nvar identity = function (x) {\r\n    return x;\r\n};\r\n\r\n/**\r\n * A simple wrapper for Array#slice.\r\n *\r\n * @private\r\n * @param   {Array|Object} arrayLike\r\n *          Array or array-like structure to slice.\r\n * @param   {Number} [offset]\r\n *          Optional offset for the slice.\r\n * @return  {Array}\r\n *          Sliced array.\r\n */\r\nvar slice = function (arrayLike, offset) {\r\n    return Array.prototype.slice.call(arrayLike, offset);\r\n};\r\n\r\n/**\r\n * A simple fall-back for Array.from.\r\n *\r\n * @private\r\n * @param   {Object} arrayLike\r\n *          Array-like structure.\r\n * @param   {Function} [map=identity]\r\n *          Optional function to convert the values.\r\n * @param   {?} [context]\r\n *          Optional context for the map function.\r\n * @return  {Array}\r\n *          Array made from the iven array-like structure.\r\n */\r\nvar arrayFrom = Array.from || function (arrayLike, map, context) {\r\n\r\n    if (map === undefined) {\r\n        map = identity;\r\n    }\r\n\r\n    return Array.prototype.map.call(arrayLike, map, context);\r\n\r\n};\r\n\r\n/**\r\n * A simple fall-back for Object.assign.\r\n *\r\n * @private\r\n * @param   {Object} source\r\n *          Source object to modify.\r\n * @param   {Object} [...objects]\r\n *          Additional objects to extend the first.\r\n * @return  {Object}\r\n *          Extended object.\r\n */\r\nvar objectAssign = Object.assign || function (source) {\r\n\r\n    slice(arguments, 1).forEach(function (object) {\r\n\r\n        if (object) {\r\n\r\n            Object.keys(object).forEach(function (key) {\r\n                source[key] = object[key];\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return source;\r\n\r\n};\r\n\r\n/**\r\n * A function that does nothing.\r\n *\r\n * @private\r\n */\r\nvar noop = function () {\r\n    return;\r\n};\r\n\r\n/**\r\n * The regular expression used to test functions for whether or not they include\r\n * the \"$super\" magic property.\r\n * @private\r\n * @type    {RegExp}\r\n */\r\nvar fnTest = (\r\n    (/return/).test(noop)\r\n    ? (/[.'\"]\\$super\\b/)\r\n    : (/.*/)\r\n);\r\n\r\n/**\r\n * A basic fallback for the isNaN function.\r\n *\r\n * @private\r\n * @function\r\n * @param    {?} value\r\n *           Value to test.\r\n * @return   {Boolean}\r\n *           true if the value is NaN, false otherwise.\r\n */\r\nvar isNotANumber = Number.isNaN || globalVariable.isNaN;\r\n\r\n/**\r\n * A reference (and possible fallback) for requestAnimationFrame.\r\n *\r\n * @private\r\n * @function\r\n * @param    {Function} callback\r\n *           Function to execute when the animation frame ticks over.\r\n */\r\nvar requestAnimationFrame = (\r\n    globalVariable.requestAnimationFrame\r\n    || globalVariable.webkitRequestAnimationFrame\r\n    || globalVariable.mozRequestAnimationFrame\r\n    || function (callback) {\r\n        globalVariable.setTimeout(callback, 1000 / 60);\r\n    }\r\n);\r\n\r\n/**\r\n * @namespace\r\n */\r\nvar ARIA = {\r\n\r\n    /**\r\n     * Collection of all valid tokens for any given attribute. The attribute\r\n     * key should be the normalised value - see {@link ARIA.normalise}.\r\n     * @type {[type]}\r\n     */\r\n    tokens: objectAssign(Object.create(null), {\r\n        \"aria-autocomplete\": [\r\n            \"none\",\r\n            \"inline\",\r\n            \"list\",\r\n            \"both\"\r\n        ],\r\n        \"aria-current\": [\r\n            \"false\",\r\n            \"true\",\r\n            \"page\",\r\n            \"step\",\r\n            \"location\",\r\n            \"date\",\r\n            \"time\"\r\n        ],\r\n        \"aria-dropeffect\": [\r\n            \"none\",\r\n            \"copy\",\r\n            \"execute\",\r\n            \"link\",\r\n            \"move\",\r\n            \"popup\"\r\n        ],\r\n        \"aria-haspopup\": [\r\n            \"false\",\r\n            \"true\",\r\n            \"menu\",\r\n            \"listbox\",\r\n            \"tree\",\r\n            \"grid\",\r\n            \"dialog\"\r\n        ],\r\n        \"aria-invalid\": [\r\n            \"false\",\r\n            \"true\",\r\n            \"grammar\",\r\n            \"spelling\"\r\n        ],\r\n        \"aria-live\": [\r\n            \"off\",\r\n            \"assertive\",\r\n            \"polite\"\r\n        ],\r\n        \"aria-orientation\": [\r\n            undefined,\r\n            \"undefined\",\r\n            \"horizontal\",\r\n            \"vertical\"\r\n        ],\r\n        \"aria-relevant\": [\r\n            \"additions\",\r\n            \"all\",\r\n            \"removals\",\r\n            \"text\"\r\n        ],\r\n        \"aria-sort\": [\r\n            \"none\",\r\n            \"ascending\",\r\n            \"descending\",\r\n            \"other\"\r\n        ],\r\n        // \"Authors MUST NOT use abstract roles in content.\"\r\n        // https://www.w3.org/TR/wai-aria-1.1/#abstract_roles\r\n        \"role\": [\r\n            \"alert\",\r\n            \"alertdialog\",\r\n            \"application\",\r\n            \"article\",\r\n            \"banner\",\r\n            \"button\",\r\n            \"cell\",\r\n            \"checkbox\",\r\n            \"columnheader\",\r\n            \"complementary\",\r\n            \"combobox\",\r\n            // \"command\", // (abstract)\r\n            // \"composite\", // (abstract)\r\n            \"contentinfo\",\r\n            \"definition\",\r\n            \"dialog\",\r\n            \"directory\",\r\n            \"document\",\r\n            \"feed\",\r\n            \"figure\",\r\n            \"form\",\r\n            \"grid\",\r\n            \"gridcell\",\r\n            \"group\",\r\n            \"heading\",\r\n            \"img\",\r\n            // \"input\", // (abstract)\r\n            // \"landmark\", // (abstract)\r\n            \"link\",\r\n            \"list\",\r\n            \"listbox\",\r\n            \"listitem\",\r\n            \"log\",\r\n            \"main\",\r\n            \"marquee\",\r\n            \"math\",\r\n            \"menu\",\r\n            \"menubar\",\r\n            \"menuitem\",\r\n            \"menuitemcheckbox\",\r\n            \"menuitemradio\",\r\n            \"navigation\",\r\n            \"none\",\r\n            \"note\",\r\n            \"option\",\r\n            \"presentation\",\r\n            \"progressbar\",\r\n            \"radio\",\r\n            \"radiogroup\",\r\n            // \"range\", // (abstract)\r\n            \"region\",\r\n            // \"roletype\", // (abstract)\r\n            \"row\",\r\n            \"rowgroup\",\r\n            \"rowheader\",\r\n            \"scrollbar\",\r\n            \"search\",\r\n            \"searchbox\",\r\n            // \"section\", // (abstract)\r\n            // \"sectionhead\", // (abstract)\r\n            // \"select\", // (abstract)\r\n            \"separator\",\r\n            \"slider\",\r\n            \"spinbutton\",\r\n            \"status\",\r\n            // \"structure\", // (abstract)\r\n            \"switch\",\r\n            \"tab\",\r\n            \"table\",\r\n            \"tablist\",\r\n            \"tabpanel\",\r\n            \"term\",\r\n            \"textbox\",\r\n            \"timer\",\r\n            \"toolbar\",\r\n            \"tooltip\",\r\n            \"tree\",\r\n            \"treegrid\",\r\n            \"treeitem\"\r\n            // \"widget\", // (abstract)\r\n            // \"window\", // (abstract)\r\n        ]\r\n    })\r\n\r\n};\r\n\r\n/**\r\n * The version of the library.\r\n *\r\n * @memberof ARIA\r\n * @type {String}\r\n * @constant\r\n * @name VERSION\r\n */\r\nObject.defineProperty(ARIA, \"VERSION\", {\r\n    configurable: false,\r\n    enumerable: true,\r\n    writable: false,\r\n    value: \"0.2.0\"\r\n});\r\n\r\nvar previousAria = globalVariable.ARIA;\r\nglobalVariable.ARIA = ARIA;\r\n\r\n/**\r\n * Returns the previous value of the global ARIA variable.\r\n *\r\n * @return {?}\r\n *         Previous ARIA value.\r\n */\r\nARIA.getPrevious = function () {\r\n    return previousAria;\r\n};\r\n\r\n/**\r\n * Removes the value of {@link ARIA} from the global variable and sets it back\r\n * to the previous value. This version of {@link ARIA} is returned.\r\n *\r\n * @return {Object}\r\n *         Current version of {@link ARIA}.\r\n */\r\nARIA.restorePrevious = function () {\r\n\r\n    globalVariable.ARIA = previousAria;\r\n\r\n    return ARIA;\r\n\r\n};\r\n\r\n/**\r\n * Name of the property for the {@link ARIA.Element} instance on DOM nodes.\r\n * @type {String}\r\n */\r\nARIA.extendDOM = \"aria\";\r\n\r\n/**\r\n * Map of all mis-spellings and aliases. The attribute key should be the\r\n * normalised value - see {@link ARIA.normalise}.\r\n * @type {Object}\r\n */\r\nARIA.translate = objectAssign(Object.create(null), {\r\n    \"aria-role\": \"role\",\r\n    \"aria-tabindex\": \"tabindex\"\r\n});\r\n\r\n/**\r\n * Normalises an attribute name so that it is in lowercase and always starts\r\n * with \"aria-\". This function has the alias of {@link ARIA.normalize} and\r\n * changing one will update the other.\r\n *\r\n * @memberof ARIA\r\n * @name     normalise\r\n * @param    {String} attribute\r\n *           Attribute to normalise.\r\n * @return   {String}\r\n *           Normalised attribute.\r\n *\r\n * @example\r\n * ARIA.normalise(\"aria-busy\"); // -> \"aria-busy\"\r\n * ARIA.normalise(\"busy\"); // -> \"aria-busy\"\r\n * ARIA.normalise(\"  busy  \"); // -> \"aria-busy\"\r\n * ARIA.normalise(\"BUSY\"); // -> \"aria-busy\"\r\n */\r\nvar normalise = function (attribute) {\r\n\r\n    var string = String(attribute)\r\n        .toLowerCase()\r\n        .replace(/^\\s*(?:aria\\-)?|\\s*$/g, \"\");\r\n    var normal = \"aria-\" + string;\r\n\r\n    return ARIA.translate[normal] || normal;\r\n\r\n};\r\n\r\nvar normaliseDescriptor = {\r\n\r\n    configurable: false,\r\n    enumerable: true,\r\n\r\n    get: function () {\r\n        return normalise;\r\n    },\r\n\r\n    set: function (normaliser) {\r\n        normalise = normaliser;\r\n    }\r\n\r\n};\r\n\r\nObject.defineProperties(ARIA, {\r\n\r\n    normalise: normaliseDescriptor,\r\n\r\n    /**\r\n     * An alias of {@link ARIA.normalise}.\r\n     *\r\n     * @memberof ARIA\r\n     * @function\r\n     */\r\n    normalize: normaliseDescriptor\r\n\r\n});\r\n\r\n/**\r\n * A map of all conversions for {@link ARIA.getSuffix}. As well as acting like a\r\n * cache for frequent conversions, this also allows plugins to use un-expected\r\n * attribute names since the conversion can be added here.\r\n * @type {Object}\r\n */\r\nARIA.suffixMap = Object.create(null);\r\n\r\n/**\r\n * Converts the attribute into the WAI-ARIA suffic (e.g. \"aria-label\" becomes\r\n * \"label\" etc.).\r\n *\r\n * @param  {String} attribute\r\n *         Attribute whose stemp should be returned.\r\n * @return {String}\r\n *         Stem of the attribute.\r\n */\r\nARIA.getSuffix = function (attribute) {\r\n\r\n    var mapped = ARIA.suffixMap[attribute];\r\n\r\n    if (!mapped) {\r\n\r\n        mapped = attribute.replace(/^aria\\-/, \"\");\r\n        ARIA.suffixMap[attribute] = mapped;\r\n\r\n    }\r\n\r\n    return mapped;\r\n\r\n};\r\n\r\n/**\r\n * Adds one or more methods to the class.\r\n *\r\n * @memberof Class\r\n * @name     addMethod\r\n * @static\r\n * @param    {Object|String} name\r\n *           Either the name of the method to add or an object of names to\r\n *           methods.\r\n * @param    {Function} [method]\r\n *           Method to add to the class.\r\n */\r\nfunction addClassMethods(name, method) {\r\n\r\n    var parent = this.parent;\r\n\r\n    if (typeof name === \"object\") {\r\n\r\n        Object.keys(name).forEach(function (key) {\r\n            addClassMethods.call(this, key, name[key]);\r\n        }, this);\r\n\r\n    } else {\r\n\r\n        this.prototype[name] = (\r\n            (\r\n                typeof method === \"function\"\r\n                && typeof parent[name] === \"function\"\r\n                && fnTest.test(method)\r\n            )\r\n            ? function () {\r\n\r\n                var hasSuper = \"$super\" in this;\r\n                var temp = this.$super;\r\n                var returnValue = null;\r\n\r\n                this.$super = parent[name];\r\n                returnValue = method.apply(this, arguments);\r\n\r\n                if (hasSuper) {\r\n                    this.$super = temp;\r\n                } else {\r\n                    delete this.$super;\r\n                }\r\n\r\n                return returnValue;\r\n\r\n            }\r\n            : method\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Creates a Class.\r\n *\r\n * @see    https://johnresig.com/blog/simple-javascript-inheritance/\r\n * @param  {Class} [Base]\r\n *         Optional parent class.\r\n * @param  {Object} proto\r\n *         Methods to add to the created Class' prototype.\r\n * @return {Class}\r\n *         Class created.\r\n */\r\nARIA.createClass = function (Base, proto) {\r\n\r\n    function Class() {\r\n        return this.init.apply(this, arguments);\r\n    }\r\n\r\n    if (!proto) {\r\n\r\n        proto = Base;\r\n        Base = Object;\r\n\r\n    }\r\n\r\n    Class.addMethod = addClassMethods;\r\n\r\n    /**\r\n     * Alias of {@link Class.addMethod}\r\n     */\r\n    Class.addMethods = addClassMethods;\r\n\r\n    /**\r\n     * Reference to the prototype of the Class' super-class.\r\n     * @type {Object}\r\n     */\r\n    Class.parent = Base.prototype;\r\n\r\n    Class.prototype = Object.create(Base.prototype);\r\n    addClassMethods.call(Class, proto);\r\n\r\n    Class.prototype.constructor = Class;\r\n\r\n    if (typeof Class.prototype.init !== \"function\") {\r\n        Class.prototype.init = noop;\r\n    }\r\n\r\n    return Class;\r\n\r\n};\r\n\r\n/**\r\n * A wrapper for setting an attribute on an element. This allows the method to\r\n * be easily replaced for virtual DOMs.\r\n *\r\n * @param {Element} element\r\n *        Element whose attribute should be set.\r\n * @param {String} name\r\n *        Name of the attribute to set.\r\n * @param {String} value\r\n *        Value of the attribute.\r\n */\r\nARIA.setAttribute = function (element, name, value) {\r\n    element.setAttribute(name, value);\r\n};\r\n\r\n/**\r\n * A wrapper for getting an attribute of an element. This allows the method to\r\n * be easily replaced for virtual DOMs.\r\n *\r\n * @param  {Element} element\r\n *         Element whose attribute should be retrieved.\r\n * @param  {String} name\r\n *         Name of the attribute to retrieve.\r\n * @return {String|null}\r\n *         The value of the attribute or null if that attribute does not exist.\r\n */\r\nARIA.getAttribute = function (element, name) {\r\n    return element.getAttribute(name);\r\n};\r\n\r\n/**\r\n * A wrapper for checking for an attribute on an element. This allows the method\r\n * to be easily replaced for virtual DOMs.\r\n *\r\n * @param  {Element} element\r\n *         Element whose attribute should be checked.\r\n * @param  {String} name\r\n *         Name of the attribute to check.\r\n * @return {Boolean}\r\n *         true if the element has the given attribute, false otherwise.\r\n */\r\nARIA.hasAttribute = function (element, name) {\r\n    return element.hasAttribute(name);\r\n};\r\n\r\n/**\r\n * A wrapper for removing an attribute from an element. This allows the method\r\n * to be easily replaced for virtual DOMs.\r\n *\r\n * @param {Element} element\r\n *        Element whose attribute should be removed.\r\n * @param {String} name\r\n *        Name of the attribute to remove.\r\n */\r\nARIA.removeAttribute = function (element, name) {\r\n    element.removeAttribute(name);\r\n};\r\n\r\n/**\r\n * Gets an element by the given ID. If the element cannot be found, null is\r\n * returned. This function is just a wrapper for document.getElementById to\r\n * allow the library to be easily modified in case a virtual DOM is being used.\r\n *\r\n * @param  {String} id\r\n *         ID of the element to find.\r\n * @return {Element|null}\r\n *         Element with the given ID or null if the element cannot be found.\r\n */\r\nARIA.getById = function (id) {\r\n    return document.getElementById(id);\r\n};\r\n\r\nvar counter = 0;\r\n\r\n/**\r\n * The default prefix for {@link ARIA.identify}.\r\n * @type {String}\r\n */\r\nARIA.defaultIdentifyPrefix = \"anonymous-element-\";\r\n\r\n/**\r\n * Returns the ID of the given element. If the element does not have an ID, a\r\n * unique one is generated. The generated ID is the given prefix and an\r\n * incrementing counter.\r\n * Pro tip: The HTML specs state that element IDs should start with a letter.\r\n *\r\n * @param  {Element} element\r\n *         Element whose ID should be returned.\r\n * @param  {String} [prefix=ARIA.defaultIdentifyPrefix]\r\n *         Prefix for the generated ID.\r\n * @return {String}\r\n *         The ID of the element.\r\n * @see    http://api.prototypejs.org/dom/Element/identify/\r\n */\r\nARIA.identify = function (element, prefix) {\r\n\r\n    var id = ARIA.getAttribute(element, \"id\");\r\n\r\n    if (prefix === undefined) {\r\n        prefix = ARIA.defaultIdentifyPrefix;\r\n    }\r\n\r\n    if (!id) {\r\n\r\n        do {\r\n\r\n            id = prefix + counter;\r\n            counter += 1;\r\n\r\n        } while (ARIA.getById(id));\r\n\r\n        ARIA.setAttribute(element, \"id\", id);\r\n\r\n    }\r\n\r\n    return id;\r\n\r\n};\r\n\r\n/**\r\n * Checks to see if the given value is a Node.\r\n *\r\n * @param  {?} value\r\n *         Value to test.\r\n * @return {Boolean}\r\n *         true if the given value is a Node, false otherwise.\r\n */\r\nARIA.isNode = function (value) {\r\n    return (value instanceof Node);\r\n};\r\n\r\n/**\r\n * A warning message for invalid tokens.\r\n * @type {String}\r\n */\r\nARIA.WARNING_INVALID_TOKEN = \"'{0}' is not a valid token for the '{1}' attribute\";\r\n\r\n/**\r\n * A warning message for values that are too low.\r\n * @type {String}\r\n */\r\nARIA.WARNING_VALUE_TOO_LOW = \"The value for the '{1}' attribute should be at least {2}, {0} given\";\r\n\r\n/**\r\n* A warning message for values that are too high.\r\n * @type {String}\r\n */\r\nARIA.WARNING_VALUE_TOO_HIGH = \"The value for the '{1}' attribute should be at most {2}, {0} given\";\r\n\r\n/**\r\n * Replaces the placeholders in the string parameter with information from the\r\n * info parameter. Placeholders are wrapped in brackets e.g. \"{0}\".\r\n *\r\n * @param  {String} string\r\n *         String containing placeholders.\r\n * @param  {Array|Object} info\r\n *         Info to fill the string placeholders.\r\n * @return {String}\r\n *         Populated string.\r\n */\r\nARIA.supplant = function (string, info) {\r\n\r\n    return string.replace(/\\{(\\d+)\\}/g, function (whole, index) {\r\n\r\n        var arg = info[index];\r\n\r\n        return (\r\n            (typeof arg === \"string\" || typeof arg === \"number\")\r\n            ? arg\r\n            : whole\r\n        );\r\n\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * A flag to enable warnings.\r\n * @type {Boolean}\r\n */\r\nARIA.enableWarnings = true;\r\n\r\n/**\r\n * Sends a warning.\r\n *\r\n * @param {String} message\r\n *        Message (and placeholders).\r\n * @param {Number|String} ...arguments\r\n *        Information to populate the message.\r\n */\r\nARIA.warn = function (message) {\r\n\r\n    if (ARIA.enableWarnings) {\r\n        console.warn(\"aria.js: \" + ARIA.supplant(message, slice(arguments, 1)));\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Handles basic WAI-ARIA properties.\r\n *\r\n * @class ARIA.Property\r\n */\r\nARIA.Property = ARIA.createClass(/** @lends ARIA.Property.prototype */{\r\n\r\n    /**\r\n     * @constructs ARIA.Property\r\n     * @param      {Element} element\r\n     *             Element whose attribute should be handled.\r\n     * @param      {String} attribute\r\n     *             Name of the attribute to handle.\r\n     * @param      {Array.<String>} [tokens]\r\n     *             Optional white-list of valid tokens for this property.\r\n     */\r\n    init: function (element, attribute, tokens) {\r\n\r\n        /**\r\n         * Element whose attribute is being handled.\r\n         * @type {Element}\r\n         */\r\n        this.element = element;\r\n\r\n        /**\r\n         * Attribute being handled.\r\n         * @type {String}\r\n         */\r\n        this.attribute = attribute;\r\n\r\n        /**\r\n         * White-list of valid tokens. This is a reference to a property of\r\n         * {@link ARIA.tokens} so updating that property will update all these\r\n         * instances.\r\n         * @type {Array.<String>}\r\n         */\r\n        this.tokens = (\r\n            (tokens && Array.isArray(tokens))\r\n            ? tokens\r\n            : []\r\n        );\r\n\r\n        // Things like ARIA.List work with interpretted values rather than just\r\n        // the attribute value. If the attribute already exists, pass the value\r\n        // to the set method to allow for that. As a bonus, this can filter out\r\n        // invalid attribute values.\r\n        if (ARIA.hasAttribute(element, attribute)) {\r\n            this.set(ARIA.getAttribute(element, attribute));\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Interprets the given value so it can be set.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {String}\r\n     *         String based on the value.\r\n     */\r\n    interpret: function (value) {\r\n        return ARIA.Property.interpret(value);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the given token is valid for this current property. This\r\n     * function checks against {@link ARIA.Property#tokens}. If the token is not\r\n     * valid, a warning it sent. See {@link ARIA.warn}.\r\n     *\r\n     * @param  {String} token\r\n     *         Token to check.\r\n     * @return {Boolean}\r\n     *         true if the token is valid, false otherwise.\r\n     */\r\n    isValidToken: function (token) {\r\n\r\n        var isValid = (!this.tokens.length || this.tokens.indexOf(token) > -1);\r\n\r\n        if (!isValid) {\r\n            ARIA.warn(ARIA.WARNING_INVALID_TOKEN, token, this.attribute);\r\n        }\r\n\r\n        return isValid;\r\n\r\n    },\r\n\r\n    /**\r\n     * Gets the value of {@link ARIA.Property#attribute} and interprets it\r\n     * (see {@link ARIA.Property#interpret}). If {@link ARIA.Property#element}\r\n     * doesn't have {@link ARIA.Property#attribute} then null is returned.\r\n     *\r\n     * @return {String|null}\r\n     *         Interpretted value of {@link ARIA.Property#attribute} or null if\r\n     *         the attribute is not set.\r\n     */\r\n    get: function () {\r\n\r\n        var element = this.element;\r\n        var attribute = this.attribute;\r\n\r\n        return (\r\n            ARIA.hasAttribute(element, attribute)\r\n            ? this.interpret(ARIA.getAttribute(element, attribute))\r\n            : null\r\n        );\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets {@link ARIA.Property#attribute} to the given value, once\r\n     * interpretted (see {@link ARIA.Property#interpret}) and validated (see\r\n     * {@link ARIA.Property#isValidToken}). If the value is interpretted as an\r\n     * empty string, the attribute is removed.\r\n     *\r\n     * @param {?} value\r\n     *        Value to set.\r\n     */\r\n    set: function (value) {\r\n\r\n        var element = this.element;\r\n        var attribute = this.attribute;\r\n        var interpretted = this.interpret(value);\r\n\r\n        if (interpretted !== \"\" && this.isValidToken(interpretted)) {\r\n            ARIA.setAttribute(element, attribute, interpretted);\r\n        } else if (interpretted === \"\") {\r\n            ARIA.removeAttribute(element, attribute);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Returns the value of {@link ARIA.Property#attribute} as a string. See\r\n     * {@link ARIA.Property#get}.\r\n     *\r\n     * @return {String}\r\n     *         Value of the attribute.\r\n     */\r\n    toString: function () {\r\n        return ARIA.getAttribute(this.element, this.attribute) || \"\";\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Interprets the given value so it can be set. This is used to power\r\n * {@link ARIA.Property#interpret} while also being exposed so other functions\r\n * and classes can use it.\r\n *\r\n * @param  {?} value\r\n *         Value to interpret.\r\n * @return {String}\r\n *         String based on the value.\r\n */\r\nARIA.Property.interpret = function (value) {\r\n\r\n    return (\r\n        (value === null || value === undefined)\r\n        ? \"\"\r\n        : String(value).trim()\r\n    );\r\n\r\n};\r\n\r\n/**\r\n * Handles number values.\r\n *\r\n * @class ARIA.Integer\r\n * @extends ARIA.Property\r\n */\r\nARIA.Number = ARIA.createClass(ARIA.Property, /** @lends ARIA.Number.prototype */{\r\n\r\n    /**\r\n     * Interprets the value as a number. If the value can't be converted into a\r\n     * number, NaN is returned.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Number}\r\n     *         Number value.\r\n     */\r\n    interpret: function (value) {\r\n        return parseFloat(this.$super(value));\r\n    },\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    isValidToken: function (value) {\r\n\r\n        var interpretted = this.interpret(value);\r\n        var isValid = !isNotANumber(interpretted);\r\n        var attribute = this.attribute;\r\n        var min = this.min;\r\n        var max = this.max;\r\n\r\n        if (!isValid) {\r\n            ARIA.warn(ARIA.WARNING_INVALID_TOKEN, value, attribute);\r\n        } else if (!isNotANumber(min) && interpretted < min) {\r\n\r\n            ARIA.warn(ARIA.WARNING_VALUE_TOO_LOW, value, attribute, min);\r\n            isValid = false;\r\n\r\n        } else if (!isNotANumber(max) && interpretted > max) {\r\n\r\n            ARIA.warn(ARIA.WARNING_VALUE_TOO_HIGH, value, attribute, max);\r\n            isValid = false;\r\n\r\n        }\r\n\r\n        return isValid;\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the minimum value that is considered valid.\r\n     *\r\n     * @param {Number|String} min\r\n     *        Minimum value.\r\n     */\r\n    setMin: function (min) {\r\n\r\n        /**\r\n         * The minimum value that is considered valid.\r\n         * @type {Number}\r\n         */\r\n        this.min = this.interpret(min);\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the maximum value that is considered valid.\r\n     *\r\n     * @param {Number|String} max\r\n     *        Maximum value.\r\n     */\r\n    setMax: function (max) {\r\n\r\n        /**\r\n         * The maximum value that is considered valid.\r\n         * @type {Number}\r\n         */\r\n        this.max = this.interpret(max);\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles number values.\r\n *\r\n * @class ARIA.Integer\r\n * @extends ARIA.Number\r\n */\r\nARIA.Integer = ARIA.createClass(ARIA.Number, /** @lends ARIA.Integer.prototype */{\r\n\r\n    /**\r\n     * Interprets the value as an integer. If the value can't be converted into\r\n     * a number, NaN is returned.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Number}\r\n     *         Number value.\r\n     */\r\n    interpret: function (value) {\r\n        return Math.floor(this.$super(value));\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles WAI-ARIA states.\r\n *\r\n * @class ARIA.State\r\n * @extends ARIA.Property\r\n */\r\nARIA.State = ARIA.createClass(ARIA.Property, /** @lends ARIA.State.prototype */{\r\n\r\n    /**\r\n     * Unlike the parent {@link ARIA.Property}, an instance of ARIA.State cannot\r\n     * have tokens set.\r\n     *\r\n     * @constructs ARIA.State\r\n     * @param      {Element} element\r\n     *             Element whose attribute should be handled.\r\n     * @param      {String} attribute\r\n     *             Name of the attribute to handle.\r\n     */\r\n    init: function (element, attribute) {\r\n\r\n        this.$super(element, attribute, [\r\n            \"true\",\r\n            \"false\"\r\n        ]);\r\n\r\n    },\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    isValidToken: function (token) {\r\n        return typeof token === \"boolean\" || this.$super(token);\r\n    },\r\n\r\n    /**\r\n     * Coerces the given value into a boolean.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to coerce.\r\n     * @return {Boolean|String}\r\n     *         Coerced boolean or an empty string.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        var interpretted = this.$super(value);\r\n        var isTrue = interpretted === \"true\";\r\n\r\n        return (\r\n            (isTrue || interpretted === \"false\")\r\n            ? isTrue\r\n            : interpretted\r\n        );\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles a WAI-ARIA state that can be true or false but can also be undefined.\r\n *\r\n * @class ARIA.UndefinedState\r\n * @extends ARIA.State\r\n */\r\nARIA.UndefinedState = ARIA.createClass(ARIA.State, /** @lends ARIA.UndefinedState.prototype */{\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    init: function (element, attribute) {\r\n\r\n        this.$super(element, attribute);\r\n        this.tokens.push(\"undefined\");\r\n\r\n    },\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    isValidToken: function (token) {\r\n        return token === undefined || this.$super(token);\r\n    },\r\n\r\n    /**\r\n     * Interprets undefined as \"undefined.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Boolean|String}\r\n     *         Either the boolean value, \"undefined\" or an empty string if the\r\n     *         value is not understood.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        return (\r\n            (value === undefined || value === \"undefined\")\r\n            ? \"undefined\"\r\n            : this.$super(value)\r\n        );\r\n\r\n    },\r\n\r\n    /**\r\n     * Returns a boolean or undefined.\r\n     *\r\n     * @return {Boolean|undefined}\r\n     *         Value of the attribute.\r\n     */\r\n    get: function () {\r\n\r\n        var value = this.$super();\r\n\r\n        if (value === \"undefined\") {\r\n            value = undefined;\r\n        }\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles WAI-ARIA tristates. That is, a state that can be either true, false\r\n * or \"mixed\".\r\n *\r\n * @class ARIA.Tristate\r\n * @extends ARIA.State\r\n */\r\nARIA.Tristate = ARIA.createClass(ARIA.State, /** @lends ARIA.Tristate.prototype */{\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    init: function (element, attribute) {\r\n\r\n        this.$super(element, attribute);\r\n        this.tokens.push(\"mixed\");\r\n\r\n    },\r\n\r\n    /**\r\n     * Allows the token \"mixed\".\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Boolean|String}\r\n     *         Either the boolean value, \"mixed\" or an empty string if the value\r\n     *         is not understood.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        return (\r\n            value === \"mixed\"\r\n            ? value\r\n            : this.$super(value)\r\n        );\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles a WAI-ARIA attribute that should be a space-separated list.\r\n *\r\n * @class ARIA.List\r\n * @extends ARIA.Property\r\n */\r\nARIA.List = ARIA.createClass(ARIA.Property, /** ARIA.List.prototype */{\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    init: function (element, attribute, tokens) {\r\n\r\n        /**\r\n         * The list of values.\r\n         * @type {Array.<String>}\r\n         */\r\n        this.list = [];\r\n\r\n        this.$super(element, attribute, tokens);\r\n\r\n    },\r\n\r\n    /**\r\n     * Coerces the values into a string and splits it at the spaces.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Array.<String>}\r\n     *         Array of strings.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        var val = (\r\n            Array.isArray(value)\r\n            ? value.join(\" \")\r\n            : value\r\n        );\r\n        var string = this.$super(val);\r\n\r\n        return (\r\n            string.length\r\n            ? string.split(/\\s+/)\r\n            : []\r\n        );\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the value of the list to be the given value. The values are\r\n     * interpretted as an array (see {@link ARIA.List#interpret} and validated\r\n     * (see {@link ARIA.List#isValidToken}); only unique values are added.\r\n     *\r\n     * @param {?} value\r\n     *        Value(s) to add. If the given value is a string, it is assumed to\r\n     *        be a space-separated list.\r\n     */\r\n    set: function (value) {\r\n\r\n        var that = this;\r\n        var values = that.interpret(value).reduce(function (unique, token) {\r\n\r\n            if (\r\n                token\r\n                && that.isValidToken(token)\r\n                && unique.indexOf(token) < 0\r\n            ) {\r\n                unique.push(token);\r\n            }\r\n\r\n            return unique;\r\n\r\n        }, []);\r\n        var element = that.element;\r\n        var attribute = that.attribute;\r\n\r\n        that.list = values;\r\n\r\n        if (values.length) {\r\n            ARIA.setAttribute(element, attribute, values.join(\" \"));\r\n        } else {\r\n            ARIA.removeAttribute(element, attribute);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Gets the value of the attribute as an array.\r\n     *\r\n     * @return {Array.<String>}\r\n     *         Value of the attribute as an array.\r\n     */\r\n    get: function () {\r\n        return this.list.concat();\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles WAI-ARIA attributes that reference a single ID.\r\n *\r\n * @class ARIA.Reference\r\n * @extends ARIA.Property\r\n */\r\nARIA.Reference = ARIA.createClass(ARIA.Property, /** @lends ARIA.Reference.prototype */{\r\n\r\n    /**\r\n     * Interprets the given value as a string. If the value is an element, the\r\n     * element's ID is returned, generating one if necessary - see\r\n     * {@link ARIA.identify}.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {String}\r\n     *         The interpretted value.\r\n     */\r\n    interpret: function (value) {\r\n        return ARIA.Reference.interpret(value);\r\n    },\r\n\r\n    /**\r\n     * Gets the element referenced by this attribute. If the element cannot be\r\n     * found or the attribute isn't set, null is returned.\r\n     *\r\n     * @return {Element|null}\r\n     *         Element referenced by this attribute or null if the element\r\n     *         cannot be found or the attribute isn't set.\r\n     */\r\n    get: function () {\r\n        return ARIA.getById(this.$super());\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Interprets the given value as a string. If the value is an element, the\r\n * element's ID is returned, generating one if necessary = see\r\n * {@link ARIA.identify}. This powers {@link ARIA.Reference#interpret} while\r\n * also allowing other functions and classes to use it.\r\n *\r\n * @param  {?} value\r\n *         Value to interpret.\r\n * @return {String}\r\n *         The interpretted value.\r\n */\r\nARIA.Reference.interpret = function (value) {\r\n\r\n    return (\r\n        ARIA.isNode(value)\r\n        ? ARIA.identify(value)\r\n        : ARIA.Property.interpret(value)\r\n    );\r\n\r\n};\r\n\r\n/**\r\n * Handles WAI-ARIA attributes that handle space-separated lists of IDs.\r\n * @class ARIA.ReferenceList\r\n * @extends ARIA.List\r\n */\r\nARIA.ReferenceList = ARIA.createClass(ARIA.List, /** @lends ARIA.ReferenceList.prototype */{\r\n\r\n    /**\r\n     * Interprets an element, ID or array of elements or/and IDs as an array of\r\n     * element IDs.\r\n     *\r\n     * @param  {Array.<Element|String>|Element|String} value\r\n     *         Value(s) to interpret.\r\n     * @return {Array.<String>}\r\n     *         Collection of IDs.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        var interpretted = [];\r\n\r\n        if (\r\n            value\r\n            && typeof value === \"object\"\r\n            && typeof value.length === \"number\"\r\n        ) {\r\n            interpretted = arrayFrom(value, ARIA.Reference.interpret, this);\r\n        } else if (typeof value === \"string\") {\r\n            interpretted = this.$super(value);\r\n        } else {\r\n            interpretted = [ARIA.Reference.interpret(value)];\r\n        }\r\n\r\n        // Remove all falsy values such as \"\" or null.\r\n        return interpretted.filter(Boolean);\r\n\r\n    },\r\n\r\n    /**\r\n     * Gets an array of elements referenced by the attribute. If the element\r\n     * cannot be found, null will be in place of the element.\r\n     *\r\n     * @return {Array.<Element|null>}\r\n     *         Array of elements.\r\n     */\r\n    get: function () {\r\n        return this.$super().map(ARIA.getById);\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles the WAI-ARIA attributes on an element.\r\n *\r\n * @class ARIA.Element\r\n */\r\nARIA.Element = ARIA.createClass(/** @lends ARIA.ELement.prototype */{\r\n\r\n    /**\r\n     * @constructs ARIA.Element\r\n     * @param      {Element} element\r\n     *             Element whose WAI-ARIA attributes should be handled.\r\n     */\r\n    init: function (element) {\r\n\r\n        /**\r\n         * Element whose WAI-ARIA attributes should be handled.\r\n         * @type {Element}\r\n         */\r\n        this.element = element;\r\n\r\n        /**\r\n         * A flag object that keeps track of attributes being modified. Prevents\r\n         * infinitely loops being caused in the MutationObserver.\r\n         * @type {Object}\r\n         */\r\n        // this.manipulationFlags = Object.create(null);\r\n\r\n        /**\r\n         * Instances of {@link ARIA.Property} (or sub-classes) that are used to\r\n         * check get and set values.\r\n         * @type {Object}\r\n         */\r\n        this.instances = Object.create(null);\r\n\r\n        // this.preloadAttributes();\r\n        this.readAttributes();\r\n        this.observeAttributes();\r\n\r\n        return this.activateTraps();\r\n\r\n    },\r\n\r\n    /**\r\n     * Gets the instance from {@link ARIA.Element#instances} for the given\r\n     * attribute. If the instance does not exist but a factory exists, the\r\n     * instance is created and stored before being returned.\r\n     *\r\n     * @param  {String} attribute\r\n     *         Attribute whose instance should be found.\r\n     * @return {ARIA.Property}\r\n     *         Instance of {@link ARIA.Property} (or sub-class).\r\n     */\r\n    getInstance: function (attribute) {\r\n\r\n        var instance = this.instances[attribute];\r\n\r\n        if (!instance && ARIA.getFactory(attribute)) {\r\n\r\n            instance = ARIA.runFactory(attribute, this.element);\r\n            this.instances[attribute] = instance;\r\n\r\n        }\r\n\r\n        return instance;\r\n\r\n    },\r\n\r\n    /**\r\n     * Reads all the WAI-ARIA attributes on {@link ARIA.Element#element} and\r\n     * sets the {@link ARIA.Property} values.\r\n     */\r\n    readAttributes: function () {\r\n\r\n        arrayFrom(this.element.attributes, function (attribute) {\r\n\r\n            var value = attribute.value;\r\n            var instance = (\r\n                value\r\n                ? this.getInstance(attribute.name)\r\n                : undefined\r\n            );\r\n\r\n            if (instance) {\r\n                instance.set(value);\r\n            }\r\n\r\n        }, this);\r\n\r\n    },\r\n\r\n    /**\r\n     * Creates the observer {@link ARIA.Element#observer} that listens for\r\n     * changes to WAI-ARIA attribtues and updates the {@link ARIA.Property}\r\n     * values.\r\n     */\r\n    observeAttributes: function () {\r\n\r\n        var that = this;\r\n\r\n        /**\r\n         * The observer.\r\n         * @type {MutationObserver}\r\n         */\r\n        that.observer = ARIA.Element.makeObserver(\r\n            that.element,\r\n            function (data) {\r\n                return Boolean(ARIA.factories[data.suffix]);\r\n            },\r\n            function (data) {\r\n                that[data.suffix] = data.value;\r\n            },\r\n            function (data) {\r\n                that[data.suffix] = \"\";\r\n            }\r\n        );\r\n\r\n    },\r\n\r\n    /**\r\n     * Disconnects {@link ARIA.Element#observer}.\r\n     */\r\n    disconnectAttributes: function () {\r\n        this.observer.disconnect();\r\n    },\r\n\r\n    /**\r\n     * Activates the get, set and delete traps for the instance which enables\r\n     * the interface.\r\n     *\r\n     * @return {Proxy}\r\n     *         Proxy of the instance (if the browser supports it).\r\n     */\r\n    activateTraps: function () {\r\n\r\n        return new Proxy(this, {\r\n\r\n            get: function (target, name) {\r\n\r\n                var value = target[name];\r\n                var instance = target.getInstance(name);\r\n\r\n                if (instance) {\r\n                    value = instance.get();\r\n                }\r\n\r\n                return value;\r\n\r\n            },\r\n\r\n            set: function (target, name, value) {\r\n\r\n                var instance = target.getInstance(name);\r\n\r\n                if (instance) {\r\n                    instance.set(value);\r\n                } else {\r\n                    target[name] = value;\r\n                }\r\n\r\n                return value;\r\n\r\n            },\r\n\r\n            deleteProperty: function (target, name) {\r\n\r\n                var instance = target.getInstance(name);\r\n\r\n                if (instance) {\r\n                    instance.set(\"\");\r\n                } else {\r\n                    delete target[name];\r\n                }\r\n\r\n                return true;\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Creates an observer to listen for attribute changes.\r\n *\r\n * @param  {Element} element\r\n *         Element whose attribute changes should be observed.\r\n * @param  {Function} checker\r\n *         Function to execute when checking whether the attribute change should\r\n *         be observed. Accepts an object with \"attribute\" and \"suffix\"\r\n *         properties, returns a boolean.\r\n * @param  {Function} setter\r\n *         Function to execute when an attribute change has been detected.\r\n *         Accepts an object and \"attribute\", \"suffix\", \"value\" and \"old\"\r\n *         properties.\r\n * @param  {Function} unsetter\r\n *         Function to execute when an attribute has been removed. Accepts an\r\n *         object with \"attribute\" and \"suffix\" properties.\r\n * @return {MutationObserver}\r\n *         MutationObserver that observes the attribute changes.\r\n */\r\nARIA.Element.makeObserver = function (element, checker, setter, unsetter) {\r\n\r\n    var manipulationFlags = Object.create(null);\r\n    var observer = new MutationObserver(function (mutations) {\r\n\r\n        mutations.forEach(function (mutation) {\r\n\r\n            var attribute = mutation.attributeName || \"\";\r\n            var suffix = ARIA.getSuffix(attribute);\r\n            var data = {\r\n                attribute: attribute,\r\n                suffix: suffix\r\n            };\r\n\r\n            if (\r\n                mutation.type === \"attributes\"\r\n                && !manipulationFlags[suffix]\r\n                && checker(data)\r\n            ) {\r\n\r\n                manipulationFlags[suffix] = true;\r\n\r\n                if (ARIA.hasAttribute(element, attribute)) {\r\n\r\n                    data.value = ARIA.Property.interpret(\r\n                        ARIA.getAttribute(element, attribute)\r\n                    );\r\n                    data.old = ARIA.Property.interpret(mutation.oldValue);\r\n                    setter(data);\r\n\r\n                } else {\r\n                    unsetter(data);\r\n                }\r\n\r\n                requestAnimationFrame(function () {\r\n                    delete manipulationFlags[suffix];\r\n                });\r\n\r\n            }\r\n\r\n        });\r\n\r\n    });\r\n\r\n    observer.observe(element, {\r\n        attributes: true,\r\n        attributeOldValue: true\r\n    });\r\n\r\n    return observer;\r\n\r\n};\r\n\r\n// Create a fall-back for browsers that don't understand Proxy.\r\n// Object.defineProperty can be used for get and set, but delete will have to\r\n// rely on polling.\r\nif (!globalVariable.Proxy) {\r\n\r\n    ARIA.Element.prototype.activateTraps = function () {\r\n\r\n        var that = this;\r\n        var owns = Object.prototype.hasOwnProperty.bind(that);\r\n\r\n        Object.keys(ARIA.factories).forEach(function setProperty(attribute) {\r\n\r\n            var isPolling = false;\r\n\r\n            Object.defineProperty(that, attribute, {\r\n\r\n                configurable: true,\r\n\r\n                get: function () {\r\n                    return that.getInstance(attribute).get();\r\n                },\r\n\r\n                set: function (value) {\r\n\r\n                    var instance = that.getInstance(attribute);\r\n\r\n                    if (value === \"\") {\r\n                        isPolling = false;\r\n                    } else if (value !== \"\" && !isPolling) {\r\n\r\n                        requestAnimationFrame(function poll() {\r\n\r\n                            if (isPolling) {\r\n\r\n                                if (owns(attribute)) {\r\n\r\n                                    requestAnimationFrame(poll);\r\n                                    isPolling = true;\r\n\r\n                                } else {\r\n\r\n                                    isPolling = false;\r\n                                    instance.set(\"\");\r\n                                    setProperty(attribute);\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                        });\r\n                        isPolling = true;\r\n\r\n                    }\r\n\r\n                    return instance.set(value);\r\n\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n}\r\n\r\n/**\r\n * Collection of factories for creating WAI-ARIA libraries. The attribute key\r\n * should be the attribute suffixes (e.g. \"label\" for \"aria-label\" etc.)\r\n * @type {Object}\r\n */\r\nARIA.factories = Object.create(null);\r\n\r\n/**\r\n * Gets the factory from {@link ARIA.factories} that matches either the given\r\n * attribute or the normalised version (see {@link ARIA.normalise}).\r\n *\r\n * @param  {String} attribute\r\n *         Attribute whose factory should be returned.\r\n * @return {Function}\r\n *         Factory for creating the attribute.\r\n */\r\nARIA.getFactory = function (attribute) {\r\n\r\n    return (\r\n        ARIA.factories[attribute]\r\n        || ARIA.factories[ARIA.getSuffix(ARIA.normalise(attribute))]\r\n    );\r\n\r\n};\r\n\r\n/**\r\n * Executes the factory for the given attribute, passing in given parameters.\r\n * See {@link ARIA.getFactory}.\r\n *\r\n * @param  {String} attribute\r\n *         Attribute whose factory should be executed.\r\n * @param  {Element} element\r\n *         Element that should be passed to the factory.\r\n * @return {ARIA.Property}\r\n *         Instance of {@link ARIA.Property} (or sub-class) created by the\r\n *         factory.\r\n * @throws {ReferenceError}\r\n *         There must be a factory for the given attribute.\r\n */\r\nARIA.runFactory = function (attribute, element) {\r\n\r\n    var factory = ARIA.getFactory(attribute);\r\n\r\n    if (!factory) {\r\n        throw new ReferenceError(attribute + \" is not a recognised factory\");\r\n    }\r\n\r\n    return factory(element);\r\n\r\n};\r\n\r\n/**\r\n * Creates a factory that creates an aria property.\r\n *\r\n * @param  {String} attribute\r\n *         Normalised name of the attribute whose factory is created.\r\n * @param  {Function} Constructor\r\n *         Constructor for {@link ARIA.Property} (or sub-class) that will create\r\n *         the property.\r\n * @param  {Function} [modify]\r\n *         Optional function for modifying the {@link ARIA.Property} instance\r\n *         before it's returned.\r\n * @return {Function}\r\n *         A factory function that takes the element and returns the instance.\r\n */\r\nARIA.makeFactory = function (attribute, Constructor, modify) {\r\n\r\n    return function (element) {\r\n\r\n        var instance;\r\n        var tokens = ARIA.tokens[attribute];\r\n\r\n        if (!tokens) {\r\n\r\n            tokens = [];\r\n            ARIA.tokens[attribute] = tokens;\r\n\r\n        }\r\n\r\n        instance = new Constructor(element, attribute, tokens);\r\n\r\n        if (typeof modify === \"function\") {\r\n            modify(instance);\r\n        }\r\n\r\n        return instance;\r\n\r\n    };\r\n\r\n};\r\n\r\nvar factoryEntries = [\r\n    [ARIA.Property, [\r\n        \"autocomplete\",\r\n        \"current\",\r\n        \"haspopup\",\r\n        \"invalid\",\r\n        \"keyshortcuts\",\r\n        \"label\",\r\n        \"live\",\r\n        \"orientation\",\r\n        \"placeholder\",\r\n        \"roledescription\",\r\n        \"sort\",\r\n        \"valuetext\"\r\n    ]],\r\n    [ARIA.Reference, [\r\n        \"activedescendant\",\r\n        \"details\",\r\n        \"errormessage\"\r\n    ]],\r\n    [ARIA.ReferenceList, [\r\n        \"controls\",\r\n        \"describedby\",\r\n        \"flowto\",\r\n        \"labelledby\",\r\n        \"owns\"\r\n    ]],\r\n    [ARIA.State, [\r\n        \"atomic\",\r\n        \"busy\",\r\n        \"disabled\",\r\n        \"modal\",\r\n        \"multiline\",\r\n        \"multiselectable\",\r\n        \"readonly\",\r\n        \"required\"\r\n    ]],\r\n    [ARIA.Tristate, [\r\n        \"checked\",\r\n        \"pressed\"\r\n    ]],\r\n    [ARIA.UndefinedState, [\r\n        \"expanded\",\r\n        \"grabbed\",\r\n        \"hidden\",\r\n        \"selected\"\r\n    ]],\r\n    [ARIA.Integer, [\r\n        \"colcount\",\r\n        \"colindex\",\r\n        \"colspan\",\r\n        \"level\",\r\n        \"posinset\",\r\n        \"rowcount\",\r\n        \"rowindex\",\r\n        \"rowspan\",\r\n        \"setsize\"\r\n    ]],\r\n    [ARIA.Integer, [\r\n        \"tabindex\"\r\n    ], function (instance) {\r\n\r\n        var uInt16 = Math.pow(2, 16);\r\n\r\n        instance.setMin(uInt16 / -2);\r\n        instance.setMax((uInt16 / 2) - 1);\r\n\r\n    }],\r\n    [ARIA.Number, [\r\n        \"valuemax\",\r\n        \"valuemin\",\r\n        \"valuenow\"\r\n    ]],\r\n    [ARIA.List, [\r\n        \"dropeffect\",\r\n        \"relevant\",\r\n        \"role\"\r\n    ]]\r\n];\r\n\r\nfactoryEntries.forEach(function (entry) {\r\n\r\n    entry[1].forEach(function (attribute) {\r\n\r\n        ARIA.factories[attribute] = ARIA.makeFactory(\r\n            ARIA.normalise(attribute),\r\n            entry[0],\r\n            entry[2]\r\n        );\r\n\r\n    });\r\n\r\n});\r\n\r\n/**\r\n * Creates an alias of WAI-ARIA attributes.\r\n *\r\n * @param  {String} source\r\n *         Source attribute for the alias.\r\n * @param  {Array.<String>|String} aliases\r\n *         Either a single alias or an array of aliases.\r\n * @throws {ReferenceError}\r\n *         The source attribute must have a related factory.\r\n */\r\nARIA.addAlias = function (source, aliases) {\r\n\r\n    var normalSource = ARIA.normalise(source).slice(5);\r\n\r\n    if (!Array.isArray(aliases)) {\r\n        aliases = [aliases];\r\n    }\r\n\r\n    if (!ARIA.getFactory(normalSource)) {\r\n\r\n        throw new ReferenceError(\r\n            \"ARIA.factories.\"\r\n            + normalSource\r\n            + \" does not exist\"\r\n        );\r\n\r\n    }\r\n\r\n    aliases.forEach(function (alias) {\r\n\r\n        var normalAlias = ARIA.normalise(alias).slice(5);\r\n\r\n        ARIA.translate[normalAlias] = normalSource;\r\n        ARIA.factories[normalAlias] = ARIA.factories[normalSource];\r\n\r\n    });\r\n\r\n};\r\n\r\nARIA.addAlias(\"labelledby\", \"labeledby\");\r\n}(window));"],"file":"aria.noExtend.min.js"}