{"version":3,"sources":["aria.js"],"names":["globalVariable","identity","x","arrayFrom","Array","from","arrayLike","map","context","undefined","prototype","call","objectAssign","Object","assign","source","forEach","arguments","object","i","keys","key","noop","fnTest","test","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","setTimeout","ARIA","defineProperty","configurable","enumerable","writable","value","previousAria","getPrevious","restorePrevious","translate","create","aria-role","normalise","attribute","normal","String","toLowerCase","replace","normaliseDescriptor","get","set","normaliser","addClassMethods","name","method","parent","this","returnValue","hasSuper","temp","$super","apply","defineProperties","normalize","suffixMap","getSuffix","mapped","createClass","Base","proto","Class","init","addMethod","addMethods","constructor","setAttribute","element","getAttribute","hasAttribute","removeAttribute","getById","id","document","getElementById","counter","defaultIdentifyPrefix","identify","prefix","isNode","Node","Property","interpret","interpretted","toString","trim","Number","parseFloat","Integer","Math","floor","State","isTrue","UndefinedState","Tristate","List","list","val","isArray","join","string","length","split","values","reduce","unique","token","indexOf","push","concat","Reference","ReferenceList","filter","Boolean","Element","instances","readAttributes","observeAttributes","activateTraps","getInstance","instance","getFactory","runFactory","attributes","that","observer","makeObserver","data","factories","suffix","disconnectAttributes","disconnect","Proxy","target","deleteProperty","checker","setter","unsetter","manipulationFlags","MutationObserver","mutations","mutation","attributeName","type","old","oldValue","observe","attributeOldValue","owns","hasOwnProperty","bind","setProperty","isPolling","poll","factory","ReferenceError","makeFactory","Constructor","factoryEntries","createFactories","entry","addAlias","aliases","alias","normalAlias","window"],"mappings":"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","sourcesContent":["/*! ariajs - v0.2.0 - MIT license - https://github.com/Skateside/ariajs - 2018-11-14 */\n(function (globalVariable) {\n    \"use strict\";\n\n/**\r\n * A function that returns the given variable unchanged.\r\n *\r\n * @private\r\n * @param   {?} x\r\n *          Variable to return.\r\n * @return  {?}\r\n *          Unmodified original variable.\r\n */\r\nvar identity = function (x) {\r\n    return x;\r\n};\r\n\r\n/**\r\n * A simple fall-back for Array.from.\r\n *\r\n * @private\r\n * @param   {Object} arrayLike\r\n *          Array-like structure.\r\n * @param   {Function} [map=identity]\r\n *          Optional function to convert the values.\r\n * @param   {?} [context]\r\n *          Optional context for the map function.\r\n * @return  {Array}\r\n *          Array made from the iven array-like structure.\r\n */\r\nvar arrayFrom = Array.from || function (arrayLike, map, context) {\r\n\r\n    if (map === undefined) {\r\n        map = identity;\r\n    }\r\n\r\n    return Array.prototype.map.call(arrayLike, map, context);\r\n\r\n};\r\n\r\n/**\r\n * A simple fall-back for Object.assign.\r\n *\r\n * @private\r\n * @param   {Object} source\r\n *          Source object to modify.\r\n * @param   {Object} [...objects]\r\n *          Additional objects to extend the first.\r\n * @return  {Object}\r\n *          Extended object.\r\n */\r\nvar objectAssign = Object.assign || function (source) {\r\n\r\n    Array.prototype.forEach.call(arguments, function (object, i) {\r\n\r\n        // Skip null objects and the first one (source parameter).\r\n        if (object && i > 0) {\r\n\r\n            Object.keys(object).forEach(function (key) {\r\n                source[key] = object[key];\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return source;\r\n\r\n};\r\n\r\n/**\r\n * A function that does nothing.\r\n *\r\n * @private\r\n */\r\nvar noop = function () {\r\n    return;\r\n};\r\n\r\n/**\r\n * The regular expression used to test functions for whether or not they include\r\n * the \"$super\" magic property.\r\n * @private\r\n * @type    {RegExp}\r\n */\r\nvar fnTest = (\r\n    (/return/).test(noop)\r\n    ? (/[.'\"]\\$super\\b/)\r\n    : (/.*/)\r\n);\r\n\r\n/**\r\n * A reference (and possible fallback) for requestAnimationFrame.\r\n *\r\n * @private\r\n * @function\r\n * @param    {Function} callback\r\n *           Function to execute when the animation frame ticks over.\r\n */\r\nvar requestAnimationFrame = (\r\n    globalVariable.requestAnimationFrame\r\n    || globalVariable.webkitRequestAnimationFrame\r\n    || globalVariable.mozRequestAnimationFrame\r\n    || function (callback) {\r\n        globalVariable.setTimeout(callback, 1000 / 60);\r\n    }\r\n);\r\n\r\n/**\r\n * @namespace\r\n */\r\nvar ARIA = {};\r\n\r\n/**\r\n * The version of the library.\r\n *\r\n * @memberof ARIA\r\n * @type {String}\r\n * @constant\r\n * @name VERSION\r\n */\r\nObject.defineProperty(ARIA, \"VERSION\", {\r\n    configurable: false,\r\n    enumerable: true,\r\n    writable: false,\r\n    value: \"0.2.0\"\r\n});\r\n\r\nvar previousAria = globalVariable.ARIA;\r\nglobalVariable.ARIA = ARIA;\r\n\r\n/**\r\n * Returns the previous value of the global ARIA variable.\r\n *\r\n * @return {?}\r\n *         Previous ARIA value.\r\n */\r\nARIA.getPrevious = function () {\r\n    return previousAria;\r\n};\r\n\r\n/**\r\n * Removes the value of {@link ARIA} from the global variable and sets it back\r\n * to the previous value. This version of {@link ARIA} is returned.\r\n *\r\n * @return {Object}\r\n *         Current version of {@link ARIA}.\r\n */\r\nARIA.restorePrevious = function () {\r\n\r\n    globalVariable.ARIA = previousAria;\r\n\r\n    return ARIA;\r\n\r\n};\r\n\r\n/**\r\n * Map of all mis-spellings and aliases. The attribute key should be the\r\n * normalised value - see {@link ARIA.normalise}.\r\n * @type {Object}\r\n */\r\nARIA.translate = objectAssign(Object.create(null), {\r\n    \"aria-role\": \"role\"\r\n});\r\n\r\n/**\r\n * Normalises an attribute name so that it is in lowercase and always starts\r\n * with \"aria-\". This function has the alias of {@link ARIA.normalize} and\r\n * changing one will update the other.\r\n *\r\n * @memberof ARIA\r\n * @name     normalise\r\n * @param    {String} attribute\r\n *           Attribute to normalise.\r\n * @return   {String}\r\n *           Normalised attribute.\r\n *\r\n * @example\r\n * ARIA.normalise(\"aria-busy\"); // -> \"aria-busy\"\r\n * ARIA.normalise(\"busy\"); // -> \"aria-busy\"\r\n * ARIA.normalise(\"  busy  \"); // -> \"aria-busy\"\r\n * ARIA.normalise(\"BUSY\"); // -> \"aria-busy\"\r\n */\r\nvar normalise = function (attribute) {\r\n\r\n    var string = String(attribute)\r\n        .toLowerCase()\r\n        .replace(/^\\s*(?:aria\\-)?|\\s*$/g, \"\");\r\n    var normal = \"aria-\" + string;\r\n\r\n    return ARIA.translate[normal] || normal;\r\n\r\n};\r\n\r\nvar normaliseDescriptor = {\r\n\r\n    configurable: false,\r\n    enumerable: true,\r\n\r\n    get: function () {\r\n        return normalise;\r\n    },\r\n\r\n    set: function (normaliser) {\r\n        normalise = normaliser;\r\n    }\r\n\r\n};\r\n\r\nObject.defineProperties(ARIA, {\r\n\r\n    normalise: normaliseDescriptor,\r\n\r\n    /**\r\n     * An alias of {@link ARIA.normalise}.\r\n     *\r\n     * @memberof ARIA\r\n     * @function\r\n     */\r\n    normalize: normaliseDescriptor\r\n\r\n});\r\n\r\n/**\r\n * A map of all conversions for {@link ARIA.getSuffix}. As well as acting like a\r\n * cache for frequent conversions, this also allows plugins to use un-expected\r\n * attribute names since the conversion can be added here.\r\n * @type {Object}\r\n */\r\nARIA.suffixMap = Object.create(null);\r\n\r\n/**\r\n * Converts the attribute into the WAI-ARIA suffix (e.g. \"aria-label\" becomes\r\n * \"label\" etc.).\r\n *\r\n * @param  {String} attribute\r\n *         Attribute whose suffix should be returned.\r\n * @return {String}\r\n *         Suffix of the attribute.\r\n */\r\nARIA.getSuffix = function (attribute) {\r\n\r\n    var mapped = ARIA.suffixMap[attribute];\r\n\r\n    if (!mapped) {\r\n\r\n        mapped = attribute.replace(/^aria\\-/, \"\");\r\n        ARIA.suffixMap[attribute] = mapped;\r\n\r\n    }\r\n\r\n    return mapped;\r\n\r\n};\r\n\r\n/**\r\n * Adds one or more methods to the class.\r\n *\r\n * @memberof Class\r\n * @name     addMethod\r\n * @static\r\n * @param    {Object|String} name\r\n *           Either the name of the method to add or an object of names to\r\n *           methods.\r\n * @param    {Function} [method]\r\n *           Method to add to the class.\r\n */\r\nfunction addClassMethods(name, method) {\r\n\r\n    var parent = this.parent;\r\n\r\n    if (typeof name === \"object\") {\r\n\r\n        Object.keys(name).forEach(function (key) {\r\n            addClassMethods.call(this, key, name[key]);\r\n        }, this);\r\n\r\n    } else {\r\n\r\n        this.prototype[name] = (\r\n            (\r\n                typeof method === \"function\"\r\n                && typeof parent[name] === \"function\"\r\n                && fnTest.test(method)\r\n            )\r\n            ? function () {\r\n\r\n                var hasSuper = \"$super\" in this;\r\n                var temp = this.$super;\r\n                var returnValue = null;\r\n\r\n                this.$super = parent[name];\r\n                returnValue = method.apply(this, arguments);\r\n\r\n                if (hasSuper) {\r\n                    this.$super = temp;\r\n                } else {\r\n                    delete this.$super;\r\n                }\r\n\r\n                return returnValue;\r\n\r\n            }\r\n            : method\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Creates a Class.\r\n *\r\n * @see    https://johnresig.com/blog/simple-javascript-inheritance/\r\n * @param  {Class} [Base]\r\n *         Optional parent class.\r\n * @param  {Object} proto\r\n *         Methods to add to the created Class' prototype.\r\n * @return {Class}\r\n *         Class created.\r\n */\r\nARIA.createClass = function (Base, proto) {\r\n\r\n    function Class() {\r\n        return this.init.apply(this, arguments);\r\n    }\r\n\r\n    if (!proto) {\r\n\r\n        proto = Base;\r\n        Base = Object;\r\n\r\n    }\r\n\r\n    Class.addMethod = addClassMethods;\r\n\r\n    /**\r\n     * Alias of {@link Class.addMethod}\r\n     */\r\n    Class.addMethods = addClassMethods;\r\n\r\n    /**\r\n     * Reference to the prototype of the Class' super-class.\r\n     * @type {Object}\r\n     */\r\n    Class.parent = Base.prototype;\r\n\r\n    Class.prototype = Object.create(Base.prototype);\r\n    addClassMethods.call(Class, proto);\r\n\r\n    Class.prototype.constructor = Class;\r\n\r\n    if (typeof Class.prototype.init !== \"function\") {\r\n        Class.prototype.init = noop;\r\n    }\r\n\r\n    return Class;\r\n\r\n};\r\n\r\n/**\r\n * A wrapper for setting an attribute on an element. This allows the method to\r\n * be easily replaced for virtual DOMs.\r\n *\r\n * @param {Element} element\r\n *        Element whose attribute should be set.\r\n * @param {String} name\r\n *        Name of the attribute to set.\r\n * @param {String} value\r\n *        Value of the attribute.\r\n */\r\nARIA.setAttribute = function (element, name, value) {\r\n    element.setAttribute(name, value);\r\n};\r\n\r\n/**\r\n * A wrapper for getting an attribute of an element. This allows the method to\r\n * be easily replaced for virtual DOMs.\r\n *\r\n * @param  {Element} element\r\n *         Element whose attribute should be retrieved.\r\n * @param  {String} name\r\n *         Name of the attribute to retrieve.\r\n * @return {String|null}\r\n *         The value of the attribute or null if that attribute does not exist.\r\n */\r\nARIA.getAttribute = function (element, name) {\r\n    return element.getAttribute(name);\r\n};\r\n\r\n/**\r\n * A wrapper for checking for an attribute on an element. This allows the method\r\n * to be easily replaced for virtual DOMs.\r\n *\r\n * @param  {Element} element\r\n *         Element whose attribute should be checked.\r\n * @param  {String} name\r\n *         Name of the attribute to check.\r\n * @return {Boolean}\r\n *         true if the element has the given attribute, false otherwise.\r\n */\r\nARIA.hasAttribute = function (element, name) {\r\n    return element.hasAttribute(name);\r\n};\r\n\r\n/**\r\n * A wrapper for removing an attribute from an element. This allows the method\r\n * to be easily replaced for virtual DOMs.\r\n *\r\n * @param {Element} element\r\n *        Element whose attribute should be removed.\r\n * @param {String} name\r\n *        Name of the attribute to remove.\r\n */\r\nARIA.removeAttribute = function (element, name) {\r\n    element.removeAttribute(name);\r\n};\r\n\r\n/**\r\n * Gets an element by the given ID. If the element cannot be found, null is\r\n * returned. This function is just a wrapper for document.getElementById to\r\n * allow the library to be easily modified in case a virtual DOM is being used.\r\n *\r\n * @param  {String} id\r\n *         ID of the element to find.\r\n * @return {Element|null}\r\n *         Element with the given ID or null if the element cannot be found.\r\n */\r\nARIA.getById = function (id) {\r\n    return document.getElementById(id);\r\n};\r\n\r\nvar counter = 0;\r\n\r\n/**\r\n * The default prefix for {@link ARIA.identify}.\r\n * @type {String}\r\n */\r\nARIA.defaultIdentifyPrefix = \"anonymous-element-\";\r\n\r\n/**\r\n * Returns the ID of the given element. If the element does not have an ID, a\r\n * unique one is generated. The generated ID is the given prefix and an\r\n * incrementing counter.\r\n * Pro tip: The HTML specs state that element IDs should start with a letter.\r\n *\r\n * @param  {Element} element\r\n *         Element whose ID should be returned.\r\n * @param  {String} [prefix=ARIA.defaultIdentifyPrefix]\r\n *         Prefix for the generated ID.\r\n * @return {String}\r\n *         The ID of the element.\r\n * @see    http://api.prototypejs.org/dom/Element/identify/\r\n */\r\nARIA.identify = function (element, prefix) {\r\n\r\n    var id = ARIA.getAttribute(element, \"id\");\r\n\r\n    if (prefix === undefined) {\r\n        prefix = ARIA.defaultIdentifyPrefix;\r\n    }\r\n\r\n    if (!id) {\r\n\r\n        do {\r\n\r\n            id = prefix + counter;\r\n            counter += 1;\r\n\r\n        } while (ARIA.getById(id));\r\n\r\n        ARIA.setAttribute(element, \"id\", id);\r\n\r\n    }\r\n\r\n    return id;\r\n\r\n};\r\n\r\n/**\r\n * Checks to see if the given value is a Node.\r\n *\r\n * @param  {?} value\r\n *         Value to test.\r\n * @return {Boolean}\r\n *         true if the given value is a Node, false otherwise.\r\n */\r\nARIA.isNode = function (value) {\r\n    return (value instanceof Node);\r\n};\r\n\r\n/**\r\n * Handles basic WAI-ARIA properties.\r\n *\r\n * @class ARIA.Property\r\n */\r\nARIA.Property = ARIA.createClass(/** @lends ARIA.Property.prototype */{\r\n\r\n    /**\r\n     * @constructs ARIA.Property\r\n     * @param      {Element} element\r\n     *             Element whose attribute should be handled.\r\n     * @param      {String} attribute\r\n     *             Name of the attribute to handle.\r\n     */\r\n    init: function (element, attribute) {\r\n\r\n        /**\r\n         * Element whose attribute is being handled.\r\n         * @type {Element}\r\n         */\r\n        this.element = element;\r\n\r\n        /**\r\n         * Attribute being handled.\r\n         * @type {String}\r\n         */\r\n        this.attribute = attribute;\r\n\r\n        // Things like ARIA.List work with interpretted values rather than just\r\n        // the attribute value. If the attribute already exists, pass the value\r\n        // to the set method to allow for that. As a bonus, this can filter out\r\n        // invalid attribute values.\r\n        if (ARIA.hasAttribute(element, attribute)) {\r\n            this.set(ARIA.getAttribute(element, attribute));\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Interprets the given value so it can be set.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {String}\r\n     *         String based on the value.\r\n     */\r\n    interpret: function (value) {\r\n        return ARIA.Property.interpret(value);\r\n    },\r\n\r\n    /**\r\n     * Gets the value of {@link ARIA.Property#attribute} and interprets it\r\n     * (see {@link ARIA.Property#interpret}). If {@link ARIA.Property#element}\r\n     * doesn't have {@link ARIA.Property#attribute} then null is returned.\r\n     *\r\n     * @return {String|null}\r\n     *         Interpretted value of {@link ARIA.Property#attribute} or null if\r\n     *         the attribute is not set.\r\n     */\r\n    get: function () {\r\n\r\n        var element = this.element;\r\n        var attribute = this.attribute;\r\n\r\n        return (\r\n            ARIA.hasAttribute(element, attribute)\r\n            ? this.interpret(ARIA.getAttribute(element, attribute))\r\n            : null\r\n        );\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets {@link ARIA.Property#attribute} to the given value, once\r\n     * interpretted (see {@link ARIA.Property#interpret}) and validated (see\r\n     * {@link ARIA.Property#isValidToken}). If the value is interpretted as an\r\n     * empty string, the attribute is removed.\r\n     *\r\n     * @param {?} value\r\n     *        Value to set.\r\n     */\r\n    set: function (value) {\r\n\r\n        var element = this.element;\r\n        var attribute = this.attribute;\r\n        var interpretted = this.interpret(value);\r\n\r\n        if (interpretted === \"\") {\r\n            ARIA.removeAttribute(element, attribute);\r\n        } else {\r\n            ARIA.setAttribute(element, attribute, interpretted);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Returns the value of {@link ARIA.Property#attribute} as a string. See\r\n     * {@link ARIA.Property#get}.\r\n     *\r\n     * @return {String}\r\n     *         Value of the attribute.\r\n     */\r\n    toString: function () {\r\n        return ARIA.getAttribute(this.element, this.attribute) || \"\";\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Interprets the given value so it can be set. This is used to power\r\n * {@link ARIA.Property#interpret} while also being exposed so other functions\r\n * and classes can use it.\r\n *\r\n * @param  {?} value\r\n *         Value to interpret.\r\n * @return {String}\r\n *         String based on the value.\r\n */\r\nARIA.Property.interpret = function (value) {\r\n\r\n    return (\r\n        (value === null || value === undefined)\r\n        ? \"\"\r\n        : String(value).trim()\r\n    );\r\n\r\n};\r\n\r\n/**\r\n * Handles number values.\r\n *\r\n * @class ARIA.Integer\r\n * @extends ARIA.Property\r\n */\r\nARIA.Number = ARIA.createClass(ARIA.Property, /** @lends ARIA.Number.prototype */{\r\n\r\n    /**\r\n     * Interprets the value as a number. If the value can't be converted into a\r\n     * number, NaN is returned.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Number}\r\n     *         Number value.\r\n     */\r\n    interpret: function (value) {\r\n        return parseFloat(this.$super(value));\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles number values.\r\n *\r\n * @class ARIA.Integer\r\n * @extends ARIA.Number\r\n */\r\nARIA.Integer = ARIA.createClass(ARIA.Number, /** @lends ARIA.Integer.prototype */{\r\n\r\n    /**\r\n     * Interprets the value as an integer. If the value can't be converted into\r\n     * a number, NaN is returned.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Number}\r\n     *         Number value.\r\n     */\r\n    interpret: function (value) {\r\n        return Math.floor(this.$super(value));\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles WAI-ARIA states.\r\n *\r\n * @class ARIA.State\r\n * @extends ARIA.Property\r\n */\r\nARIA.State = ARIA.createClass(ARIA.Property, /** @lends ARIA.State.prototype */{\r\n\r\n    /**\r\n     * Coerces the given value into a boolean.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to coerce.\r\n     * @return {Boolean|String}\r\n     *         Coerced boolean or an empty string.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        var interpretted = this.$super(value);\r\n        var isTrue = interpretted === \"true\";\r\n\r\n        return (\r\n            (isTrue || interpretted === \"false\")\r\n            ? isTrue\r\n            : interpretted\r\n        );\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles a WAI-ARIA state that can be true or false but can also be undefined.\r\n *\r\n * @class ARIA.UndefinedState\r\n * @extends ARIA.State\r\n */\r\nARIA.UndefinedState = ARIA.createClass(ARIA.State, /** @lends ARIA.UndefinedState.prototype */{\r\n\r\n    /**\r\n     * Interprets undefined as \"undefined.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Boolean|String}\r\n     *         Either the boolean value, \"undefined\" or an empty string if the\r\n     *         value is not understood.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        return (\r\n            (value === undefined || value === \"undefined\")\r\n            ? \"undefined\"\r\n            : this.$super(value)\r\n        );\r\n\r\n    },\r\n\r\n    /**\r\n     * Returns a boolean or undefined.\r\n     *\r\n     * @return {Boolean|undefined}\r\n     *         Value of the attribute.\r\n     */\r\n    get: function () {\r\n\r\n        var value = this.$super();\r\n\r\n        if (value === \"undefined\") {\r\n            value = undefined;\r\n        }\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles WAI-ARIA tristates. That is, a state that can be either true, false\r\n * or \"mixed\".\r\n *\r\n * @class ARIA.Tristate\r\n * @extends ARIA.State\r\n */\r\nARIA.Tristate = ARIA.createClass(ARIA.State, /** @lends ARIA.Tristate.prototype */{\r\n\r\n    /**\r\n     * Allows the token \"mixed\".\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Boolean|String}\r\n     *         Either the boolean value, \"mixed\" or an empty string if the value\r\n     *         is not understood.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        return (\r\n            value === \"mixed\"\r\n            ? value\r\n            : this.$super(value)\r\n        );\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles a WAI-ARIA attribute that should be a space-separated list.\r\n *\r\n * @class ARIA.List\r\n * @extends ARIA.Property\r\n */\r\nARIA.List = ARIA.createClass(ARIA.Property, /** ARIA.List.prototype */{\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    init: function (element, attribute) {\r\n\r\n        /**\r\n         * The list of values.\r\n         * @type {Array.<String>}\r\n         */\r\n        this.list = [];\r\n\r\n        this.$super(element, attribute);\r\n\r\n    },\r\n\r\n    /**\r\n     * Coerces the values into a string and splits it at the spaces.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {Array.<String>}\r\n     *         Array of strings.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        var val = (\r\n            Array.isArray(value)\r\n            ? value.join(\" \")\r\n            : value\r\n        );\r\n        var string = this.$super(val);\r\n\r\n        return (\r\n            string.length\r\n            ? string.split(/\\s+/)\r\n            : []\r\n        );\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the value of the list to be the given value. The values are\r\n     * interpretted as an array (see {@link ARIA.List#interpret} and validated\r\n     * (see {@link ARIA.List#isValidToken}); only unique values are added.\r\n     *\r\n     * @param {?} value\r\n     *        Value(s) to add. If the given value is a string, it is assumed to\r\n     *        be a space-separated list.\r\n     */\r\n    set: function (value) {\r\n\r\n        var that = this;\r\n        var values = that.interpret(value).reduce(function (unique, token) {\r\n\r\n            if (token && unique.indexOf(token) < 0) {\r\n                unique.push(token);\r\n            }\r\n\r\n            return unique;\r\n\r\n        }, []);\r\n        var element = that.element;\r\n        var attribute = that.attribute;\r\n\r\n        that.list = values;\r\n\r\n        if (values.length) {\r\n            ARIA.setAttribute(element, attribute, values.join(\" \"));\r\n        } else {\r\n            ARIA.removeAttribute(element, attribute);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Gets the value of the attribute as an array.\r\n     *\r\n     * @return {Array.<String>}\r\n     *         Value of the attribute as an array.\r\n     */\r\n    get: function () {\r\n        return this.list.concat();\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles WAI-ARIA attributes that reference a single ID.\r\n *\r\n * @class ARIA.Reference\r\n * @extends ARIA.Property\r\n */\r\nARIA.Reference = ARIA.createClass(ARIA.Property, /** @lends ARIA.Reference.prototype */{\r\n\r\n    /**\r\n     * Interprets the given value as a string. If the value is an element, the\r\n     * element's ID is returned, generating one if necessary - see\r\n     * {@link ARIA.identify}.\r\n     *\r\n     * @param  {?} value\r\n     *         Value to interpret.\r\n     * @return {String}\r\n     *         The interpretted value.\r\n     */\r\n    interpret: function (value) {\r\n        return ARIA.Reference.interpret(value);\r\n    },\r\n\r\n    /**\r\n     * Gets the element referenced by this attribute. If the element cannot be\r\n     * found or the attribute isn't set, null is returned.\r\n     *\r\n     * @return {Element|null}\r\n     *         Element referenced by this attribute or null if the element\r\n     *         cannot be found or the attribute isn't set.\r\n     */\r\n    get: function () {\r\n        return ARIA.getById(this.$super());\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Interprets the given value as a string. If the value is an element, the\r\n * element's ID is returned, generating one if necessary = see\r\n * {@link ARIA.identify}. This powers {@link ARIA.Reference#interpret} while\r\n * also allowing other functions and classes to use it.\r\n *\r\n * @param  {?} value\r\n *         Value to interpret.\r\n * @return {String}\r\n *         The interpretted value.\r\n */\r\nARIA.Reference.interpret = function (value) {\r\n\r\n    return (\r\n        ARIA.isNode(value)\r\n        ? ARIA.identify(value)\r\n        : ARIA.Property.interpret(value)\r\n    );\r\n\r\n};\r\n\r\n/**\r\n * Handles WAI-ARIA attributes that handle space-separated lists of IDs.\r\n * @class ARIA.ReferenceList\r\n * @extends ARIA.List\r\n */\r\nARIA.ReferenceList = ARIA.createClass(ARIA.List, /** @lends ARIA.ReferenceList.prototype */{\r\n\r\n    /**\r\n     * Interprets an element, ID or array of elements or/and IDs as an array of\r\n     * element IDs.\r\n     *\r\n     * @param  {Array.<Element|String>|Element|String} value\r\n     *         Value(s) to interpret.\r\n     * @return {Array.<String>}\r\n     *         Collection of IDs.\r\n     */\r\n    interpret: function (value) {\r\n\r\n        var interpretted = [];\r\n\r\n        if (\r\n            value\r\n            && typeof value === \"object\"\r\n            && typeof value.length === \"number\"\r\n        ) {\r\n            interpretted = arrayFrom(value, ARIA.Reference.interpret, this);\r\n        } else if (typeof value === \"string\") {\r\n            interpretted = this.$super(value);\r\n        } else {\r\n            interpretted = [ARIA.Reference.interpret(value)];\r\n        }\r\n\r\n        // Remove all falsy values such as \"\" or null.\r\n        return interpretted.filter(Boolean);\r\n\r\n    },\r\n\r\n    /**\r\n     * Gets an array of elements referenced by the attribute. If the element\r\n     * cannot be found, null will be in place of the element.\r\n     *\r\n     * @return {Array.<Element|null>}\r\n     *         Array of elements.\r\n     */\r\n    get: function () {\r\n        return this.$super().map(ARIA.getById);\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Handles the WAI-ARIA attributes on an element.\r\n *\r\n * @class ARIA.Element\r\n */\r\nARIA.Element = ARIA.createClass(/** @lends ARIA.ELement.prototype */{\r\n\r\n    /**\r\n     * @constructs ARIA.Element\r\n     * @param      {Element} element\r\n     *             Element whose WAI-ARIA attributes should be handled.\r\n     */\r\n    init: function (element) {\r\n\r\n        /**\r\n         * Element whose WAI-ARIA attributes should be handled.\r\n         * @type {Element}\r\n         */\r\n        this.element = element;\r\n\r\n        /**\r\n         * Instances of {@link ARIA.Property} (or sub-classes) that are used to\r\n         * check get and set values.\r\n         * @type {Object}\r\n         */\r\n        this.instances = Object.create(null);\r\n\r\n        this.readAttributes();\r\n        this.observeAttributes();\r\n\r\n        return this.activateTraps();\r\n\r\n    },\r\n\r\n    /**\r\n     * Gets the instance from {@link ARIA.Element#instances} for the given\r\n     * attribute. If the instance does not exist but a factory exists, the\r\n     * instance is created and stored before being returned.\r\n     *\r\n     * @param  {String} attribute\r\n     *         Attribute whose instance should be found.\r\n     * @return {ARIA.Property}\r\n     *         Instance of {@link ARIA.Property} (or sub-class).\r\n     */\r\n    getInstance: function (attribute) {\r\n\r\n        var instance = this.instances[attribute];\r\n\r\n        if (!instance && ARIA.getFactory(attribute)) {\r\n\r\n            instance = ARIA.runFactory(attribute, this.element);\r\n            this.instances[attribute] = instance;\r\n\r\n        }\r\n\r\n        return instance;\r\n\r\n    },\r\n\r\n    /**\r\n     * Reads all the WAI-ARIA attributes on {@link ARIA.Element#element} and\r\n     * sets the {@link ARIA.Property} values.\r\n     */\r\n    readAttributes: function () {\r\n\r\n        arrayFrom(this.element.attributes, function (attribute) {\r\n\r\n            var value = attribute.value;\r\n            var instance = (\r\n                value\r\n                ? this.getInstance(attribute.name)\r\n                : undefined\r\n            );\r\n\r\n            if (instance) {\r\n                instance.set(value);\r\n            }\r\n\r\n        }, this);\r\n\r\n    },\r\n\r\n    /**\r\n     * Creates the observer {@link ARIA.Element#observer} that listens for\r\n     * changes to WAI-ARIA attribtues and updates the {@link ARIA.Property}\r\n     * values.\r\n     */\r\n    observeAttributes: function () {\r\n\r\n        var that = this;\r\n\r\n        /**\r\n         * The observer.\r\n         * @type {MutationObserver}\r\n         */\r\n        that.observer = ARIA.Element.makeObserver(\r\n            that.element,\r\n            function (data) {\r\n                return Boolean(ARIA.factories[data.suffix]);\r\n            },\r\n            function (data) {\r\n                that[data.suffix] = data.value;\r\n            },\r\n            function (data) {\r\n                that[data.suffix] = \"\";\r\n            }\r\n        );\r\n\r\n    },\r\n\r\n    /**\r\n     * Disconnects {@link ARIA.Element#observer}.\r\n     */\r\n    disconnectAttributes: function () {\r\n        this.observer.disconnect();\r\n    },\r\n\r\n    /**\r\n     * Activates the get, set and delete traps for the instance which enables\r\n     * the interface.\r\n     *\r\n     * @return {Proxy}\r\n     *         Proxy of the instance (if the browser supports it).\r\n     */\r\n    activateTraps: function () {\r\n\r\n        return new Proxy(this, {\r\n\r\n            get: function (target, name) {\r\n\r\n                var value = target[name];\r\n                var instance = target.getInstance(name);\r\n\r\n                if (instance) {\r\n                    value = instance.get();\r\n                }\r\n\r\n                return value;\r\n\r\n            },\r\n\r\n            set: function (target, name, value) {\r\n\r\n                var instance = target.getInstance(name);\r\n\r\n                if (instance) {\r\n                    instance.set(value);\r\n                } else {\r\n                    target[name] = value;\r\n                }\r\n\r\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set#Return_value\r\n                return true;\r\n\r\n            },\r\n\r\n            deleteProperty: function (target, name) {\r\n\r\n                var instance = target.getInstance(name);\r\n\r\n                if (instance) {\r\n                    instance.set(\"\");\r\n                } else {\r\n                    delete target[name];\r\n                }\r\n\r\n                return true;\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Creates an observer to listen for attribute changes.\r\n *\r\n * @param  {Element} element\r\n *         Element whose attribute changes should be observed.\r\n * @param  {Function} checker\r\n *         Function to execute when checking whether the attribute change should\r\n *         be observed. Accepts an object with \"attribute\" and \"suffix\"\r\n *         properties, returns a boolean.\r\n * @param  {Function} setter\r\n *         Function to execute when an attribute change has been detected.\r\n *         Accepts an object and \"attribute\", \"suffix\", \"value\" and \"old\"\r\n *         properties.\r\n * @param  {Function} unsetter\r\n *         Function to execute when an attribute has been removed. Accepts an\r\n *         object with \"attribute\" and \"suffix\" properties.\r\n * @return {MutationObserver}\r\n *         MutationObserver that observes the attribute changes.\r\n */\r\nARIA.Element.makeObserver = function (element, checker, setter, unsetter) {\r\n\r\n    var manipulationFlags = Object.create(null);\r\n    var observer = new MutationObserver(function (mutations) {\r\n\r\n        mutations.forEach(function (mutation) {\r\n\r\n            var attribute = mutation.attributeName || \"\";\r\n            var suffix = ARIA.getSuffix(attribute);\r\n            var data = {\r\n                attribute: attribute,\r\n                suffix: suffix\r\n            };\r\n\r\n            if (\r\n                mutation.type === \"attributes\"\r\n                && !manipulationFlags[suffix]\r\n                && checker(data)\r\n            ) {\r\n\r\n                manipulationFlags[suffix] = true;\r\n\r\n                if (ARIA.hasAttribute(element, attribute)) {\r\n\r\n                    data.value = ARIA.Property.interpret(\r\n                        ARIA.getAttribute(element, attribute)\r\n                    );\r\n                    data.old = ARIA.Property.interpret(mutation.oldValue);\r\n                    setter(data);\r\n\r\n                } else {\r\n                    unsetter(data);\r\n                }\r\n\r\n                requestAnimationFrame(function () {\r\n                    delete manipulationFlags[suffix];\r\n                });\r\n\r\n            }\r\n\r\n        });\r\n\r\n    });\r\n\r\n    observer.observe(element, {\r\n        attributes: true,\r\n        attributeOldValue: true\r\n    });\r\n\r\n    return observer;\r\n\r\n};\r\n\r\n// Create a fall-back for browsers that don't understand Proxy.\r\n// Object.defineProperty can be used for get and set, but delete will have to\r\n// rely on polling.\r\nif (!globalVariable.Proxy) {\r\n\r\n    ARIA.Element.prototype.activateTraps = function () {\r\n\r\n        var that = this;\r\n        var owns = Object.prototype.hasOwnProperty.bind(that);\r\n\r\n        Object.keys(ARIA.factories).forEach(function setProperty(attribute) {\r\n\r\n            var isPolling = false;\r\n\r\n            Object.defineProperty(that, attribute, {\r\n\r\n                configurable: true,\r\n\r\n                get: function () {\r\n                    return that.getInstance(attribute).get();\r\n                },\r\n\r\n                set: function (value) {\r\n\r\n                    var instance = that.getInstance(attribute);\r\n\r\n                    if (value === \"\") {\r\n                        isPolling = false;\r\n                    } else if (value !== \"\" && !isPolling) {\r\n\r\n                        requestAnimationFrame(function poll() {\r\n\r\n                            if (isPolling) {\r\n\r\n                                if (owns(attribute)) {\r\n\r\n                                    requestAnimationFrame(poll);\r\n                                    isPolling = true;\r\n\r\n                                } else {\r\n\r\n                                    isPolling = false;\r\n                                    instance.set(\"\");\r\n                                    setProperty(attribute);\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                        });\r\n                        isPolling = true;\r\n\r\n                    }\r\n\r\n                    return instance.set(value);\r\n\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n}\r\n\r\n/**\r\n * Collection of factories for creating WAI-ARIA libraries. The attribute key\r\n * should be the attribute suffixes (e.g. \"label\" for \"aria-label\" etc.)\r\n * @type {Object}\r\n */\r\nARIA.factories = Object.create(null);\r\n\r\n/**\r\n * Gets the factory from {@link ARIA.factories} that matches either the given\r\n * attribute or the normalised version (see {@link ARIA.normalise}).\r\n *\r\n * @param  {String} attribute\r\n *         Attribute whose factory should be returned.\r\n * @return {Function}\r\n *         Factory for creating the attribute.\r\n */\r\nARIA.getFactory = function (attribute) {\r\n\r\n    return (\r\n        ARIA.factories[attribute]\r\n        || ARIA.factories[ARIA.getSuffix(ARIA.normalise(attribute))]\r\n    );\r\n\r\n};\r\n\r\n/**\r\n * Executes the factory for the given attribute, passing in given parameters.\r\n * See {@link ARIA.getFactory}.\r\n *\r\n * @param  {String} attribute\r\n *         Attribute whose factory should be executed.\r\n * @param  {Element} element\r\n *         Element that should be passed to the factory.\r\n * @return {ARIA.Property}\r\n *         Instance of {@link ARIA.Property} (or sub-class) created by the\r\n *         factory.\r\n * @throws {ReferenceError}\r\n *         There must be a factory for the given attribute.\r\n */\r\nARIA.runFactory = function (attribute, element) {\r\n\r\n    var factory = ARIA.getFactory(attribute);\r\n\r\n    if (!factory) {\r\n        throw new ReferenceError(attribute + \" is not a recognised factory\");\r\n    }\r\n\r\n    return factory(element);\r\n\r\n};\r\n\r\n/**\r\n * Creates a factory that creates an aria property.\r\n *\r\n * @param  {String} attribute\r\n *         Normalised name of the attribute whose factory is created.\r\n * @param  {Function} Constructor\r\n *         Constructor for {@link ARIA.Property} (or sub-class) that will create\r\n *         the property.\r\n * @return {Function}\r\n *         A factory function that takes the element and returns the instance.\r\n */\r\nARIA.makeFactory = function (attribute, Constructor) {\r\n\r\n    return function (element) {\r\n        return new Constructor(element, attribute);\r\n    };\r\n\r\n};\r\n\r\n/**\r\n * All the factory entries that create the {@link ARIA.factories}. Each entry is\r\n * an array of two values: the {@link ARIA.Property} (or sub-class) constructor\r\n * and an array of the WAI-ARIA attribute suffixes (see {@link ARIA.getSuffix}).\r\n * @type {Array.<Array>}\r\n */\r\nARIA.factoryEntries = [\r\n    [ARIA.Property, [\r\n        \"autocomplete\",\r\n        \"current\",\r\n        \"haspopup\",\r\n        \"invalid\",\r\n        \"keyshortcuts\",\r\n        \"label\",\r\n        \"live\",\r\n        \"orientation\",\r\n        \"placeholder\",\r\n        \"roledescription\",\r\n        \"sort\",\r\n        \"valuetext\"\r\n    ]],\r\n    [ARIA.Reference, [\r\n        \"activedescendant\",\r\n        \"details\",\r\n        \"errormessage\"\r\n    ]],\r\n    [ARIA.ReferenceList, [\r\n        \"controls\",\r\n        \"describedby\",\r\n        \"flowto\",\r\n        \"labelledby\",\r\n        \"owns\"\r\n    ]],\r\n    [ARIA.State, [\r\n        \"atomic\",\r\n        \"busy\",\r\n        \"disabled\",\r\n        \"modal\",\r\n        \"multiline\",\r\n        \"multiselectable\",\r\n        \"readonly\",\r\n        \"required\"\r\n    ]],\r\n    [ARIA.Tristate, [\r\n        \"checked\",\r\n        \"pressed\"\r\n    ]],\r\n    [ARIA.UndefinedState, [\r\n        \"expanded\",\r\n        \"grabbed\",\r\n        \"hidden\",\r\n        \"selected\"\r\n    ]],\r\n    [ARIA.Integer, [\r\n        \"colcount\",\r\n        \"colindex\",\r\n        \"colspan\",\r\n        \"level\",\r\n        \"posinset\",\r\n        \"rowcount\",\r\n        \"rowindex\",\r\n        \"rowspan\",\r\n        \"setsize\"\r\n    ]],\r\n    [ARIA.Number, [\r\n        \"valuemax\",\r\n        \"valuemin\",\r\n        \"valuenow\"\r\n    ]],\r\n    [ARIA.List, [\r\n        \"dropeffect\",\r\n        \"relevant\",\r\n        \"role\"\r\n    ]]\r\n];\r\n\r\n/**\r\n * Creates the {@link ARIA.factories} based on {@link ARIA.factoryEntries}. As a\r\n * public function, this can be re-called if a plugin modifies\r\n * {@link ARIA.makeFactory}.\r\n */\r\nARIA.createFactories = function () {\r\n\r\n    ARIA.factoryEntries.forEach(function (entry) {\r\n\r\n        entry[1].forEach(function (attribute) {\r\n\r\n            ARIA.factories[attribute] = ARIA.makeFactory(\r\n                ARIA.normalise(attribute),\r\n                entry[0]\r\n            );\r\n\r\n        });\r\n\r\n    });\r\n\r\n};\r\n\r\n// Make initial factories.\r\nARIA.createFactories();\r\n\r\n/**\r\n * Creates an alias of WAI-ARIA attributes.\r\n *\r\n * @param  {String} source\r\n *         Source attribute for the alias.\r\n * @param  {Array.<String>|String} aliases\r\n *         Either a single alias or an array of aliases.\r\n * @throws {ReferenceError}\r\n *         The source attribute must have a related factory.\r\n */\r\nARIA.addAlias = function (source, aliases) {\r\n\r\n    var suffix = ARIA.getSuffix(ARIA.normalise(source));\r\n\r\n    if (!Array.isArray(aliases)) {\r\n        aliases = [aliases];\r\n    }\r\n\r\n    if (!ARIA.getFactory(suffix)) {\r\n\r\n        throw new ReferenceError(\r\n            \"ARIA.factories.\"\r\n            + suffix\r\n            + \" does not exist\"\r\n        );\r\n\r\n    }\r\n\r\n    aliases.forEach(function (alias) {\r\n\r\n        var normalAlias = ARIA.getSuffix(ARIA.normalise(alias));\r\n\r\n        ARIA.translate[normalAlias] = suffix;\r\n        ARIA.factories[normalAlias] = ARIA.factories[suffix];\r\n\r\n    });\r\n\r\n};\r\n\r\nARIA.addAlias(\"labelledby\", \"labeledby\");\r\n}(window));"],"file":"aria.min.js"}