{"version":3,"sources":["aria.js"],"names":["globalVariable","previousAria","ARIA","factories","Object","create","translate","defineProperty","configurable","enumerable","writable","value","identity","x","arrayFrom","Array","from","arrayLike","map","context","undefined","prototype","call","normalise","attribute","normal","String","toLowerCase","replace","normaliseDescriptor","get","set","normaliser","defineProperties","normalize","noop","fnTest","test","addClassMethods","name","method","parent","this","keys","forEach","key","returnValue","hasSuper","temp","$super","apply","arguments","createClass","Base","proto","Class","init","addMethod","addMethods","constructor","noConflict","getFactory","runFactory","factory","ReferenceError","slice","addAlias","source","aliases","normalSource","isArray","alias","normalAlias","counter","defaultIdentifyPrefix","identify","element","prefix","id","document","getElementById","Property","that","has","setTokens","tokens","setPattern","pattern","isValidToken","token","isValid","length","indexOf","interpret","trim","setAttribute","getAttribute","hasAttribute","remove","removeAttribute","isSetting","toString","State","UndefinedState","Tristate","lists","WeakMap","makeIterator","instance","valueMaker","index","list","[object Object]","iteratorValue","done","DOMEx","type","message","code","DOMException","interpretReference","isNode","Error","List","string","split","values","toArray","add","item","contains","glue","join","push","splice","Math","floor","oldToken","newToken","isReplaced","handler","entries","window","Symbol","iterator","Node","getRef","Reference","ReferenceList","Element","preloadAttributes","readAttributes","observeAttributes","hasOwnProperty","attributes","observer","MutationObserver","mutations","mutation","attributeName","suffix","observe","disconnectAttributes","disconnect","AriaProperty","AriaList","addNodeProperty","getter","entry","property","Constructor"],"mappings":";CACC,SAAUA,GACP,aAEJ,IAAIC,EAAeD,EAAeE,KAK9BA,EAAO,CAMPC,UAAWC,OAAOC,OAAO,MAMzBC,UAAWF,OAAOC,OAAO,OAY7BD,OAAOG,eAAeL,EAAM,UAAW,CACnCM,cAAc,EACdC,YAAY,EACZC,UAAU,EACVC,MAAO,UAYX,IAAIC,EAAW,SAAUC,GACrB,OAAOA,GAgBPC,EAAYC,MAAMC,MAAQ,SAAUC,EAAWC,EAAKC,GAMpD,YAJmBC,WAARF,IACPA,EAAMN,GAGHG,MAAMM,UAAUH,IAAII,KAAKL,EAAWC,EAAKC,IAqBhDI,EAAY,SAAUC,GAEtB,IAGIC,EAAS,QAHAC,OAAOF,GACfG,cACAC,QAAQ,wBAAyB,IAGtC,OAAO1B,EAAKI,UAAUmB,IAAWA,GAIjCI,EAAsB,CAEtBrB,cAAc,EACdC,YAAY,EAEZqB,IAAK,WACD,OAAOP,GAGXQ,IAAK,SAAUC,GACXT,EAAYS,IAKpB5B,OAAO6B,iBAAiB/B,EAAM,CAE1BqB,UAAWM,EAQXK,UAAWL,IASf,IAAIM,EAAO,aAIPC,EACA,SAAWC,KAAKF,GACd,kBACA,KAeN,SAASG,EAAgBC,EAAMC,GAE3B,IAAIC,EAASC,KAAKD,OAEE,iBAATF,EAEPnC,OAAOuC,KAAKJ,GAAMK,QAAQ,SAAUC,GAChCP,EAAgBhB,KAAKoB,KAAMG,EAAKN,EAAKM,KACtCH,MAIHA,KAAKrB,UAAUkB,GAEW,mBAAXC,GACoB,mBAAjBC,EAAOF,IACdH,EAAOC,KAAKG,GAEjB,WAEE,IAEIM,EAFAC,EAAW,WAAYL,KACvBM,EAAON,KAAKO,OAYhB,OATAP,KAAKO,OAASR,EAAOF,GACrBO,EAAcN,EAAOU,MAAMR,KAAMS,WAE7BJ,EACAL,KAAKO,OAASD,SAEPN,KAAKO,OAGTH,GAGTN,EAiBdtC,EAAKkD,YAAc,SAAUC,EAAMC,GAE/B,SAASC,IACL,OAAOb,KAAKc,KAAKN,MAAMR,KAAMS,WAgCjC,OA7BKG,IAEDA,EAAQD,EACRA,EAAOjD,QAIXmD,EAAME,UAAYnB,EAKlBiB,EAAMG,WAAapB,EAMnBiB,EAAMd,OAASY,EAAKhC,UAEpBkC,EAAMlC,UAAYjB,OAAOC,OAAOgD,EAAKhC,WACrCiB,EAAgBhB,KAAKiC,EAAOD,GAE5BC,EAAMlC,UAAUsC,YAAcJ,EAEM,mBAAzBA,EAAMlC,UAAUmC,OACvBD,EAAMlC,UAAUmC,KAAOrB,GAGpBoB,GAWXrD,EAAK0D,WAAa,WAId,OAFA5D,EAAeE,KAAOD,EAEfC,GAaXA,EAAK2D,WAAa,SAAUrC,GAExB,OACItB,EAAKC,UAAUqB,IACZtB,EAAKC,UAAUD,EAAKqB,UAAUC,KAkBzCtB,EAAK4D,WAAa,SAAUtC,GAExB,IAAIuC,EAAU7D,EAAK2D,WAAWrC,GAE9B,IAAKuC,EACD,MAAM,IAAIC,eAAexC,EAAY,gCAGzC,OAAOuC,EAAQb,WAAM9B,EAAWL,MAAMM,UAAU4C,MAAM3C,KAAK6B,UAAW,KAc1EjD,EAAKgE,SAAW,SAAUC,EAAQC,GAE9B,IAAIC,EAAenE,EAAKqB,UAAU4C,GAAQF,MAAM,GAMhD,GAJKlD,MAAMuD,QAAQF,KACfA,EAAU,CAACA,KAGVlE,EAAK2D,WAAWQ,GAEjB,MAAM,IAAIL,eACN,kBACEK,EACA,mBAKVD,EAAQxB,QAAQ,SAAU2B,GAEtB,IAAIC,EAActE,EAAKqB,UAAUgD,GAAON,MAAM,GAE9C/D,EAAKI,UAAUkE,GAAeH,EAC9BnE,EAAKC,UAAUqE,GAAetE,EAAKC,UAAUkE,MAMrD,IAAII,EAAU,EAMdvE,EAAKwE,sBAAwB,qBAe7BxE,EAAKyE,SAAW,SAAUC,EAASC,GAE/B,IAAIC,EAAKF,EAAQE,GAMjB,QAJe1D,IAAXyD,IACAA,EAAS3E,EAAKwE,wBAGbI,EAAI,CAEL,GAEIA,EAAKD,EAASJ,EACdA,GAAW,QAENM,SAASC,eAAeF,IAEjCF,EAAQE,GAAKA,EAIjB,OAAOA,GASX5E,EAAK+E,SAAW/E,EAAKkD,YAAiD,CASlEI,KAAM,SAAUoB,EAASpD,GAErB,IAAI0D,EAAOxC,KAMXwC,EAAKN,QAAUA,EAMfM,EAAK1D,UAAYA,EAEb0D,EAAKC,OACLD,EAAKnD,IAAImD,EAAKpD,OAWlB1B,OAAOG,eAAe2E,EAAM,QAAS,CAEjCpD,IAAK,WACD,OAAOoD,EAAKpD,UAaxBsD,UAAW,SAAUC,GAMjB3C,KAAK2C,OAASvE,EAAUuE,IAU5BC,WAAY,SAAUC,GAQlB7C,KAAK6C,QAAUA,GAcnBC,aAAc,SAAUC,GAEpB,IAAIJ,EAAS3C,KAAK2C,OACdE,EAAU7C,KAAK6C,QACfG,GAAU,EAQd,OANIL,GAAUA,EAAOM,OACjBD,EAAUL,EAAOO,QAAQH,IAAU,EAC5BF,IACPG,EAAUH,EAAQlD,KAAKoD,IAGpBC,GAYXG,UAAW,SAAUlF,GAEjB,OACI,MAACA,EACC,GACAe,OAAOf,GAAOmF,QAaxB/D,IAAK,SAAUpB,GAEX,IAAI8E,EAAQ/C,KAAKmD,UAAUlF,GAEb,KAAV8E,GAAgB/C,KAAK8C,aAAaC,IAClC/C,KAAKqD,aAAaN,IAY1B3D,IAAK,WACD,OAAOY,KAAKmD,UAAUnD,KAAKsD,iBAU/Bb,IAAK,WACD,OAAOzC,KAAKuD,gBAOhBC,OAAQ,WACJxD,KAAKyD,mBAYTJ,aAAc,SAAUpF,GAEf+B,KAAK0D,YAON1D,KAAK0D,WAAY,EAGH,MAFdzF,EAAQe,OAAOf,UAEeS,IAAVT,GAAiC,OAAVA,EACvC+B,KAAKkC,QAAQmB,aAAarD,KAAKlB,UAAWb,GAE1C+B,KAAKyD,kBAGTzD,KAAK0D,WAAY,IAazBJ,aAAc,WACV,OAAOtD,KAAKkC,QAAQoB,aAAatD,KAAKlB,YAU1CyE,aAAc,WACV,OAAOvD,KAAKkC,QAAQqB,aAAavD,KAAKlB,YAO1C2E,gBAAiB,WACbzD,KAAKkC,QAAQuB,gBAAgBzD,KAAKlB,YAUtC6E,SAAU,WACN,OAAO3E,OAAOgB,KAAKZ,UAW3B5B,EAAKoG,MAAQpG,EAAKkD,YAAYlD,EAAK+E,SAA4C,CAY3EO,aAAc,SAAU7E,GAEpB,MACqB,kBAAVA,GACM,SAAVA,GACU,UAAVA,GAaXkF,UAAW,SAAUlF,GAEjB,MACqB,kBAAVA,GACK,IAAVA,EAEa,SAAVA,GAA8B,UAAVA,EACT,SAAVA,EACA,MAclBT,EAAKqG,eAAiBrG,EAAKkD,YAAYlD,EAAKoG,MAAkD,CAO1Fd,aAAc,SAAU7E,GAEpB,YACcS,IAAVT,GACa,cAAVA,GACA+B,KAAKO,OAAOtC,IAcvBkF,UAAW,SAAUlF,GAEjB,YACeS,IAAVT,GAAiC,cAAVA,EACtB,YACA+B,KAAKO,OAAOtC,IAWtBmB,IAAK,WAED,IAAInB,EAAQ+B,KAAKO,SAMjB,MAJc,cAAVtC,IACAA,OAAQS,GAGLT,KAafT,EAAKsG,SAAWtG,EAAKkD,YAAYlD,EAAKoG,MAA4C,CAO9Ed,aAAc,SAAU7E,GACpB,MAAiB,UAAVA,GAAqB+B,KAAKO,OAAOtC,IAY5CkF,UAAW,SAAUlF,GAEjB,MACc,UAAVA,EACEA,EACA+B,KAAKO,OAAOtC,MAa1B,IAAI8F,EAAQ,IAAIC,QAaZC,EAAe,SAAUC,EAAUC,GAEpC,IAAIC,EAAQ,EACRC,EAAON,EAAM3E,IAAI8E,GAAY,GAC7BjB,EAASoB,EAAKpB,OAElB,MAAO,CAEHqB,OAEI,IAAIC,EAAgB,CAChBtG,MAAOkG,EAAWE,EAAMD,GACxBI,KAAMJ,EAAQnB,GAKlB,OAFAmB,GAAS,EAEFG,KAmBdE,EAAQ,SAAUC,EAAMC,GAExB3E,KAAKH,KAAO6E,EACZ1E,KAAK4E,KAAOC,aAAaH,GACzB1E,KAAK2E,QAAUA,GA2UnB,SAASG,EAAmB7G,GAExB,OACIT,EAAKuH,OAAO9G,GACVT,EAAKyE,SAAShE,GACdA,EA7UVwG,EAAM9F,UAAYqG,MAAMrG,UAaxBnB,EAAKyH,KAAOzH,EAAKkD,YAAYlD,EAAK+E,SAAoC,CAKlEzB,KAAM,SAAUoB,EAASpD,GAErB,IAAI0D,EAAOxC,KAEX+D,EAAM1E,IAAImD,EAAM,IAUhB9E,OAAOG,eAAe2E,EAAM,SAAU,CAElCpD,IAAK,WACD,OAAO2E,EAAM3E,IAAIoD,GAAMS,UAK/BjD,KAAKO,OAAO2B,EAASpD,IAgBzBgE,aAAc,SAAUC,GAEpB,GAAc,KAAVA,EAEA,MAAM,IAAI0B,EACN,aACA,8CAKR,GAAI,KAAO9E,KAAKoD,GAEZ,MAAM,IAAI0B,EACN,wBACA,wCAKR,OAAOzE,KAAKO,OAAOwC,IAYvBI,UAAW,SAAUlF,GAEjB,IAAIiH,EAASlF,KAAKO,OAAOtC,GAEzB,OACIiH,EAAOjC,OACLiC,EAAOC,MAAM,OACb,IAgBV9F,IAAK,SAAUpB,GAEX,IAAImH,EAASpF,KAAKmD,UAAUlF,GAE5B+B,KAAKwD,OAAOhD,MAAMR,KAAMA,KAAKqF,WAEzBD,EAAOnC,QACPjD,KAAKsF,IAAI9E,MAAMR,KAAMoF,GAGzBpF,KAAKqD,aAAarD,KAAK2D,aAU3BvE,IAAK,WACD,OAAOY,KAAKmD,UAAUnD,KAAK2D,aAa/BlB,IAAK,SAAU8C,GAEX,YACa7G,IAAT6G,EACEvF,KAAKuD,eACLvD,KAAKwF,SAASD,IAcxB5B,SAAU,SAAU8B,GAMhB,YAJa/G,IAAT+G,IACAA,EAAO,KAGJ1B,EAAM3E,IAAIY,MAAM0F,KAAKD,IAWhCH,IAAK,WAED,IAAIjB,EAAON,EAAM3E,IAAIY,MAEjBS,UAAUwC,SAEV7E,EAAUqC,UAAW,SAAU8E,GAEvBvF,KAAK8C,aAAayC,IAASlB,EAAKnB,QAAQqC,GAAQ,GAChDlB,EAAKsB,KAAKJ,IAGfvF,MAEHA,KAAKqD,aAAarD,KAAK2D,cAa/BH,OAAQ,WAEJ,IACI0B,EADAb,EAAON,EAAM3E,IAAIY,MAGjBS,UAAUwC,QAEV7E,EAAUqC,UAAW,SAAU8E,GAE3B,IAAInB,EAAQpE,KAAK8C,aAAayC,IAASlB,EAAKnB,QAAQqC,GAEhDnB,GAAS,GACTC,EAAKuB,OAAOxB,EAAO,IAGxBpE,MAIY,MAFfkF,EAASlF,KAAK2D,YAGV3D,KAAKyD,kBAELzD,KAAKqD,aAAa6B,KAKtBb,EAAKpB,OAAS,EACdjD,KAAKyD,oBAcb+B,SAAU,SAAUD,GAChB,OAAOvF,KAAK8C,aAAayC,IAASxB,EAAM3E,IAAIY,MAAMkD,QAAQqC,IAAS,GAGvEA,KAAM,SAAUnB,GACZ,OAAOL,EAAM3E,IAAIY,MAAM6F,KAAKC,MAAM1B,KAAW,MAGjDlF,QAAS,SAAU6G,EAAUC,GAEzB,IACI3B,EACAD,EAFA6B,GAAa,EAkBjB,OAdIjG,KAAK8C,aAAaiD,IAAa/F,KAAK8C,aAAakD,KAGjD5B,GADAC,EAAON,EAAM3E,IAAIY,OACJkD,QAAQ6C,KAER,IAET1B,EAAKuB,OAAOxB,EAAO,EAAG4B,GACtBC,GAAa,GAMdA,GAIX/F,QAAS,SAAUgG,EAASzH,GACxBsF,EAAM3E,IAAIY,MAAME,QAAQgG,EAASzH,IAGrC4G,QAAS,SAAU7G,EAAKC,GACpB,OAAOL,EAAU2F,EAAM3E,IAAIY,MAAOxB,EAAKC,IAG3C0H,QAAS,WAEL,OAAOlC,EAAajE,KAAM,SAAUqE,EAAMD,GACtC,MAAO,CAACA,EAAOC,EAAKD,OAK5BnE,KAAM,WAEF,OAAOgE,EAAajE,KAAM,SAAUqE,EAAMD,GACtC,OAAOA,KAKfgB,OAAQ,WAEJ,OAAOnB,EAAajE,KAAM,SAAUqE,EAAMD,GACtC,OAAOC,EAAKD,QAOpBgC,OAAOC,QAAUA,OAAOC,WACxB9I,EAAKyH,KAAKtG,UAAU0H,OAAOC,UAAY9I,EAAKyH,KAAKtG,UAAUyG,QAG/D5H,EAAKuH,OAAS,SAAU9G,GACpB,OAAQA,aAAiBsI,MAG7B/I,EAAKgJ,OAAS,SAAUpE,GACpB,OAAOC,SAASC,eAAeF,IAanC5E,EAAKiJ,UAAYjJ,EAAKkD,YAAYlD,EAAK+E,SAAU,CAE7CY,UAAW,SAAUlF,GACjB,OAAO6G,EAAmB7G,IAG9BmB,IAAK,WACD,OAAO5B,EAAKgJ,OAAOxG,KAAKsD,mBAKhC9F,EAAKkJ,cAAgBlJ,EAAKkD,YAAYlD,EAAKyH,KAAM,CAE7C9B,UAAW,SAAUlF,GAUjB,MARqB,iBAAVA,EACPA,EAAQ+B,KAAKO,OAAOtC,GACbT,EAAKuH,OAAO9G,GACnBA,EAAQ,CAACT,EAAKyE,SAAShE,IAChBA,EAAMgF,SACbhF,EAAQG,EAAUH,EAAO6G,IAGtB7G,GAIXmB,IAAK,WACD,OAAOY,KAAKqF,QAAQ7H,EAAKgJ,SAG7BhB,SAAU,SAAUD,GAChB,OAAOvF,KAAKO,OAAOP,KAAKmD,UAAUoC,GAAM,IAAM,OAKtD/H,EAAKmJ,QAAUnJ,EAAKkD,YAAY,CAE5BI,KAAM,SAAUoB,GAEZlC,KAAKkC,QAAUA,EACflC,KAAK4G,oBACL5G,KAAK6G,iBACL7G,KAAK8G,qBAITF,kBAAmB,WAEflJ,OAAOuC,KAAKzC,EAAKC,WAAWyC,QAAQ,SAAUpB,GAE1C,IAAIb,EAEJP,OAAOG,eAAemC,KAAMlB,EAAW,CAEnCM,IAAK,WAYD,OAVKnB,IAEDA,EAAQT,EAAK4D,WACTtC,EACAkB,KAAKkC,QACL1E,EAAKqB,UAAUC,KAKhBb,GAIXoB,IAAK,SAAUpB,GACX+B,KAAKlB,GAAWO,IAAIpB,OAK7B+B,OAKP6G,eAAgB,WAEZ,IAAIE,EAAiBrJ,OAAOiB,UAAUoI,eAEtC3I,EAAU4B,KAAKkC,QAAQ8E,WAAY,SAAUlI,GAEzC,IAAIe,EAAOf,EAAUe,KAAKX,QAAQ,UAAW,IAEzC6H,EAAenI,KAAKoB,KAAMH,KAC1BG,KAAKH,GAAQf,EAAUb,QAG5B+B,OAIP8G,kBAAmB,WAEf,IAAI5E,EAAUlC,KAAKkC,QACf+E,EAAW,IAAIC,iBAAiB,SAAUC,GAE1CA,EAAUjH,QAAQ,SAAUkH,GAExB,IAAItI,EAAYsI,EAASC,cACrBC,GAAUxI,GAAa,IAAIyC,MAAM,GAGf,eAAlB6F,EAAS1C,MACNlH,EAAKC,UAAU6J,KAElBtH,KAAKsH,GAAUpF,EAAQoB,aAAaxE,QAOhDmI,EAASM,QAAQrF,EAAS,CACtB8E,YAAY,IAGhBhH,KAAKiH,SAAWA,GAIpBO,qBAAsB,WAClBxH,KAAKiH,SAASQ,gBAKtB,IAoBIC,EAAelK,EAAK+E,SACpBoF,EAAWnK,EAAKyH,KAsIpB,SAAS2C,EAAgB/H,EAAMsE,GAE3BzG,OAAOG,eAAe0I,KAAK5H,UAAWkB,EAAM,CAExC/B,cAAc,EAEdsB,IAAK,SAASyI,IAcV,OAZAnK,OAAOG,eAAe0I,KAAK5H,UAAWkB,EAAM,CACxCT,SAAKV,IAGThB,OAAOG,eAAemC,KAAMH,EAAM,CAC9B5B,MAAOkG,EAAWnE,QAGtBtC,OAAOG,eAAe0I,KAAK5H,UAAWkB,EAAM,CACxCT,IAAKyI,IAGF7H,KAAKH,MAzJH,CACjB,CAAC6H,EAAc,CACX,eACA,QACA,cACA,kBACA,cAKJ,CAAClK,EAAKiJ,UAAW,CACb,mBACA,UACA,iBAEJ,CAACjJ,EAAKkJ,cAAe,CACjB,WACA,cACA,SACA,aACA,SAEJ,CAAClJ,EAAKoG,MAAO,CACT,SACA,OACA,WACA,QACA,YACA,kBACA,WACA,aAEJ,CAACpG,EAAKsG,SAAU,CACZ,UACA,YAEJ,CAACtG,EAAKqG,eAAgB,CAClB,WACA,UACA,SACA,aAEJ,CAAC6D,EAAc,CACX,WACA,WACA,UACA,QACA,WACA,WACA,WACA,UACA,gBACDhJ,EAAW,SACd,CAACgJ,EAAc,CACX,WACA,WACA,iBACDhJ,EAAW,yBACd,CAACgJ,EAAc,CAAC,gBAAiB,CAC7B,OACA,SACA,OACA,SAEJ,CAACA,EAAc,CAAC,WAAY,CACxB,QACA,OACA,OACA,OACA,WACA,OACA,SAEJ,CAACA,EAAc,CAAC,YAAa,CACzB,QACA,OACA,OACA,UACA,OACA,OACA,WAEJ,CAACA,EAAc,CAAC,WAAY,CACxB,QACA,OACA,UACA,aAEJ,CAACA,EAAc,CAAC,QAAS,CACrB,MACA,YACA,WAEJ,CAACA,EAAc,CAAC,eAAgB,MAC5BhJ,EACA,YACA,aACA,aAEJ,CAACgJ,EAAc,CAAC,QAAS,CACrB,OACA,YACA,aACA,UAEJ,CAACC,EAAU,CAAC,cAAe,CACvB,OACA,OACA,UACA,OACA,OACA,UAEJ,CAACA,EAAU,CAAC,YAAa,CACrB,YACA,MACA,WACA,UAIOzH,QAAQ,SAAU4H,GAE7BA,EAAM,GAAG5H,QAAQ,SAAU6H,GAlJb,IAAUC,EAAarF,EAAQE,EAmJzCrF,EAAKC,UAAUsK,IAnJKC,EAmJmBF,EAAM,GAnJZnF,EAmJgBmF,EAAM,GAnJdjF,EAmJkBiF,EAAM,GAjJ9D,SAAU5F,EAASpD,GAEtB,IAAIiJ,EAAW,IAAIC,EAAY9F,EAASpD,GAUxC,OARI6D,GAAUA,EAAOM,QACjB8E,EAASrF,UAAUC,GAGnBE,GACAkF,EAASnF,WAAWC,GAGjBkF,QA0IfvK,EAAKgE,SAAS,aAAc,aA+B5BoG,EAAgB,OAAQ,SAAUnJ,GAC9B,OAAO,IAAIjB,EAAKmJ,QAAQlI,KAG5BmJ,EAAgB,OAAQ,SAAUnJ,GAC9B,OAAO,IAAIkJ,EAASlJ,EAAS,UAGjCnB,EAAeE,KAAOA,EAv/CtB,CAw/CE4I","sourcesContent":["/*! ariajs - v1.0.0 - MIT license - 2018-10-11 */\n(function (globalVariable) {\n    \"use strict\";\n\nvar previousAria = globalVariable.ARIA;\n\n/**\n * @namespace\n */\nvar ARIA = {\n\n    /**\n     * Collection of factories for creating WAI-ARIA libraries.\n     * @type {Object}\n     */\n    factories: Object.create(null),\n\n    /**\n     * Map of all mis-spellings and aliases.\n     * @type {Object}\n     */\n    translate: Object.create(null)\n\n};\n\n/**\n * The version of the library.\n *\n * @memberof ARIA\n * @type {String}\n * @constant\n * @name VERSION\n */\nObject.defineProperty(ARIA, \"VERSION\", {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: \"1.0.0\"\n});\n\n/**\n * A function that returns the given variable unchanged.\n *\n * @private\n * @param   {?} x\n *          Variable to return.\n * @return  {?}\n *          Unmodified original variable.\n */\nvar identity = function (x) {\n    return x;\n};\n\n/**\n * Simple fall-back for Array.from.\n *\n * @private\n * @param   {Object} arrayLike\n *          Array-like structure.\n * @param   {Function} [map=identity]\n *          Optional function to convert the values.\n * @param   {?} [context]\n *          Optional context for the map function.\n * @return  {Array}\n *          Array made from the iven array-like structure.\n */\nvar arrayFrom = Array.from || function (arrayLike, map, context) {\n\n    if (typeof map === undefined) {\n        map = identity;\n    }\n\n    return Array.prototype.map.call(arrayLike, map, context);\n\n};\n\n/**\n * Normalises an attribute name so that it is in lowercase and always starts\n * with \"aria-\". This function has the alias of {@link ARIA.normalize} and\n * changing one will update the other.\n *\n * @memberof ARIA\n * @param    {String} attribute\n *           Attribute to normalise.\n * @return   {String}\n *           Normalised attribute.\n *\n * @example\n * ARIA.normalise(\"aria-busy\"); // -> \"aria-busy\"\n * ARIA.normalise(\"busy\"); // -> \"aria-busy\"\n * ARIA.normalise(\"  busy  \"); // -> \"aria-busy\"\n * ARIA.normalise(\"BUSY\"); // -> \"aria-busy\"\n */\nvar normalise = function (attribute) {\n\n    var string = String(attribute)\n        .toLowerCase()\n        .replace(/^\\s*(?:aria\\-)?|\\s*$/g, \"\");\n    var normal = \"aria-\" + string;\n\n    return ARIA.translate[normal] || normal;\n\n};\n\nvar normaliseDescriptor = {\n\n    configurable: false,\n    enumerable: true,\n\n    get: function () {\n        return normalise;\n    },\n\n    set: function (normaliser) {\n        normalise = normaliser;\n    }\n\n};\n\nObject.defineProperties(ARIA, {\n\n    normalise: normaliseDescriptor,\n\n    /**\n     * An alias of {@link ARIA.normalise}.\n     *\n     * @memberof ARIA\n     * @function\n     */\n    normalize: normaliseDescriptor\n\n});\n\n/**\n * A function that does nothing.\n *\n * @private\n */\nvar noop = function () {\n    return;\n};\n\nvar fnTest = (\n    (/return/).test(noop)\n    ? (/[\\.'\"]\\$super\\b/)\n    : (/.*/)\n);\n\n/**\n * Adds one or more methods to the class.\n *\n * @memberof Class\n * @name     addMethod\n * @static\n * @param    {Object|String} name\n *           Either the name of the method to add or an object of names to\n *           methods.\n * @param    {Function} [method]\n *           Method to add to the class.\n */\nfunction addClassMethods(name, method) {\n\n    var parent = this.parent;\n\n    if (typeof name === \"object\") {\n\n        Object.keys(name).forEach(function (key) {\n            addClassMethods.call(this, key, name[key]);\n        }, this);\n\n    } else {\n\n        this.prototype[name] = (\n            (\n                typeof method === \"function\"\n                && typeof parent[name] === \"function\"\n                && fnTest.test(method)\n            )\n            ? function () {\n\n                var hasSuper = \"$super\" in this;\n                var temp = this.$super;\n                var returnValue = null;\n\n                this.$super = parent[name];\n                returnValue = method.apply(this, arguments);\n\n                if (hasSuper) {\n                    this.$super = temp;\n                } else {\n                    delete this.$super;\n                }\n\n                return returnValue;\n\n            }\n            : method\n        );\n\n    }\n\n}\n\n/**\n * Creates a Class.\n *\n * @param  {Class} [Base]\n *         Optional parent class.\n * @param  {Object} proto\n *         Methods to add to the created Class' prototype.\n * @return {Class}\n *         Class created.\n */\nARIA.createClass = function (Base, proto) {\n\n    function Class() {\n        return this.init.apply(this, arguments);\n    }\n\n    if (!proto) {\n\n        proto = Base;\n        Base = Object;\n\n    }\n\n    Class.addMethod = addClassMethods;\n\n    /**\n     * Alias of {@link Class.addMethod}\n     */\n    Class.addMethods = addClassMethods;\n\n    /**\n     * Reference to the prototype of the Class' super-class.\n     * @type {Object}\n     */\n    Class.parent = Base.prototype;\n\n    Class.prototype = Object.create(Base.prototype);\n    addClassMethods.call(Class, proto);\n\n    Class.prototype.constructor = Class;\n\n    if (typeof Class.prototype.init !== \"function\") {\n        Class.prototype.init = noop;\n    }\n\n    return Class;\n\n};\n\n/**\n * Removes the {@link ARIA} namespace from the global object and restores\n * any previous value that may have been there.\n *\n * @return {Object}\n *         The {@link ARIA} namespace.\n */\nARIA.noConflict = function () {\n\n    globalVariable.ARIA = previousAria;\n\n    return ARIA;\n\n};\n\n/**\n * Gets the factory from {@link ARIA.factories} that matches either the given\n * attribute or the normalised version (see {@link ARIA.normalise}).\n *\n * @param  {String} attribute\n *         Attribute whose factory should be returned.\n * @return {Function}\n *         Factory for creating the attribute.\n */\nARIA.getFactory = function (attribute) {\n\n    return (\n        ARIA.factories[attribute]\n        || ARIA.factories[ARIA.normalise(attribute)]\n    );\n\n};\n\n/**\n * Executes the factory for the given attribute, passing in given parameters.\n * See {@link ARIA.getFactory}.\n *\n * @param  {String} attribute\n *         Attribute whose factory should be executed.\n * @param  {...?} [arguments]\n *         Optional parameters to pass to the factory.\n * @return {?}\n *         Result of executing the factory.\n * @throws {ReferenceError}\n *         There must be a factory for the given attribute.\n */\nARIA.runFactory = function (attribute) {\n\n    var factory = ARIA.getFactory(attribute);\n\n    if (!factory) {\n        throw new ReferenceError(attribute + \" is not a recognised factory\");\n    }\n\n    return factory.apply(undefined, Array.prototype.slice.call(arguments, 1));\n\n};\n\n/**\n * Creates an alias of WAI-ARIA attributes.\n *\n * @param  {String} source\n *         Source attribute for the alias.\n * @param  {Array.<String>|String} aliases\n *         Either a single alias or an array of aliases.\n * @throws {ReferenceError}\n *         The source attribute must have a related factory.\n */\nARIA.addAlias = function (source, aliases) {\n\n    var normalSource = ARIA.normalise(source).slice(5);\n\n    if (!Array.isArray(aliases)) {\n        aliases = [aliases];\n    }\n\n    if (!ARIA.getFactory(normalSource)) {\n\n        throw new ReferenceError(\n            \"ARIA.factories.\"\n            + normalSource\n            + \" does not exist\"\n        );\n\n    }\n\n    aliases.forEach(function (alias) {\n\n        var normalAlias = ARIA.normalise(alias).slice(5);\n\n        ARIA.translate[normalAlias] = normalSource;\n        ARIA.factories[normalAlias] = ARIA.factories[normalSource];\n\n    });\n\n};\n\nvar counter = 0;\n\n/**\n * The default prefix for {@link ARIA.identify}.\n * @type {String}\n */\nARIA.defaultIdentifyPrefix = \"anonymous-element-\";\n\n/**\n * Returns the ID of the given element. If the element does not have an ID, a\n * unique one is generated. THe Generated ID is the given prefix and an\n * incrementing counter.\n * Pro tip: The HTML specs state that element IDs should start with a letter.\n *\n * @param  {Element} element\n *         Element whose ID should be returned.\n * @param  {String} [prefix=ARIA.defaultIdentifyPrefix]\n *         Prefix for the generated ID.\n * @return {String}\n *         The ID of the element.\n */\nARIA.identify = function (element, prefix) {\n\n    var id = element.id;\n\n    if (prefix === undefined) {\n        prefix = ARIA.defaultIdentifyPrefix;\n    }\n\n    if (!id) {\n\n        do {\n\n            id = prefix + counter;\n            counter += 1;\n\n        } while (document.getElementById(id));\n\n        element.id = id;\n\n    }\n\n    return id;\n\n};\n\n/**\n * Handles basic WAI-ARIA properties.\n *\n * @class ARIA.Property\n */\nARIA.Property = ARIA.createClass(/** @lends ARIA.Property.prototype */{\n\n    /**\n     * @constructs ARIA.Property\n     * @param      {Element} element\n     *             Element whose attribute should be handled.\n     * @param      {String} attribute\n     *             Name of the attribute to handle.\n     */\n    init: function (element, attribute) {\n\n        var that = this;\n\n        /**\n         * Element whose attribute is being handled.\n         * @type {Element}\n         */\n        that.element = element;\n\n        /**\n         * Attribute being handled.\n         * @type {String}\n         */\n        that.attribute = attribute;\n\n        if (that.has()) {\n            that.set(that.get());\n        }\n\n        /**\n         * The value of the {@link ARIA.Property#attribute}.\n         *\n         * @memberof ARIA.Property\n         * @instance\n         * @name value\n         * @type {String}\n         */\n        Object.defineProperty(that, \"value\", {\n\n            get: function () {\n                return that.get();\n            }\n\n        });\n\n    },\n\n    /**\n     * Sets the white-list of allowed tokens for this property.\n     *\n     * @param {Array.<String>} tokens\n     *        White-list of tokens.\n     */\n    setTokens: function (tokens) {\n\n        /**\n         * White-list of valid tokens.\n         * @type {Array.<String>}\n         */\n        this.tokens = arrayFrom(tokens);\n\n    },\n\n    /**\n     * Sets the pattern to work out if values are valid.\n     *\n     * @param {RegExp} pattern\n     *        Pattern for the values.\n     */\n    setPattern: function (pattern) {\n\n        /**\n         * Pattern that values have to match. Be aware that\n         * {@link ARIA.Property#tokens} will override this pattern even if they\n         * don't match.\n         * @type {RegExp}\n         */\n        this.pattern = pattern;\n\n    },\n\n    /**\n     * Checks to see if the given token is valid for this current property. This\n     * function checks against {@link ARIA.Property#tokens} and\n     * {@link ARIA.Property#pattern} if they're set.\n     *\n     * @param  {String} token\n     *         Token to check.\n     * @return {Boolean}\n     *         true if the token is valid, false otherwise.\n     */\n    isValidToken: function (token) {\n\n        var tokens = this.tokens;\n        var pattern = this.pattern;\n        var isValid = true;\n\n        if (tokens && tokens.length) {\n            isValid = tokens.indexOf(token) > -1;\n        } else if (pattern) {\n            isValid = pattern.test(token);\n        }\n\n        return isValid;\n\n    },\n\n    /**\n     * Interprets the given value so it can be set.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {String}\n     *         String based on the value.\n     */\n    interpret: function (value) {\n\n        return (\n            (value === null || value === undefined)\n            ? \"\"\n            : String(value).trim()\n        );\n\n    },\n\n    /**\n     * Sets {@link ARIA.Property#attribute} to the given value, once\n     * interpretted (see {@link ARIA.Property#interpret}) and validated (see\n     * {@link ARIA.Property#isValidToken}).\n     *\n     * @param {?} value\n     *        Value to set.\n     */\n    set: function (value) {\n\n        var token = this.interpret(value);\n// console.log(\"value = %o, token = %o, isValid = %o\", value, token, this.isValidToken(token));\n        if (token !== \"\" && this.isValidToken(token)) {\n            this.setAttribute(token);\n        }\n\n    },\n\n    /**\n     * Gets the value of {@link ARIA.Property#attribute} and interprets it\n     * (see {@link ARIA.Property#interpret}).\n     *\n     * @return {String}\n     *         Interpretted value of {@link ARIA.Property#attribute}.\n     */\n    get: function () {\n        return this.interpret(this.getAttribute());\n    },\n\n    /**\n     * Checks whether or not {@link ARIA.Property#attribute} is set on\n     * {@link ARIA.Property#element}.\n     *\n     * @return {Boolean}\n     *         true if the attribute is set, false otherwise.\n     */\n    has: function () {\n        return this.hasAttribute();\n    },\n\n    /**\n     * Removes {@link ARIA.Property#attribute} from\n     * {@link ARIA.Property#element}.\n     */\n    remove: function () {\n        this.removeAttribute();\n    },\n\n    /**\n     * Sets the value of {@link ARIA.Property#attribute}. This method bypasses\n     * the validation and interpretation processes of {@link ARIA.Property#set}.\n     * If value is empty (a falsy valid in JavaScript, but neither false nor 0)\n     * then the attribute is removed.\n     *\n     * @param {String} value\n     *        Value of the attribute to set.\n     */\n    setAttribute: function (value) {\n\n        if (!this.isSetting) {\n\n            /**\n             * A flag set while the setting is taking place. Prevents infinite\n             * loops caused by MutationObservers.\n             * @type {Boolean}\n             */\n            this.isSetting = true;\n            value = String(value);\n\n            if (value !== \"\" || value !== undefined || value !== null) {\n                this.element.setAttribute(this.attribute, value);\n            } else {\n                this.removeAttribute();\n            }\n\n            this.isSetting = false;\n\n        }\n\n    },\n\n    /**\n     * Gets the value of {@link ARIA.Property#attribute}. THis bypasses the\n     * interpretation of {@link ARIA.Property#get}.\n     *\n     * @return {String|null}\n     *         Value of the attribute or null if the attribute is not set.\n     */\n    getAttribute: function () {\n        return this.element.getAttribute(this.attribute);\n    },\n\n    /**\n     * Checks to see if {@link ARIA.Property#element} has\n     * {@link ARIA.Property#attribute}.\n     *\n     * @return {Boolean}\n     *         true if the attribute is set, false otherwise.\n     */\n    hasAttribute: function () {\n        return this.element.hasAttribute(this.attribute);\n    },\n\n    /**\n     * Removes {@link ARIA.Property#attribute} from\n     * {@link ARIA.Property#element}.\n     */\n    removeAttribute: function () {\n        this.element.removeAttribute(this.attribute);\n    },\n\n    /**\n     * Returns the value of {@link ARIA.Property#attribute} as a string. See\n     * {@link ARIA.Property#get}.\n     *\n     * @return {String}\n     *         Value of the attribute.\n     */\n    toString: function () {\n        return String(this.get());\n    }\n\n});\n\n/**\n * Handles WAI-ARIA states.\n *\n * @class ARIA.State\n * @extends ARIA.Property\n */\nARIA.State = ARIA.createClass(ARIA.Property, /** @lends ARIA.State.prototype */{\n\n    /**\n     * Ensures that the given value is either a boolean or a string of \"true\" or\n     * \"false\". {@link ARIA.Property#tokens} and {@link ARIA.Property#pattern}\n     * are ignored.\n     *\n     * @param  {?} value\n     *         Value to check.\n     * @return {Boolean}\n     *         true if the token is valid, false otherwise.\n     */\n    isValidToken: function (value) {\n\n        return (\n            typeof value === \"boolean\"\n            || value === \"true\"\n            || value === \"false\"\n        );\n\n    },\n\n    /**\n     * Coerces the given value into a boolean.\n     *\n     * @param  {?} value\n     *         Value to coerce.\n     * @return {Boolean|String}\n     *         Coerced boolean or an empty string.\n     */\n    interpret: function (value) {\n\n        return (\n            typeof value === \"boolean\"\n            ? value === true\n            : (\n                (value === \"true\" || value === \"false\")\n                ? value === \"true\"\n                : \"\"\n            )\n        )\n\n    }\n\n});\n\n/**\n * Handles a WAI-ARIA state that can be true or false but can also be undefined.\n *\n * @class ARIA.UndefinedState\n * @extends ARIA.State\n */\nARIA.UndefinedState = ARIA.createClass(ARIA.State, /** @lends ARIA.UndefinedState.prototype */{\n\n    /**\n     * Allows for true, false or undefined.\n     *\n     * @inheritDoc\n     */\n    isValidToken: function (value) {\n\n        return (\n            value === undefined\n            || value === \"undefined\"\n            || this.$super(value)\n        );\n\n    },\n\n    /**\n     * Interprets undefined as \"undefined.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Boolean|String}\n     *         Either the boolean value, \"undefined\" or an empty string if the\n     *         value is not understood.\n     */\n    interpret: function (value) {\n\n        return (\n            (value === undefined || value === \"undefined\")\n            ? \"undefined\"\n            : this.$super(value)\n        );\n\n    },\n\n    /**\n     * Returns a boolean or undefined.\n     *\n     * @return {Boolean|undefined}\n     *         Value of the attribute.\n     */\n    get: function () {\n\n        var value = this.$super();\n\n        if (value === \"undefined\") {\n            value = undefined;\n        }\n\n        return value;\n\n    }\n\n});\n\n/**\n * Handles WAI-ARIA tristates. That is, a state that can be either true, false\n * or \"mixed\".\n *\n * @class ARIA.Tristate\n * @extends ARIA.State\n */\nARIA.Tristate = ARIA.createClass(ARIA.State, /** @lends ARIA.Tristate.prototype */{\n\n    /**\n     * Allows the token \"mixed\".\n     *\n     * @inheritDoc\n     */\n    isValidToken: function (value) {\n        return value === \"mixed\" || this.$super(value);\n    },\n\n    /**\n     * Allows the token \"mixed\".\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Boolean|String}\n     *         Either the boolean value, \"mixed\" or an empty string if the value\n     *         is not understood.\n     */\n    interpret: function (value) {\n\n        return (\n            value === \"mixed\"\n            ? value\n            : this.$super(value)\n        );\n\n    }\n\n});\n\n/**\n * The arrays for {@link ARIA.List} instances. This prevents the array from\n * being exposed and manipulated.\n * @private\n * @type {WeakMap}\n */\nvar lists = new WeakMap();\n\n/**\n * Creates an iterator.\n *\n * @private\n * @param   {ARIA.List} instance\n *          Instance that should gain an iterator.\n * @param   {Function} valueMaker\n *          Function to get the iterator value from the item.\n * @return  {Object}\n *          Iterator response.\n */\nvar makeIterator = function (instance, valueMaker) {\n\n   var index = 0;\n   var list = lists.get(instance) | [];\n   var length = list.length;\n\n   return {\n\n       next() {\n\n           var iteratorValue = {\n               value: valueMaker(list, index),\n               done: index < length\n           };\n\n           index += 1;\n\n           return iteratorValue;\n\n       }\n\n   };\n\n};\n\n/**\n * A version of DOMException that we can actually create.\n *\n * @class\n * @private\n * @extends Error\n * @param   {String} type\n *          Type of exception.\n * @param   {String} message\n *          Message for the exception.\n */\nvar DOMEx = function (type, message) {\n\n    this.name = type;\n    this.code = DOMException[type];\n    this.message = message;\n\n};\nDOMEx.prototype = Error.prototype;\n// DOMEx taken from:\n// https://github.com/yola/classlist-polyfill/blob/master/src/index.js\n\n/**\n * Handles a WAI-ARIA attribute that should be a space-separated list. This is\n * moddled on DOMTokenList (such as classList) so it will only accept unique\n * values and will throw errors for invalid values (see\n * {@link ARIA.List#isValidToken}).\n *\n * @class ARIA.List\n * @extends ARIA.Property\n */\nARIA.List = ARIA.createClass(ARIA.Property, /** ARIA.List.prototype */{\n\n    /**\n     * @inheritDoc\n     */\n    init: function (element, attribute) {\n\n        let that = this;\n\n        lists.set(that, []);\n\n        /**\n         * The number of items in this list.\n         *\n         * @name length\n         * @memberof ARIA.List\n         * @instance\n         * @type {Number}\n         */\n        Object.defineProperty(that, \"length\", {\n\n            get: function () {\n                return lists.get(that).length;\n            }\n\n        });\n\n        this.$super(element, attribute);\n\n    },\n\n    /**\n     * Ensures that the token is valid.\n     *\n     * @param  {?} token\n     *         Token to check.\n     * @return {Boolean}\n     *         true if the token is valid, false otherwise.\n     * @throws {DOMEx}\n     *         Given token cannot be an empty string.\n     * @throws {DOMEx}\n     *         Given token cannot contain a space.\n     */\n    isValidToken: function (token) {\n\n        if (token === \"\") {\n\n            throw new DOMEx(\n                \"SYNTAX_ERR\",\n                \"An invalid or illegal string was specified\"\n            );\n\n        }\n\n        if ((/\\s/).test(token)) {\n\n            throw new DOMEx(\n                \"INVALID_CHARACTER_ERR\",\n                \"String contains an invalid character\"\n            );\n\n        }\n\n        return this.$super(token);\n\n    },\n\n    /**\n     * Coerces the values into a string and splits it at the spaces.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Array.<String>}\n     *         Array of strings.\n     */\n    interpret: function (value) {\n\n        var string = this.$super(value);\n\n        return (\n            string.length\n            ? string.split(/\\s+/)\n            : []\n        );\n\n    },\n\n    /**\n     * Sets the value of the list to be the given value, removing all previous\n     * values first. To add to the previous values, use {@link ARIA.List#add}.\n     * The values are interpretted as an array (see {@link ARIA.List#interpret}\n     * and validated (see {@link ARIA.List#isValidToken}); only unique values\n     * are added.\n     *\n     * @param {?} value\n     *        Value(s) to add. If the given value is a string, it is assumed to\n     *        be a space-separated list.\n     */\n    set: function (value) {\n\n        var values = this.interpret(value);\n\n        this.remove.apply(this, this.toArray());\n\n        if (values.length) {\n            this.add.apply(this, values);\n        }\n\n        this.setAttribute(this.toString());\n\n    },\n\n    /**\n     * Gets the value of the attribute as an array.\n     *\n     * @return {Array.<String>}\n     *         Value of the attribute as an array.\n     */\n    get: function () {\n        return this.interpret(this.toString());\n    },\n\n    /**\n     * Checks to see if the attribute is set. If a parameter is passed, the list\n     * is checked to see if it contains the value.\n     *\n     * @param  {String} [item]\n     *         Optional value to check.\n     * @return {Boolean}\n     *         true if the attribute exists or the value is in the list, false\n     *         otherwise.\n     */\n    has: function (item) {\n\n        return (\n            item === undefined\n            ? this.hasAttribute()\n            : this.contains(item)\n        );\n\n    },\n\n    /**\n     * Converts the attribute into a string. Optionally, a string can be passed\n     * to be used as the glue for the array.\n     *\n     * @param  {String} [glue=\" \"]\n     *         Optional glue to use to join the array.\n     * @return {String}\n     *         String from the list.\n     */\n    toString: function (glue) {\n\n        if (glue === undefined) {\n            glue = \" \";\n        }\n\n        return lists.get(this).join(glue);\n\n    },\n\n    /**\n     * Adds the given values to the list. Items are only added if they're valid\n     * (see {@link ARIA.List#isValidToken}) and not already in the list.\n     *\n     * @param {String} ...arguments\n     *        Arguments to add.\n     */\n    add: function () {\n\n        var list = lists.get(this);\n\n        if (arguments.length) {\n\n            arrayFrom(arguments, function (item) {\n\n                if (this.isValidToken(item) && list.indexOf(item) < 0) {\n                    list.push(item);\n                }\n\n            }, this);\n\n            this.setAttribute(this.toString());\n\n        }\n\n    },\n\n    /**\n     * Either removes one or more values from the list or the attribute itself\n     * if no parameters are passed.\n     *\n     * @param {String} [...arguments]\n     *        Optional values to remove.\n     */\n    remove: function () {\n\n        var list = lists.get(this);\n        var string;\n\n        if (arguments.length) {\n\n            arrayFrom(arguments, function (item) {\n\n                var index = this.isValidToken(item) && list.indexOf(item);\n\n                if (index > -1) {\n                    list.splice(index, 1);\n                }\n\n            }, this);\n\n            string = this.toString();\n\n            if (string === \"\") {\n                this.removeAttribute();\n            } else {\n                this.setAttribute(string);\n            }\n\n        } else {\n\n            list.length = 0;\n            this.removeAttribute();\n\n        }\n\n    },\n\n    /**\n     * Checks to see if the given item is within the list.\n     *\n     * @param  {String} item\n     *         Item to check for.\n     * @return {Boolean}\n     *         true if the item is within the list, false otherwise.\n     */\n    contains: function (item) {\n        return this.isValidToken(item) && lists.get(this).indexOf(item) > -1;\n    },\n\n    item: function (index) {\n        return lists.get(this)[Math.floor(index)] || null;\n    },\n\n    replace: function (oldToken, newToken) {\n\n        var isReplaced = false;\n        var list;\n        var index;\n\n        if (this.isValidToken(oldToken) && this.isValidToken(newToken)) {\n\n            list = lists.get(this);\n            index = list.indexOf(oldToken);\n\n            if (index > -1) {\n\n                list.splice(index, 1, newToken);\n                isReplaced = true;\n\n            }\n\n        }\n\n        return isReplaced;\n\n    },\n\n    forEach: function (handler, context) {\n        lists.get(this).forEach(handler, context);\n    },\n\n    toArray: function (map, context) {\n        return arrayFrom(lists.get(this), map, context);\n    },\n\n    entries: function () {\n\n        return makeIterator(this, function (list, index) {\n            return [index, list[index]];\n        });\n\n    },\n\n    keys: function () {\n\n        return makeIterator(this, function (list, index) {\n            return index;\n        });\n\n    },\n\n    values: function () {\n\n        return makeIterator(this, function (list, index) {\n            return list[index];\n        });\n\n    }\n\n});\n\nif (window.Symbol && Symbol.iterator) {\n    ARIA.List.prototype[Symbol.iterator] = ARIA.List.prototype.values;\n}\n\nARIA.isNode = function (value) {\n    return (value instanceof Node);\n};\n\nARIA.getRef = function (id) {\n    return document.getElementById(id);\n};\n\nfunction interpretReference(value) {\n\n    return (\n        ARIA.isNode(value)\n        ? ARIA.identify(value)\n        : value\n    );\n\n}\n\nARIA.Reference = ARIA.createClass(ARIA.Property, {\n\n    interpret: function (value) {\n        return interpretReference(value);\n    },\n\n    get: function () {\n        return ARIA.getRef(this.getAttribute());\n    }\n\n});\n\nARIA.ReferenceList = ARIA.createClass(ARIA.List, {\n\n    interpret: function (value) {\n\n        if (typeof value === \"string\") {\n            value = this.$super(value);\n        } else if (ARIA.isNode(value)) {\n            value = [ARIA.identify(value)];\n        } else if (value.length) {\n            value = arrayFrom(value, interpretReference);\n        }\n\n        return value;\n\n    },\n\n    get: function () {\n        return this.toArray(ARIA.getRef);\n    },\n\n    contains: function (item) {\n        return this.$super(this.interpret(item)[0] || \"\");\n    }\n\n});\n\nARIA.Element = ARIA.createClass({\n\n    init: function (element) {\n\n        this.element = element;\n        this.preloadAttributes();\n        this.readAttributes();\n        this.observeAttributes();\n\n    },\n\n    preloadAttributes: function () {\n\n        Object.keys(ARIA.factories).forEach(function (attribute) {\n\n            var value;\n\n            Object.defineProperty(this, attribute, {\n\n                get: function () {\n\n                    if (!value) {\n\n                        value = ARIA.runFactory(\n                            attribute,\n                            this.element,\n                            ARIA.normalise(attribute)\n                        );\n\n                    }\n\n                    return value;\n\n                },\n\n                set: function (value) {\n                    this[attribute].set(value);\n                }\n\n            });\n\n        }, this);\n\n\n    },\n\n    readAttributes: function () {\n\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n        arrayFrom(this.element.attributes, function (attribute) {\n\n            var name = attribute.name.replace(/^aria\\-/, \"\");\n\n            if (hasOwnProperty.call(this, name)) {\n                this[name] = attribute.value;\n            }\n\n        }, this);\n\n    },\n\n    observeAttributes: function () {\n\n        var element = this.element;\n        var observer = new MutationObserver(function (mutations) {\n\n            mutations.forEach(function (mutation) {\n\n                var attribute = mutation.attributeName;\n                var suffix = (attribute || \"\").slice(5);\n\n                if (\n                    mutation.type === \"attributes\"\n                    && ARIA.factories[suffix]\n                ) {\n                    this[suffix] = element.getAttribute(attribute);\n                }\n\n            });\n\n        });\n\n        observer.observe(element, {\n            attributes: true\n        });\n\n        this.observer = observer;\n\n    },\n\n    disconnectAttributes: function () {\n        this.observer.disconnect();\n    }\n\n});\n\nvar makeFactory = function (Constructor, tokens, pattern) {\n\n    return function (element, attribute) {\n\n        var property = new Constructor(element, attribute);\n\n        if (tokens && tokens.length) {\n            property.setTokens(tokens);\n        }\n\n        if (pattern) {\n            property.setPattern(pattern);\n        }\n\n        return property;\n\n    };\n\n};\n\nvar AriaProperty = ARIA.Property;\nvar AriaList = ARIA.List;\nvar factoryEntries = [\n    [AriaProperty, [\n        \"keyshortcuts\",\n        \"label\",\n        \"placeholder\",\n        \"roledescription\",\n        \"valuetext\"\n    ]],\n    // [AriaList, [\n    //     \"role\"\n    // ]],\n    [ARIA.Reference, [\n        \"activedescendant\",\n        \"details\",\n        \"errormessage\"\n    ]],\n    [ARIA.ReferenceList, [\n        \"controls\",\n        \"describedby\",\n        \"flowto\",\n        \"labelledby\",\n        \"owns\"\n    ]],\n    [ARIA.State, [\n        \"atomic\",\n        \"busy\",\n        \"disabled\",\n        \"modal\",\n        \"multiline\",\n        \"multiselectable\",\n        \"readonly\",\n        \"required\"\n    ]],\n    [ARIA.Tristate, [\n        \"checked\",\n        \"pressed\"\n    ]],\n    [ARIA.UndefinedState, [\n        \"expanded\",\n        \"grabbed\",\n        \"hidden\",\n        \"selected\"\n    ]],\n    [AriaProperty, [\n        \"colcount\",\n        \"colindex\",\n        \"colspan\",\n        \"level\",\n        \"posinset\",\n        \"rowcount\",\n        \"rowindex\",\n        \"rowspan\",\n        \"setsize\"\n    ], undefined, /^\\d+$/],\n    [AriaProperty, [\n        \"valuemax\",\n        \"valuemin\",\n        \"valuenow\"\n    ], undefined, /^(\\d+(\\.\\d+)?)|\\.\\d+$/],\n    [AriaProperty, [\"autocomplete\"], [\n        \"none\",\n        \"inline\",\n        \"list\",\n        \"both\"\n    ]],\n    [AriaProperty, [\"current\"], [\n        \"false\",\n        \"true\",\n        \"page\",\n        \"step\",\n        \"location\",\n        \"date\",\n        \"time\"\n    ]],\n    [AriaProperty, [\"haspopup\"], [\n        \"false\",\n        \"true\",\n        \"menu\",\n        \"listbox\",\n        \"tree\",\n        \"grid\",\n        \"dialog\"\n    ]],\n    [AriaProperty, [\"invalid\"], [\n        \"false\",\n        \"true\",\n        \"grammar\",\n        \"spelling\"\n    ]],\n    [AriaProperty, [\"live\"], [\n        \"off\",\n        \"assertive\",\n        \"polite\"\n    ]],\n    [AriaProperty, [\"orientation\"], [\n        undefined,\n        \"undefined\",\n        \"horizontal\",\n        \"vertical\"\n    ]],\n    [AriaProperty, [\"sort\"], [\n        \"none\",\n        \"ascending\",\n        \"descending\",\n        \"other\"\n    ]],\n    [AriaList, [\"dropeffect\"], [\n        \"none\",\n        \"copy\",\n        \"execute\",\n        \"link\",\n        \"move\",\n        \"popup\"\n    ]],\n    [AriaList, [\"relevant\"], [\n        \"additions\",\n        \"all\",\n        \"removals\",\n        \"text\"\n    ]],\n];\n\nfactoryEntries.forEach(function (entry) {\n\n    entry[1].forEach(function (property) {\n        ARIA.factories[property] = makeFactory(entry[0], entry[2], entry[3]);\n    });\n\n});\n\nARIA.addAlias(\"labelledby\", \"labeledby\");\n\n// https://github.com/LeaVerou/bliss/issues/49\nfunction addNodeProperty(name, valueMaker) {\n\n    Object.defineProperty(Node.prototype, name, {\n\n        configurable: true,\n\n        get: function getter() {\n\n            Object.defineProperty(Node.prototype, name, {\n                get: undefined\n            });\n\n            Object.defineProperty(this, name, {\n                value: valueMaker(this)\n            });\n\n            Object.defineProperty(Node.prototype, name, {\n                get: getter\n            });\n\n            return this[name];\n\n        }\n\n    });\n\n}\n\naddNodeProperty(\"aria\", function (context) {\n    return new ARIA.Element(context);\n});\n\naddNodeProperty(\"role\", function (context) {\n    return new AriaList(context, \"role\");\n});\n\nglobalVariable.ARIA = ARIA;\n}(window));"],"file":"aria.min.js"}