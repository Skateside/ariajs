{"version":3,"names":[],"mappings":"","sources":["aria.js"],"sourcesContent":["/*! ariajs - v1.0.0 - MIT license - 2018-10-11 */\n(function (globalVariable) {\n    \"use strict\";\n\nvar previousAria = globalVariable.ARIA;\n\n/**\n * @namespace\n */\nvar ARIA = {\n\n    /**\n     * Collection of factories for creating WAI-ARIA libraries.\n     * @type {Object}\n     */\n    factories: Object.create(null),\n\n    /**\n     * Map of all mis-spellings and aliases.\n     * @type {Object}\n     */\n    translate: Object.create(null)\n\n};\n\n/**\n * The version of the library.\n *\n * @memberof ARIA\n * @type {String}\n * @constant\n * @name VERSION\n */\nObject.defineProperty(ARIA, \"VERSION\", {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: \"1.0.0\"\n});\n\n/**\n * A function that returns the given variable unchanged.\n *\n * @private\n * @param   {?} x\n *          Variable to return.\n * @return  {?}\n *          Unmodified original variable.\n */\nvar identity = function (x) {\n    return x;\n};\n\n/**\n * Simple fall-back for Array.from.\n *\n * @private\n * @param   {Object} arrayLike\n *          Array-like structure.\n * @param   {Function} [map=identity]\n *          Optional function to convert the values.\n * @param   {?} [context]\n *          Optional context for the map function.\n * @return  {Array}\n *          Array made from the iven array-like structure.\n */\nvar arrayFrom = Array.from || function (arrayLike, map, context) {\n\n    if (typeof map === undefined) {\n        map = identity;\n    }\n\n    return Array.prototype.map.call(arrayLike, map, context);\n\n};\n\n/**\n * Normalises an attribute name so that it is in lowercase and always starts\n * with \"aria-\". This function has the alias of {@link ARIA.normalize} and\n * changing one will update the other.\n *\n * @memberof ARIA\n * @param    {String} attribute\n *           Attribute to normalise.\n * @return   {String}\n *           Normalised attribute.\n *\n * @example\n * ARIA.normalise(\"aria-busy\"); // -> \"aria-busy\"\n * ARIA.normalise(\"busy\"); // -> \"aria-busy\"\n * ARIA.normalise(\"  busy  \"); // -> \"aria-busy\"\n * ARIA.normalise(\"BUSY\"); // -> \"aria-busy\"\n */\nvar normalise = function (attribute) {\n\n    var string = String(attribute)\n        .toLowerCase()\n        .replace(/^\\s*(?:aria\\-)?|\\s*$/g, \"\");\n    var normal = \"aria-\" + string;\n\n    return ARIA.translate[normal] || normal;\n\n};\n\nvar normaliseDescriptor = {\n\n    configurable: false,\n    enumerable: true,\n\n    get: function () {\n        return normalise;\n    },\n\n    set: function (normaliser) {\n        normalise = normaliser;\n    }\n\n};\n\nObject.defineProperties(ARIA, {\n\n    normalise: normaliseDescriptor,\n\n    /**\n     * An alias of {@link ARIA.normalise}.\n     *\n     * @memberof ARIA\n     * @function\n     */\n    normalize: normaliseDescriptor\n\n});\n\n/**\n * A function that does nothing.\n *\n * @private\n */\nvar noop = function () {\n    return;\n};\n\nvar fnTest = (\n    (/return/).test(noop)\n    ? (/[\\.'\"]\\$super\\b/)\n    : (/.*/)\n);\n\n/**\n * Adds one or more methods to the class.\n *\n * @memberof Class\n * @name     addMethod\n * @static\n * @param    {Object|String} name\n *           Either the name of the method to add or an object of names to\n *           methods.\n * @param    {Function} [method]\n *           Method to add to the class.\n */\nfunction addClassMethods(name, method) {\n\n    var parent = this.parent;\n\n    if (typeof name === \"object\") {\n\n        Object.keys(name).forEach(function (key) {\n            addClassMethods.call(this, key, name[key]);\n        }, this);\n\n    } else {\n\n        this.prototype[name] = (\n            (\n                typeof method === \"function\"\n                && typeof parent[name] === \"function\"\n                && fnTest.test(method)\n            )\n            ? function () {\n\n                var hasSuper = \"$super\" in this;\n                var temp = this.$super;\n                var returnValue = null;\n\n                this.$super = parent[name];\n                returnValue = method.apply(this, arguments);\n\n                if (hasSuper) {\n                    this.$super = temp;\n                } else {\n                    delete this.$super;\n                }\n\n                return returnValue;\n\n            }\n            : method\n        );\n\n    }\n\n}\n\n/**\n * Creates a Class.\n *\n * @param  {Class} [Base]\n *         Optional parent class.\n * @param  {Object} proto\n *         Methods to add to the created Class' prototype.\n * @return {Class}\n *         Class created.\n */\nARIA.createClass = function (Base, proto) {\n\n    function Class() {\n        return this.init.apply(this, arguments);\n    }\n\n    if (!proto) {\n\n        proto = Base;\n        Base = Object;\n\n    }\n\n    Class.addMethod = addClassMethods;\n\n    /**\n     * Alias of {@link Class.addMethod}\n     */\n    Class.addMethods = addClassMethods;\n\n    /**\n     * Reference to the prototype of the Class' super-class.\n     * @type {Object}\n     */\n    Class.parent = Base.prototype;\n\n    Class.prototype = Object.create(Base.prototype);\n    addClassMethods.call(Class, proto);\n\n    Class.prototype.constructor = Class;\n\n    if (typeof Class.prototype.init !== \"function\") {\n        Class.prototype.init = noop;\n    }\n\n    return Class;\n\n};\n\n/**\n * Removes the {@link ARIA} namespace from the global object and restores\n * any previous value that may have been there.\n *\n * @return {Object}\n *         The {@link ARIA} namespace.\n */\nARIA.noConflict = function () {\n\n    globalVariable.ARIA = previousAria;\n\n    return ARIA;\n\n};\n\n/**\n * Gets the factory from {@link ARIA.factories} that matches either the given\n * attribute or the normalised version (see {@link ARIA.normalise}).\n *\n * @param  {String} attribute\n *         Attribute whose factory should be returned.\n * @return {Function}\n *         Factory for creating the attribute.\n */\nARIA.getFactory = function (attribute) {\n\n    return (\n        ARIA.factories[attribute]\n        || ARIA.factories[ARIA.normalise(attribute)]\n    );\n\n};\n\n/**\n * Executes the factory for the given attribute, passing in given parameters.\n * See {@link ARIA.getFactory}.\n *\n * @param  {String} attribute\n *         Attribute whose factory should be executed.\n * @param  {...?} [arguments]\n *         Optional parameters to pass to the factory.\n * @return {?}\n *         Result of executing the factory.\n * @throws {ReferenceError}\n *         There must be a factory for the given attribute.\n */\nARIA.runFactory = function (attribute) {\n\n    var factory = ARIA.getFactory(attribute);\n\n    if (!factory) {\n        throw new ReferenceError(attribute + \" is not a recognised factory\");\n    }\n\n    return factory.apply(undefined, Array.prototype.slice.call(arguments, 1));\n\n};\n\n/**\n * Creates an alias of WAI-ARIA attributes.\n *\n * @param  {String} source\n *         Source attribute for the alias.\n * @param  {Array.<String>|String} aliases\n *         Either a single alias or an array of aliases.\n * @throws {ReferenceError}\n *         The source attribute must have a related factory.\n */\nARIA.addAlias = function (source, aliases) {\n\n    var normalSource = ARIA.normalise(source).slice(5);\n\n    if (!Array.isArray(aliases)) {\n        aliases = [aliases];\n    }\n\n    if (!ARIA.getFactory(normalSource)) {\n\n        throw new ReferenceError(\n            \"ARIA.factories.\"\n            + normalSource\n            + \" does not exist\"\n        );\n\n    }\n\n    aliases.forEach(function (alias) {\n\n        var normalAlias = ARIA.normalise(alias).slice(5);\n\n        ARIA.translate[normalAlias] = normalSource;\n        ARIA.factories[normalAlias] = ARIA.factories[normalSource];\n\n    });\n\n};\n\n/**\n * Gets an element by the given ID. If the element cannot be found, null is\n * returned. This function is just a wrapper for document.getElementById to\n * allow the library to be easily modified in case a virtual DOM is being used.\n *\n * @param  {String} id\n *         ID of the element to find.\n * @return {Element|null}\n *         Element with the given ID or null if the element cannot be found.\n */\nARIA.getById = function (id) {\n    return document.getElementById(id);\n};\n\nvar counter = 0;\n\n/**\n * The default prefix for {@link ARIA.identify}.\n * @type {String}\n */\nARIA.defaultIdentifyPrefix = \"anonymous-element-\";\n\n/**\n * Returns the ID of the given element. If the element does not have an ID, a\n * unique one is generated. THe Generated ID is the given prefix and an\n * incrementing counter.\n * Pro tip: The HTML specs state that element IDs should start with a letter.\n *\n * @param  {Element} element\n *         Element whose ID should be returned.\n * @param  {String} [prefix=ARIA.defaultIdentifyPrefix]\n *         Prefix for the generated ID.\n * @return {String}\n *         The ID of the element.\n */\nARIA.identify = function (element, prefix) {\n\n    var id = element.id;\n\n    if (prefix === undefined) {\n        prefix = ARIA.defaultIdentifyPrefix;\n    }\n\n    if (!id) {\n\n        do {\n\n            id = prefix + counter;\n            counter += 1;\n\n        } while (ARIA.getById(id));\n\n        element.id = id;\n\n    }\n\n    return id;\n\n};\n\n/**\n * Checks to see if the given value is a Node.\n *\n * @param  {?} value\n *         Value to test.\n * @return {Boolean}\n *         true if the given value is a Node, false otherwise.\n */\nARIA.isNode = function (value) {\n    return (value instanceof Node);\n};\n\n/**\n * Handles basic WAI-ARIA properties.\n *\n * @class ARIA.Property\n */\nARIA.Property = ARIA.createClass(/** @lends ARIA.Property.prototype */{\n\n    /**\n     * @constructs ARIA.Property\n     * @param      {Element} element\n     *             Element whose attribute should be handled.\n     * @param      {String} attribute\n     *             Name of the attribute to handle.\n     */\n    init: function (element, attribute) {\n\n        var that = this;\n\n        /**\n         * Element whose attribute is being handled.\n         * @type {Element}\n         */\n        that.element = element;\n\n        /**\n         * Attribute being handled.\n         * @type {String}\n         */\n        that.attribute = attribute;\n\n        if (that.has()) {\n            that.set(that.get());\n        }\n\n        /**\n         * The value of the {@link ARIA.Property#attribute}.\n         *\n         * @memberof ARIA.Property\n         * @instance\n         * @name value\n         * @type {String}\n         */\n        Object.defineProperty(that, \"value\", {\n\n            get: function () {\n                return that.toString();\n            }\n\n        });\n\n    },\n\n    /**\n     * Sets the white-list of allowed tokens for this property.\n     *\n     * @param {Array.<String>} tokens\n     *        White-list of tokens.\n     */\n    setTokens: function (tokens) {\n\n        /**\n         * White-list of valid tokens.\n         * @type {Array.<String>}\n         */\n        this.tokens = arrayFrom(tokens);\n\n    },\n\n    /**\n     * Sets the pattern to work out if values are valid.\n     *\n     * @param {RegExp} pattern\n     *        Pattern for the values.\n     */\n    setPattern: function (pattern) {\n\n        /**\n         * Pattern that values have to match. Be aware that\n         * {@link ARIA.Property#tokens} will override this pattern even if they\n         * don't match.\n         * @type {RegExp}\n         */\n        this.pattern = pattern;\n\n    },\n\n    /**\n     * Checks to see if the given token is valid for this current property. This\n     * function checks against {@link ARIA.Property#tokens} and\n     * {@link ARIA.Property#pattern} if they're set.\n     *\n     * @param  {String} token\n     *         Token to check.\n     * @return {Boolean}\n     *         true if the token is valid, false otherwise.\n     */\n    isValidToken: function (token) {\n\n        var tokens = this.tokens;\n        var pattern = this.pattern;\n        var isValid = true;\n\n        if (tokens && tokens.length) {\n            isValid = tokens.indexOf(token) > -1;\n        } else if (pattern) {\n            isValid = pattern.test(token);\n        }\n\n        return isValid;\n\n    },\n\n    /**\n     * Interprets the given value so it can be set.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {String}\n     *         String based on the value.\n     */\n    interpret: function (value) {\n\n        return (\n            (value === null || value === undefined)\n            ? \"\"\n            : String(value).trim()\n        );\n\n    },\n\n    /**\n     * Sets {@link ARIA.Property#attribute} to the given value, once\n     * interpretted (see {@link ARIA.Property#interpret}) and validated (see\n     * {@link ARIA.Property#isValidToken}).\n     *\n     * @param {?} value\n     *        Value to set.\n     */\n    set: function (value) {\n\n        var token = this.interpret(value);\n// console.log(\"value = %o, token = %o, isValid = %o\", value, token, this.isValidToken(token));\n        if (token !== \"\" && this.isValidToken(token)) {\n            this.setAttribute(token);\n        }\n\n    },\n\n    /**\n     * Gets the value of {@link ARIA.Property#attribute} and interprets it\n     * (see {@link ARIA.Property#interpret}).\n     *\n     * @return {String}\n     *         Interpretted value of {@link ARIA.Property#attribute}.\n     */\n    get: function () {\n        return this.interpret(this.getAttribute());\n    },\n\n    /**\n     * Checks whether or not {@link ARIA.Property#attribute} is set on\n     * {@link ARIA.Property#element}.\n     *\n     * @return {Boolean}\n     *         true if the attribute is set, false otherwise.\n     */\n    has: function () {\n        return this.hasAttribute();\n    },\n\n    /**\n     * Removes {@link ARIA.Property#attribute} from\n     * {@link ARIA.Property#element}.\n     */\n    remove: function () {\n        this.removeAttribute();\n    },\n\n    /**\n     * Sets the value of {@link ARIA.Property#attribute}. This method bypasses\n     * the validation and interpretation processes of {@link ARIA.Property#set}.\n     * If value is empty (a falsy valid in JavaScript, but neither false nor 0)\n     * then the attribute is removed.\n     *\n     * @param {String} value\n     *        Value of the attribute to set.\n     */\n    setAttribute: function (value) {\n\n        if (!this.isSetting) {\n\n            /**\n             * A flag set while the setting is taking place. Prevents infinite\n             * loops caused by MutationObservers.\n             * @type {Boolean}\n             */\n            this.isSetting = true;\n            value = String(value);\n\n            if (value !== \"\" || value !== undefined || value !== null) {\n                this.element.setAttribute(this.attribute, value);\n            } else {\n                this.removeAttribute();\n            }\n\n            this.isSetting = false;\n\n        }\n\n    },\n\n    /**\n     * Gets the value of {@link ARIA.Property#attribute}. THis bypasses the\n     * interpretation of {@link ARIA.Property#get}.\n     *\n     * @return {String|null}\n     *         Value of the attribute or null if the attribute is not set.\n     */\n    getAttribute: function () {\n        return this.element.getAttribute(this.attribute);\n    },\n\n    /**\n     * Checks to see if {@link ARIA.Property#element} has\n     * {@link ARIA.Property#attribute}.\n     *\n     * @return {Boolean}\n     *         true if the attribute is set, false otherwise.\n     */\n    hasAttribute: function () {\n        return this.element.hasAttribute(this.attribute);\n    },\n\n    /**\n     * Removes {@link ARIA.Property#attribute} from\n     * {@link ARIA.Property#element}.\n     */\n    removeAttribute: function () {\n        this.element.removeAttribute(this.attribute);\n    },\n\n    /**\n     * Returns the value of {@link ARIA.Property#attribute} as a string. See\n     * {@link ARIA.Property#get}.\n     *\n     * @return {String}\n     *         Value of the attribute.\n     */\n    toString: function () {\n        return this.getAttribute() || \"\";\n    }\n\n});\n\n/**\n * Handles WAI-ARIA states.\n *\n * @class ARIA.State\n * @extends ARIA.Property\n */\nARIA.State = ARIA.createClass(ARIA.Property, /** @lends ARIA.State.prototype */{\n\n    /**\n     * Ensures that the given value is either a boolean or a string of \"true\" or\n     * \"false\". {@link ARIA.Property#tokens} and {@link ARIA.Property#pattern}\n     * are ignored.\n     *\n     * @param  {?} value\n     *         Value to check.\n     * @return {Boolean}\n     *         true if the token is valid, false otherwise.\n     */\n    isValidToken: function (value) {\n\n        return (\n            typeof value === \"boolean\"\n            || value === \"true\"\n            || value === \"false\"\n        );\n\n    },\n\n    /**\n     * Coerces the given value into a boolean.\n     *\n     * @param  {?} value\n     *         Value to coerce.\n     * @return {Boolean|String}\n     *         Coerced boolean or an empty string.\n     */\n    interpret: function (value) {\n\n        return (\n            typeof value === \"boolean\"\n            ? value === true\n            : (\n                (value === \"true\" || value === \"false\")\n                ? value === \"true\"\n                : \"\"\n            )\n        )\n\n    }\n\n});\n\n/**\n * Handles a WAI-ARIA state that can be true or false but can also be undefined.\n *\n * @class ARIA.UndefinedState\n * @extends ARIA.State\n */\nARIA.UndefinedState = ARIA.createClass(ARIA.State, /** @lends ARIA.UndefinedState.prototype */{\n\n    /**\n     * Allows for true, false or undefined.\n     *\n     * @inheritDoc\n     */\n    isValidToken: function (value) {\n\n        return (\n            value === undefined\n            || value === \"undefined\"\n            || this.$super(value)\n        );\n\n    },\n\n    /**\n     * Interprets undefined as \"undefined.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Boolean|String}\n     *         Either the boolean value, \"undefined\" or an empty string if the\n     *         value is not understood.\n     */\n    interpret: function (value) {\n\n        return (\n            (value === undefined || value === \"undefined\")\n            ? \"undefined\"\n            : this.$super(value)\n        );\n\n    },\n\n    /**\n     * Returns a boolean or undefined.\n     *\n     * @return {Boolean|undefined}\n     *         Value of the attribute.\n     */\n    get: function () {\n\n        var value = this.$super();\n\n        if (value === \"undefined\") {\n            value = undefined;\n        }\n\n        return value;\n\n    }\n\n});\n\n/**\n * Handles WAI-ARIA tristates. That is, a state that can be either true, false\n * or \"mixed\".\n *\n * @class ARIA.Tristate\n * @extends ARIA.State\n */\nARIA.Tristate = ARIA.createClass(ARIA.State, /** @lends ARIA.Tristate.prototype */{\n\n    /**\n     * Allows the token \"mixed\".\n     *\n     * @inheritDoc\n     */\n    isValidToken: function (value) {\n        return value === \"mixed\" || this.$super(value);\n    },\n\n    /**\n     * Allows the token \"mixed\".\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Boolean|String}\n     *         Either the boolean value, \"mixed\" or an empty string if the value\n     *         is not understood.\n     */\n    interpret: function (value) {\n\n        return (\n            value === \"mixed\"\n            ? value\n            : this.$super(value)\n        );\n\n    }\n\n});\n\n/**\n * The arrays for {@link ARIA.List} instances. This prevents the array from\n * being exposed and manipulated.\n * @private\n * @type {WeakMap}\n */\nvar lists = new WeakMap();\n\n/**\n * Creates an iterator.\n *\n * @private\n * @param   {ARIA.List} instance\n *          Instance that should gain an iterator.\n * @param   {Function} valueMaker\n *          Function to get the iterator value from the item.\n * @return  {Object}\n *          Iterator response.\n */\nvar makeIterator = function (instance, valueMaker) {\n\n   var index = 0;\n   // var list = lists.get(instance) || [];\n   var list = instance.get();\n   var length = list.length;\n\n   return {\n\n       next: function () {\n\n           var iteratorValue = {\n               value: valueMaker(list, index),\n               done: index >= length\n           };\n\n           index += 1;\n\n           return iteratorValue;\n\n       },\n\n       toString: function () {\n           return \"Array Iterator\";\n       }\n\n   };\n\n};\n\n/**\n * A version of DOMException that we can actually create.\n *\n * @class\n * @private\n * @extends Error\n * @param   {String} type\n *          Type of exception.\n * @param   {String} message\n *          Message for the exception.\n */\nvar DOMEx = function (type, message) {\n\n    this.name = type;\n    this.code = DOMException[type];\n    this.message = message;\n\n};\nDOMEx.prototype = Error.prototype;\n// DOMEx taken from:\n// https://github.com/yola/classlist-polyfill/blob/master/src/index.js\n\n/**\n * Handles a WAI-ARIA attribute that should be a space-separated list. This is\n * moddled on DOMTokenList (such as classList) so it will only accept unique\n * values and will throw errors for invalid values (see\n * {@link ARIA.List#isValidToken}).\n *\n * @class ARIA.List\n * @extends ARIA.Property\n */\nARIA.List = ARIA.createClass(ARIA.Property, /** ARIA.List.prototype */{\n\n    /**\n     * @inheritDoc\n     */\n    init: function (element, attribute) {\n\n        let that = this;\n\n        lists.set(that, []);\n\n        /**\n         * The number of items in this list.\n         *\n         * @name length\n         * @memberof ARIA.List\n         * @instance\n         * @type {Number}\n         */\n        Object.defineProperty(that, \"length\", {\n\n            get: function () {\n                return lists.get(that).length;\n            }\n\n        });\n\n        this.$super(element, attribute);\n\n    },\n\n    /**\n     * Ensures that the token is valid.\n     *\n     * @param  {?} token\n     *         Token to check.\n     * @return {Boolean}\n     *         true if the token is valid, false otherwise.\n     * @throws {DOMEx}\n     *         Given token cannot be an empty string.\n     * @throws {DOMEx}\n     *         Given token cannot contain a space.\n     */\n    isValidToken: function (token) {\n\n        if (token === \"\") {\n\n            throw new DOMEx(\n                \"SYNTAX_ERR\",\n                \"An invalid or illegal string was specified\"\n            );\n\n        }\n\n        if ((/\\s/).test(token)) {\n\n            throw new DOMEx(\n                \"INVALID_CHARACTER_ERR\",\n                \"String contains an invalid character\"\n            );\n\n        }\n\n        return this.$super(token);\n\n    },\n\n    /**\n     * Coerces the values into a string and splits it at the spaces.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {Array.<String>}\n     *         Array of strings.\n     */\n    interpret: function (value) {\n\n        var val = (\n            Array.isArray(value)\n            ? value.join(\" \")\n            : value\n        );\n        var string = this.$super(val);\n\n        return (\n            string.length\n            ? string.split(/\\s+/)\n            : []\n        );\n\n    },\n\n    /**\n     * Sets the value of the list to be the given value, removing all previous\n     * values first. To add to the previous values, use {@link ARIA.List#add}.\n     * The values are interpretted as an array (see {@link ARIA.List#interpret}\n     * and validated (see {@link ARIA.List#isValidToken}); only unique values\n     * are added.\n     *\n     * @param {?} value\n     *        Value(s) to add. If the given value is a string, it is assumed to\n     *        be a space-separated list.\n     */\n    set: function (value) {\n\n        var values = this.interpret(value);\n\n        this.remove.apply(this, this.toArray());\n\n        if (values.length) {\n            this.add.apply(this, values);\n        }\n\n        this.setAttribute(this.toString());\n\n    },\n\n    /**\n     * Gets the value of the attribute as an array.\n     *\n     * @return {Array.<String>}\n     *         Value of the attribute as an array.\n     */\n    get: function () {\n        return this.interpret(this.toString());\n    },\n\n    /**\n     * Checks to see if the attribute is set. If a parameter is passed, the list\n     * is checked to see if it contains the value.\n     *\n     * @param  {String} [item]\n     *         Optional value to check.\n     * @return {Boolean}\n     *         true if the attribute exists or the value is in the list, false\n     *         otherwise.\n     */\n    has: function (item) {\n\n        return (\n            item === undefined\n            ? this.hasAttribute()\n            : this.contains(item)\n        );\n\n    },\n\n    /**\n     * Converts the attribute into a string. Optionally, a string can be passed\n     * to be used as the glue for the array.\n     *\n     * @param  {String} [glue=\" \"]\n     *         Optional glue to use to join the array.\n     * @return {String}\n     *         String from the list.\n     */\n    toString: function (glue) {\n\n        if (glue === undefined) {\n            glue = \" \";\n        }\n\n        return lists.get(this).join(glue);\n\n    },\n\n    /**\n     * Adds the given values to the list. Items are only added if they're valid\n     * (see {@link ARIA.List#isValidToken}) and not already in the list.\n     *\n     * @param {String} ...arguments\n     *        Arguments to add.\n     */\n    add: function () {\n\n        var list = lists.get(this);\n\n        if (arguments.length) {\n\n            arrayFrom(arguments, function (item) {\n\n                if (this.isValidToken(item) && list.indexOf(item) < 0) {\n                    list.push(item);\n                }\n\n            }, this);\n\n            this.setAttribute(this.toString());\n\n        }\n\n    },\n\n    /**\n     * Either removes one or more values from the list or the attribute itself\n     * if no parameters are passed.\n     *\n     * @param {String} [...arguments]\n     *        Optional values to remove.\n     */\n    remove: function () {\n\n        var list = lists.get(this);\n        var string;\n\n        if (arguments.length) {\n\n            arrayFrom(arguments, function (item) {\n\n                var index = this.isValidToken(item) && list.indexOf(item);\n\n                if (index > -1) {\n                    list.splice(index, 1);\n                }\n\n            }, this);\n\n            string = this.toString();\n\n            if (string === \"\") {\n                this.removeAttribute();\n            } else {\n                this.setAttribute(string);\n            }\n\n        } else {\n\n            list.length = 0;\n            this.removeAttribute();\n\n        }\n\n    },\n\n    /**\n     * Checks to see if the given item is within the list.\n     *\n     * @param  {String} item\n     *         Item to check for.\n     * @return {Boolean}\n     *         true if the item is within the list, false otherwise.\n     */\n    contains: function (item) {\n        return this.isValidToken(item) && lists.get(this).indexOf(item) > -1;\n    },\n\n    /**\n     * Gets the item from the list at the specified index. If there is no item\n     * at that index, null is returned.\n     *\n     * @param  {Number} index\n     *         Index of the item to retrieve.\n     * @return {String|null}\n     *         The item at the given index or null if there is no item at that\n     *         index.\n     */\n    item: function (index) {\n        return lists.get(this)[Math.floor(index)] || null;\n    },\n\n    /**\n     * Replaces one value with another one.\n     *\n     * @param  {String} oldToken\n     *         Old value to replace.\n     * @param  {String} newToken\n     *         New token.\n     * @return {Boolean}\n     *         true if a replacement was made, false otherwise.\n     */\n    replace: function (oldToken, newToken) {\n\n        var isReplaced = false;\n        var list;\n        var index;\n\n        if (this.isValidToken(oldToken) && this.isValidToken(newToken)) {\n\n            list = lists.get(this);\n            index = list.indexOf(oldToken);\n\n            if (index > -1) {\n\n                list.splice(index, 1, newToken);\n                isReplaced = true;\n\n            }\n\n        }\n\n        return isReplaced;\n\n    },\n\n    /**\n     * Loops over the items within the array.\n     *\n     * @param {Function} handler\n     *        Function to execute on each item.\n     * @param {?} [context]\n     *        Optional context for the function.\n     */\n    forEach: function (handler, context) {\n        lists.get(this).forEach(handler, context);\n    },\n\n    /**\n     * Converts the list into an array. Optionally, the values can be converted\n     * by passing a mapping function.\n     *\n     * @param  {Function} [map]\n     *         Optional conversion function.\n     * @param  {?} context\n     *         Optional context for the optional function.\n     * @return {Array}\n     *         Array made from the list.\n     */\n    toArray: function (map, context) {\n        return arrayFrom(lists.get(this), map, context);\n    },\n\n    /**\n     * Returns an iterator for the entries.\n     *\n     * @return {Object}\n     *         Iterator value.\n     */\n    entries: function () {\n\n        return makeIterator(this, function (list, index) {\n            return [index, list[index]];\n        });\n\n    },\n\n    /**\n     * Returns an iterator for the keys.\n     *\n     * @return {Object}\n     *         Iterator value.\n     */\n    keys: function () {\n\n        return makeIterator(this, function (list, index) {\n            return index;\n        });\n\n    },\n\n    /**\n     * Returns an iterator for the values.\n     *\n     * @return {Object}\n     *         Iterator value.\n     */\n    values: function () {\n\n        return makeIterator(this, function (list, index) {\n            return list[index];\n        });\n\n    }\n\n});\n\nif (window.Symbol && Symbol.iterator) {\n    ARIA.List.prototype[Symbol.iterator] = ARIA.List.prototype.values;\n}\n\n/**\n * Handles WAI-ARIA attributes that reference a single ID.\n *\n * @class ARIA.Reference\n * @extends ARIA.Property\n */\nARIA.Reference = ARIA.createClass(ARIA.Property, /** @lends ARIA.Reference.prototype */{\n\n    /**\n     * Interprets the given value as a string. If the value is an element, the\n     * element's ID is returned, generating one if necessary = see\n     * {@link ARIA.identify}.\n     *\n     * @param  {?} value\n     *         Value to interpret.\n     * @return {String}\n     *         The interpretted value.\n     */\n    interpret: function (value) {\n\n        return (\n            ARIA.isNode(value)\n            ? ARIA.identify(value)\n            : this.$super(value)\n        );\n\n    },\n\n    /**\n     * Gets the element referenced by this attribute. If the element cannot be\n     * found or the attribute isn't set, null is returned.\n     *\n     * @return {Element|null}\n     *         Element referenced by this attribute or null if the element\n     *         cannot be found or the attribute isn't set.\n     */\n    get: function () {\n        return ARIA.getById(this.getAttribute());\n    },\n\n    /**\n     * Checks to see if attribute is set and the element referenced by the\n     * attribute exists, returning true if both are true.\n     *\n     * @return {Boolean}\n     *         true if the attribute exists and references an existing element,\n     *         false otherwise.\n     */\n    has: function () {\n        return this.hasAttribute() && this.get() !== null;\n    }\n\n});\n\nARIA.ReferenceList = ARIA.createClass(ARIA.List, {\n\n    interpret: function (value) {\n\n        var interpretted = [];\n\n        if (typeof value === \"object\" && typeof value.length === \"number\") {\n            interpretted = arrayFrom(value, this.$super, this);\n        } else if (typeof value === \"string\" || ARIA.isNode(value)) {\n            interpretted = [this.$super(value)];\n        }\n\n        // Remove all falsy values such as \"\" or null.\n        return interpretted.filter(Boolean);\n\n    },\n\n    get: function () {\n        return this.toArray(ARIA.getById);\n    },\n\n    contains: function (item) {\n        return this.$super(this.interpret(item)[0] || \"\");\n    },\n\n    has: function (item) {\n\n        return this.hasAttribute() && (\n            item === undefined\n            ? this.get().filter(Boolean).length === this.length\n            : this.contains(item)\n        );\n\n    }\n\n});\n\nARIA.Element = ARIA.createClass({\n\n    init: function (element) {\n\n        this.element = element;\n        this.preloadAttributes();\n        this.readAttributes();\n        this.observeAttributes();\n\n    },\n\n    preloadAttributes: function () {\n\n        Object.keys(ARIA.factories).forEach(function (attribute) {\n\n            var value;\n\n            Object.defineProperty(this, attribute, {\n\n                get: function () {\n\n                    if (!value) {\n\n                        value = ARIA.runFactory(\n                            attribute,\n                            this.element,\n                            ARIA.normalise(attribute)\n                        );\n\n                    }\n\n                    return value;\n\n                },\n\n                set: function (value) {\n                    this[attribute].set(value);\n                }\n\n            });\n\n        }, this);\n\n\n    },\n\n    readAttributes: function () {\n\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n        arrayFrom(this.element.attributes, function (attribute) {\n\n            var name = attribute.name.replace(/^aria\\-/, \"\");\n\n            if (hasOwnProperty.call(this, name)) {\n                this[name] = attribute.value;\n            }\n\n        }, this);\n\n    },\n\n    observeAttributes: function () {\n\n        var element = this.element;\n        var observer = new MutationObserver(function (mutations) {\n\n            mutations.forEach(function (mutation) {\n\n                var attribute = mutation.attributeName;\n                var suffix = (attribute || \"\").slice(5);\n\n                if (\n                    mutation.type === \"attributes\"\n                    && ARIA.factories[suffix]\n                ) {\n                    this[suffix] = element.getAttribute(attribute);\n                }\n\n            });\n\n        });\n\n        observer.observe(element, {\n            attributes: true\n        });\n\n        this.observer = observer;\n\n    },\n\n    disconnectAttributes: function () {\n        this.observer.disconnect();\n    }\n\n});\n\nvar makeFactory = function (Constructor, tokens, pattern) {\n\n    return function (element, attribute) {\n\n        var property = new Constructor(element, attribute);\n\n        if (tokens && tokens.length) {\n            property.setTokens(tokens);\n        }\n\n        if (pattern) {\n            property.setPattern(pattern);\n        }\n\n        return property;\n\n    };\n\n};\n\nvar AriaProperty = ARIA.Property;\nvar AriaList = ARIA.List;\nvar factoryEntries = [\n    [AriaProperty, [\n        \"keyshortcuts\",\n        \"label\",\n        \"placeholder\",\n        \"roledescription\",\n        \"valuetext\"\n    ]],\n    // [AriaList, [\n    //     \"role\"\n    // ]],\n    [ARIA.Reference, [\n        \"activedescendant\",\n        \"details\",\n        \"errormessage\"\n    ]],\n    [ARIA.ReferenceList, [\n        \"controls\",\n        \"describedby\",\n        \"flowto\",\n        \"labelledby\",\n        \"owns\"\n    ]],\n    [ARIA.State, [\n        \"atomic\",\n        \"busy\",\n        \"disabled\",\n        \"modal\",\n        \"multiline\",\n        \"multiselectable\",\n        \"readonly\",\n        \"required\"\n    ]],\n    [ARIA.Tristate, [\n        \"checked\",\n        \"pressed\"\n    ]],\n    [ARIA.UndefinedState, [\n        \"expanded\",\n        \"grabbed\",\n        \"hidden\",\n        \"selected\"\n    ]],\n    [AriaProperty, [\n        \"colcount\",\n        \"colindex\",\n        \"colspan\",\n        \"level\",\n        \"posinset\",\n        \"rowcount\",\n        \"rowindex\",\n        \"rowspan\",\n        \"setsize\"\n    ], undefined, /^\\d+$/],\n    [AriaProperty, [\n        \"valuemax\",\n        \"valuemin\",\n        \"valuenow\"\n    ], undefined, /^(\\d+(\\.\\d+)?)|\\.\\d+$/],\n    [AriaProperty, [\"autocomplete\"], [\n        \"none\",\n        \"inline\",\n        \"list\",\n        \"both\"\n    ]],\n    [AriaProperty, [\"current\"], [\n        \"false\",\n        \"true\",\n        \"page\",\n        \"step\",\n        \"location\",\n        \"date\",\n        \"time\"\n    ]],\n    [AriaProperty, [\"haspopup\"], [\n        \"false\",\n        \"true\",\n        \"menu\",\n        \"listbox\",\n        \"tree\",\n        \"grid\",\n        \"dialog\"\n    ]],\n    [AriaProperty, [\"invalid\"], [\n        \"false\",\n        \"true\",\n        \"grammar\",\n        \"spelling\"\n    ]],\n    [AriaProperty, [\"live\"], [\n        \"off\",\n        \"assertive\",\n        \"polite\"\n    ]],\n    [AriaProperty, [\"orientation\"], [\n        undefined,\n        \"undefined\",\n        \"horizontal\",\n        \"vertical\"\n    ]],\n    [AriaProperty, [\"sort\"], [\n        \"none\",\n        \"ascending\",\n        \"descending\",\n        \"other\"\n    ]],\n    [AriaList, [\"dropeffect\"], [\n        \"none\",\n        \"copy\",\n        \"execute\",\n        \"link\",\n        \"move\",\n        \"popup\"\n    ]],\n    [AriaList, [\"relevant\"], [\n        \"additions\",\n        \"all\",\n        \"removals\",\n        \"text\"\n    ]],\n];\n\nfactoryEntries.forEach(function (entry) {\n\n    entry[1].forEach(function (property) {\n        ARIA.factories[property] = makeFactory(entry[0], entry[2], entry[3]);\n    });\n\n});\n\nARIA.addAlias(\"labelledby\", \"labeledby\");\n\n// https://github.com/LeaVerou/bliss/issues/49\nfunction addNodeProperty(name, valueMaker) {\n\n    Object.defineProperty(Node.prototype, name, {\n\n        configurable: true,\n\n        get: function getter() {\n\n            Object.defineProperty(Node.prototype, name, {\n                get: undefined\n            });\n\n            Object.defineProperty(this, name, {\n                value: valueMaker(this)\n            });\n\n            Object.defineProperty(Node.prototype, name, {\n                get: getter\n            });\n\n            return this[name];\n\n        }\n\n    });\n\n}\n\naddNodeProperty(\"aria\", function (context) {\n    return new ARIA.Element(context);\n});\n\naddNodeProperty(\"role\", function (context) {\n    return new AriaList(context, \"role\");\n});\n\nglobalVariable.ARIA = ARIA;\n}(window));"],"file":"aria.js"}